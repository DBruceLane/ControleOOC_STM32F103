ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_ADC_Init,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_ADC_Init
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_ADC_Init:
  25              	.LFB65:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @file    stm32f1xx_hal_adc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + State functions
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ ADC state machine management
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          "stm32f1xx_hal_adc_ex.c".
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @verbatim
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   [..]
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) 12-bit resolution
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) 
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       for both regular and injected groups.
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Multimode Dual mode (available on devices with 2 ADCs or more).
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable DMA data storage in Multimode Dual mode (available on devices
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       with 2 DCs or more).
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode (available 
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       on devices with 2 DCs or more).
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC calibration
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       slower speed.
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### How to use this driver #####
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Enable the ADC interface
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****            Caution: On STM32F1, ADC clock frequency max is 14MHz (refer
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     to device datasheet).
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     this maximum frequency.
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) One clock setting is mandatory:
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC clock (core clock, also possibly conversion clock).
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) __ADC1_CLK_ENABLE();
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_GPIO_Init()
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ADCx_IRQHandler().
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ==========================================================================
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_Init().
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         sequencer, ..., of injected group)
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         monitored, thresholds, ...)
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         multimode parameters
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ====================================
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         conversion accuracy
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         transfer by DMA.
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by polling:
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (this function must be implemented in user program)
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              with transfer by DMA:
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Disable the ADC interface
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC clock disable
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPLLCLK2_OFF
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Deinitialize the DMA
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     *** Callback registration ***
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     =============================================
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      to register an interrupt callback.
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 6


 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      and a pointer to the user callback function.
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      weak function.
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      and the Callback ID.
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      This function allows to reset following callbacks:
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      are set to the corresponding weak functions.
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @endverbatim
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @attention
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * All rights reserved.</center></h2>
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 7


 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #include "stm32f1xx_hal.h"
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @addtogroup STM32F1xx_HAL_Driver
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC ADC
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief ADC HAL module driver
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              2U
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             2U
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               1U
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         10U
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 8


 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief    Initialization and Configuration functions
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim    
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) De-initialize the ADC.
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (clock source APB2).
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  27              		.loc 1 422 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 9


  36 0002 86B0     		sub	sp, sp, #24
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 32
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  43              		.loc 1 423 21
  44 0008 0023     		movs	r3, #0
  45 000a FB75     		strb	r3, [r7, #23]
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0U;
  46              		.loc 1 424 12
  47 000c 0023     		movs	r3, #0
  48 000e 3B61     		str	r3, [r7, #16]
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0U;
  49              		.loc 1 425 12
  50 0010 0023     		movs	r3, #0
  51 0012 BB60     		str	r3, [r7, #8]
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sqr1 = 0U;
  52              		.loc 1 426 12
  53 0014 0023     		movs	r3, #0
  54 0016 FB60     		str	r3, [r7, #12]
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
  55              		.loc 1 429 5
  56 0018 7B68     		ldr	r3, [r7, #4]
  57 001a 002B     		cmp	r3, #0
  58 001c 01D1     		bne	.L2
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
  59              		.loc 1 431 12
  60 001e 0123     		movs	r3, #1
  61 0020 BEE0     		b	.L3
  62              	.L2:
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
  63              		.loc 1 441 16
  64 0022 7B68     		ldr	r3, [r7, #4]
  65 0024 9B68     		ldr	r3, [r3, #8]
  66              		.loc 1 441 5
  67 0026 002B     		cmp	r3, #0
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 10


 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* procedure.                                                               */
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
  68              		.loc 1 458 11
  69 0028 7B68     		ldr	r3, [r7, #4]
  70 002a 9B6A     		ldr	r3, [r3, #40]
  71              		.loc 1 458 6
  72 002c 002B     		cmp	r3, #0
  73 002e 09D1     		bne	.L5
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Initialize ADC error code */
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  74              		.loc 1 461 5
  75 0030 7B68     		ldr	r3, [r7, #4]
  76 0032 0022     		movs	r2, #0
  77 0034 DA62     		str	r2, [r3, #44]
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
  78              		.loc 1 464 16
  79 0036 7B68     		ldr	r3, [r7, #4]
  80 0038 0022     		movs	r2, #0
  81 003a 83F82420 		strb	r2, [r3, #36]
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the ADC Callback settings */
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  82              		.loc 1 483 5
  83 003e 7868     		ldr	r0, [r7, #4]
  84 0040 FFF7FEFF 		bl	HAL_ADC_MspInit
  85              	.L5:
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 11


 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       bit ADON.                                                          */
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  86              		.loc 1 492 20
  87 0044 7868     		ldr	r0, [r7, #4]
  88 0046 FFF7FEFF 		bl	ADC_ConversionStop_Disable
  89 004a 0346     		mov	r3, r0
  90 004c FB75     		strb	r3, [r7, #23]
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
  91              		.loc 1 497 7
  92 004e 7B68     		ldr	r3, [r7, #4]
  93 0050 9B6A     		ldr	r3, [r3, #40]
  94 0052 03F01003 		and	r3, r3, #16
  95              		.loc 1 497 6
  96 0056 002B     		cmp	r3, #0
  97 0058 40F09980 		bne	.L6
  98              		.loc 1 497 65 discriminator 1
  99 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 100 005e 002B     		cmp	r3, #0
 101 0060 40F09580 		bne	.L6
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 102              		.loc 1 501 5
 103 0064 7B68     		ldr	r3, [r7, #4]
 104 0066 9B6A     		ldr	r3, [r3, #40]
 105 0068 23F48853 		bic	r3, r3, #4352
 106 006c 23F00203 		bic	r3, r3, #2
 107 0070 43F00202 		orr	r2, r3, #2
 108 0074 7B68     		ldr	r3, [r7, #4]
 109 0076 9A62     		str	r2, [r3, #40]
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC parameters */
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - data alignment                                                      */
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger polarity (always set to 1, because needed for all  */
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    triggers: external trigger of SW start)                             */
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       a conversion on injected group would start a conversion also on  */
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       regular group after ADC enabling.                                */
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                                          |
 110              		.loc 1 517 27
 111 0078 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 12


 112 007a 5A68     		ldr	r2, [r3, #4]
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 113              		.loc 1 518 17
 114 007c 7B68     		ldr	r3, [r7, #4]
 115 007e DB69     		ldr	r3, [r3, #28]
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 116              		.loc 1 517 79
 117 0080 1A43     		orrs	r2, r2, r3
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 118              		.loc 1 519 17
 119 0082 7B68     		ldr	r3, [r7, #4]
 120 0084 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 121 0086 5B00     		lsls	r3, r3, #1
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 122              		.loc 1 518 79
 123 0088 1343     		orrs	r3, r3, r2
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 124              		.loc 1 517 13
 125 008a BA68     		ldr	r2, [r7, #8]
 126 008c 1343     		orrs	r3, r3, r2
 127 008e BB60     		str	r3, [r7, #8]
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - scan mode                                                           */
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 128              		.loc 1 525 17
 129 0090 7B68     		ldr	r3, [r7, #4]
 130 0092 9B68     		ldr	r3, [r3, #8]
 131 0094 B3F5807F 		cmp	r3, #256
 132 0098 03D0     		beq	.L7
 133              		.loc 1 525 17 is_stmt 0 discriminator 2
 134 009a 7B68     		ldr	r3, [r7, #4]
 135 009c 9B68     		ldr	r3, [r3, #8]
 136 009e 012B     		cmp	r3, #1
 137 00a0 02D1     		bne	.L8
 138              	.L7:
 139              		.loc 1 525 17 discriminator 3
 140 00a2 4FF48073 		mov	r3, #256
 141 00a6 00E0     		b	.L9
 142              	.L8:
 143              		.loc 1 525 17 discriminator 4
 144 00a8 0023     		movs	r3, #0
 145              	.L9:
 146              		.loc 1 525 13 is_stmt 1 discriminator 6
 147 00aa 3A69     		ldr	r2, [r7, #16]
 148 00ac 1343     		orrs	r3, r3, r2
 149 00ae 3B61     		str	r3, [r7, #16]
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 150              		.loc 1 530 19 discriminator 6
 151 00b0 7B68     		ldr	r3, [r7, #4]
 152 00b2 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 13


 153              		.loc 1 530 8 discriminator 6
 154 00b4 012B     		cmp	r3, #1
 155 00b6 19D1     		bne	.L10
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 156              		.loc 1 532 21
 157 00b8 7B68     		ldr	r3, [r7, #4]
 158 00ba 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 159              		.loc 1 532 10
 160 00bc 002B     		cmp	r3, #0
 161 00be 09D1     		bne	.L11
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Enable the selected ADC regular discontinuous mode */
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set the number of channels to be converted in discontinuous mode */
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 162              		.loc 1 536 9
 163 00c0 7B68     		ldr	r3, [r7, #4]
 164 00c2 9B69     		ldr	r3, [r3, #24]
 165 00c4 013B     		subs	r3, r3, #1
 166 00c6 5A03     		lsls	r2, r3, #13
 167 00c8 3B69     		ldr	r3, [r7, #16]
 168 00ca 1343     		orrs	r3, r3, r2
 169 00cc 43F40063 		orr	r3, r3, #2048
 170 00d0 3B61     		str	r3, [r7, #16]
 171 00d2 0BE0     		b	.L10
 172              	.L11:
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* ADC regular group settings continuous and sequencer discontinuous*/
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                */
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 173              		.loc 1 545 9
 174 00d4 7B68     		ldr	r3, [r7, #4]
 175 00d6 9B6A     		ldr	r3, [r3, #40]
 176 00d8 43F02002 		orr	r2, r3, #32
 177 00dc 7B68     		ldr	r3, [r7, #4]
 178 00de 9A62     		str	r2, [r3, #40]
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 179              		.loc 1 548 9
 180 00e0 7B68     		ldr	r3, [r7, #4]
 181 00e2 DB6A     		ldr	r3, [r3, #44]
 182 00e4 43F00102 		orr	r2, r3, #1
 183 00e8 7B68     		ldr	r3, [r7, #4]
 184 00ea DA62     		str	r2, [r3, #44]
 185              	.L10:
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR1 with previous settings */
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR1,
 186              		.loc 1 553 7
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 14


 187 00ec 7B68     		ldr	r3, [r7, #4]
 188 00ee 1B68     		ldr	r3, [r3]
 189 00f0 5B68     		ldr	r3, [r3, #4]
 190 00f2 23F46941 		bic	r1, r3, #59648
 191 00f6 7B68     		ldr	r3, [r7, #4]
 192 00f8 1B68     		ldr	r3, [r3]
 193 00fa 3A69     		ldr	r2, [r7, #16]
 194 00fc 0A43     		orrs	r2, r2, r1
 195 00fe 5A60     		str	r2, [r3, #4]
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCEN  |
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCNUM    ,
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr1             );
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR2,
 196              		.loc 1 560 7
 197 0100 7B68     		ldr	r3, [r7, #4]
 198 0102 1B68     		ldr	r3, [r3]
 199 0104 9A68     		ldr	r2, [r3, #8]
 200 0106 284B     		ldr	r3, .L17
 201 0108 1340     		ands	r3, r3, r2
 202 010a 7A68     		ldr	r2, [r7, #4]
 203 010c 1268     		ldr	r2, [r2]
 204 010e B968     		ldr	r1, [r7, #8]
 205 0110 0B43     		orrs	r3, r3, r1
 206 0112 9360     		str	r3, [r2, #8]
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTSEL  |
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTTRIG |
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_CONT       ,
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr2             );
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 207              		.loc 1 576 9
 208 0114 7B68     		ldr	r3, [r7, #4]
 209 0116 9B68     		ldr	r3, [r3, #8]
 210              		.loc 1 576 8
 211 0118 B3F5807F 		cmp	r3, #256
 212 011c 03D0     		beq	.L12
 213              		.loc 1 576 9 discriminator 1
 214 011e 7B68     		ldr	r3, [r7, #4]
 215 0120 9B68     		ldr	r3, [r3, #8]
 216              		.loc 1 576 51 discriminator 1
 217 0122 012B     		cmp	r3, #1
 218 0124 04D1     		bne	.L13
 219              	.L12:
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 15


 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 220              		.loc 1 578 18
 221 0126 7B68     		ldr	r3, [r7, #4]
 222 0128 1B69     		ldr	r3, [r3, #16]
 223 012a 013B     		subs	r3, r3, #1
 224              		.loc 1 578 16
 225 012c 1B05     		lsls	r3, r3, #20
 226 012e FB60     		str	r3, [r7, #12]
 227              	.L13:
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
 228              		.loc 1 581 5
 229 0130 7B68     		ldr	r3, [r7, #4]
 230 0132 1B68     		ldr	r3, [r3]
 231 0134 DB6A     		ldr	r3, [r3, #44]
 232 0136 23F47001 		bic	r1, r3, #15728640
 233 013a 7B68     		ldr	r3, [r7, #4]
 234 013c 1B68     		ldr	r3, [r3]
 235 013e FA68     		ldr	r2, [r7, #12]
 236 0140 0A43     		orrs	r2, r2, r1
 237 0142 DA62     		str	r2, [r3, #44]
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                tmp_sqr1             );
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement path bit (TSVREFE).                                        */
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 238              		.loc 1 591 9
 239 0144 7B68     		ldr	r3, [r7, #4]
 240 0146 1B68     		ldr	r3, [r3]
 241 0148 9A68     		ldr	r2, [r3, #8]
 242 014a 184B     		ldr	r3, .L17+4
 243 014c 1340     		ands	r3, r3, r2
 244              		.loc 1 591 8
 245 014e BA68     		ldr	r2, [r7, #8]
 246 0150 9A42     		cmp	r2, r3
 247 0152 0BD1     		bne	.L14
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_TSVREFE                     ))
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          == tmp_cr2)
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to none */
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 248              		.loc 1 598 7
 249 0154 7B68     		ldr	r3, [r7, #4]
 250 0156 0022     		movs	r2, #0
 251 0158 DA62     		str	r2, [r3, #44]
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the ADC state */
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 252              		.loc 1 601 7
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 16


 253 015a 7B68     		ldr	r3, [r7, #4]
 254 015c 9B6A     		ldr	r3, [r3, #40]
 255 015e 23F00303 		bic	r3, r3, #3
 256 0162 43F00102 		orr	r2, r3, #1
 257 0166 7B68     		ldr	r3, [r7, #4]
 258 0168 9A62     		str	r2, [r3, #40]
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 259              		.loc 1 591 8
 260 016a 18E0     		b	.L16
 261              	.L14:
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 262              		.loc 1 608 7
 263 016c 7B68     		ldr	r3, [r7, #4]
 264 016e 9B6A     		ldr	r3, [r3, #40]
 265 0170 23F01203 		bic	r3, r3, #18
 266 0174 43F01002 		orr	r2, r3, #16
 267 0178 7B68     		ldr	r3, [r7, #4]
 268 017a 9A62     		str	r2, [r3, #40]
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 269              		.loc 1 613 7
 270 017c 7B68     		ldr	r3, [r7, #4]
 271 017e DB6A     		ldr	r3, [r3, #44]
 272 0180 43F00102 		orr	r2, r3, #1
 273 0184 7B68     		ldr	r3, [r7, #4]
 274 0186 DA62     		str	r2, [r3, #44]
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 275              		.loc 1 615 22
 276 0188 0123     		movs	r3, #1
 277 018a FB75     		strb	r3, [r7, #23]
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 278              		.loc 1 591 8
 279 018c 07E0     		b	.L16
 280              	.L6:
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 281              		.loc 1 622 5
 282 018e 7B68     		ldr	r3, [r7, #4]
 283 0190 9B6A     		ldr	r3, [r3, #40]
 284 0192 43F01002 		orr	r2, r3, #16
 285 0196 7B68     		ldr	r3, [r7, #4]
 286 0198 9A62     		str	r2, [r3, #40]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 17


 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 287              		.loc 1 624 20
 288 019a 0123     		movs	r3, #1
 289 019c FB75     		strb	r3, [r7, #23]
 290              	.L16:
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 291              		.loc 1 628 10
 292 019e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 293              	.L3:
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 294              		.loc 1 629 1
 295 01a0 1846     		mov	r0, r3
 296 01a2 1837     		adds	r7, r7, #24
 297              	.LCFI3:
 298              		.cfi_def_cfa_offset 8
 299 01a4 BD46     		mov	sp, r7
 300              	.LCFI4:
 301              		.cfi_def_cfa_register 13
 302              		@ sp needed
 303 01a6 80BD     		pop	{r7, pc}
 304              	.L18:
 305              		.align	2
 306              	.L17:
 307 01a8 FDF7E1FF 		.word	-1968131
 308 01ac FE0E1FFF 		.word	-14741762
 309              		.cfi_endproc
 310              	.LFE65:
 312              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 313              		.align	1
 314              		.global	HAL_ADC_DeInit
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu softvfp
 320              	HAL_ADC_DeInit:
 321              	.LFB66:
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 322              		.loc 1 640 1
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 16
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326 0000 80B5     		push	{r7, lr}
 327              	.LCFI5:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 18


 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 7, -8
 330              		.cfi_offset 14, -4
 331 0002 84B0     		sub	sp, sp, #16
 332              	.LCFI6:
 333              		.cfi_def_cfa_offset 24
 334 0004 00AF     		add	r7, sp, #0
 335              	.LCFI7:
 336              		.cfi_def_cfa_register 7
 337 0006 7860     		str	r0, [r7, #4]
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 338              		.loc 1 641 21
 339 0008 0023     		movs	r3, #0
 340 000a FB73     		strb	r3, [r7, #15]
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 341              		.loc 1 644 5
 342 000c 7B68     		ldr	r3, [r7, #4]
 343 000e 002B     		cmp	r3, #0
 344 0010 01D1     		bne	.L20
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      return HAL_ERROR;
 345              		.loc 1 646 13
 346 0012 0123     		movs	r3, #1
 347 0014 ADE0     		b	.L21
 348              	.L20:
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 349              		.loc 1 653 3
 350 0016 7B68     		ldr	r3, [r7, #4]
 351 0018 9B6A     		ldr	r3, [r3, #40]
 352 001a 43F00202 		orr	r2, r3, #2
 353 001e 7B68     		ldr	r3, [r7, #4]
 354 0020 9A62     		str	r2, [r3, #40]
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 355              		.loc 1 657 20
 356 0022 7868     		ldr	r0, [r7, #4]
 357 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 358 0028 0346     		mov	r3, r0
 359 002a FB73     		strb	r3, [r7, #15]
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 360              		.loc 1 662 6
 361 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 362 002e 002B     		cmp	r3, #0
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 19


 363 0030 40F09A80 		bne	.L22
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SR */
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 364              		.loc 1 670 5
 365 0034 7B68     		ldr	r3, [r7, #4]
 366 0036 1B68     		ldr	r3, [r3]
 367 0038 6FF01F02 		mvn	r2, #31
 368 003c 1A60     		str	r2, [r3]
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR1 */
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 369              		.loc 1 674 5
 370 003e 7B68     		ldr	r3, [r7, #4]
 371 0040 1B68     		ldr	r3, [r3]
 372 0042 5968     		ldr	r1, [r3, #4]
 373 0044 7B68     		ldr	r3, [r7, #4]
 374 0046 1A68     		ldr	r2, [r3]
 375 0048 4C4B     		ldr	r3, .L23
 376 004a 0B40     		ands	r3, r3, r1
 377 004c 5360     		str	r3, [r2, #4]
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR2 */
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 378              		.loc 1 680 5
 379 004e 7B68     		ldr	r3, [r7, #4]
 380 0050 1B68     		ldr	r3, [r3]
 381 0052 9968     		ldr	r1, [r3, #8]
 382 0054 7B68     		ldr	r3, [r7, #4]
 383 0056 1A68     		ldr	r2, [r3]
 384 0058 494B     		ldr	r3, .L23+4
 385 005a 0B40     		ands	r3, r3, r1
 386 005c 9360     		str	r3, [r2, #8]
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_ADON                                          ));
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR1 */
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 387              		.loc 1 687 5
 388 005e 7B68     		ldr	r3, [r7, #4]
 389 0060 1B68     		ldr	r3, [r3]
 390 0062 DA68     		ldr	r2, [r3, #12]
 391 0064 7B68     		ldr	r3, [r7, #4]
 392 0066 1B68     		ldr	r3, [r3]
 393 0068 02F07F42 		and	r2, r2, #-16777216
 394 006c DA60     		str	r2, [r3, #12]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 20


 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR2 */
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 395              		.loc 1 692 5
 396 006e 7B68     		ldr	r3, [r7, #4]
 397 0070 1B68     		ldr	r3, [r3]
 398 0072 1A69     		ldr	r2, [r3, #16]
 399 0074 7B68     		ldr	r3, [r7, #4]
 400 0076 1B68     		ldr	r3, [r3]
 401 0078 02F04042 		and	r2, r2, #-1073741824
 402 007c 1A61     		str	r2, [r3, #16]
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP0                                    ));
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR1 */
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 403              		.loc 1 698 5
 404 007e 7B68     		ldr	r3, [r7, #4]
 405 0080 1B68     		ldr	r3, [r3]
 406 0082 5B69     		ldr	r3, [r3, #20]
 407 0084 7A68     		ldr	r2, [r7, #4]
 408 0086 1268     		ldr	r2, [r2]
 409 0088 23F47F63 		bic	r3, r3, #4080
 410 008c 23F00F03 		bic	r3, r3, #15
 411 0090 5361     		str	r3, [r2, #20]
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 412              		.loc 1 700 5
 413 0092 7B68     		ldr	r3, [r7, #4]
 414 0094 1B68     		ldr	r3, [r3]
 415 0096 9B69     		ldr	r3, [r3, #24]
 416 0098 7A68     		ldr	r2, [r7, #4]
 417 009a 1268     		ldr	r2, [r2]
 418 009c 23F47F63 		bic	r3, r3, #4080
 419 00a0 23F00F03 		bic	r3, r3, #15
 420 00a4 9361     		str	r3, [r2, #24]
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 421              		.loc 1 702 5
 422 00a6 7B68     		ldr	r3, [r7, #4]
 423 00a8 1B68     		ldr	r3, [r3]
 424 00aa DB69     		ldr	r3, [r3, #28]
 425 00ac 7A68     		ldr	r2, [r7, #4]
 426 00ae 1268     		ldr	r2, [r2]
 427 00b0 23F47F63 		bic	r3, r3, #4080
 428 00b4 23F00F03 		bic	r3, r3, #15
 429 00b8 D361     		str	r3, [r2, #28]
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 430              		.loc 1 704 5
 431 00ba 7B68     		ldr	r3, [r7, #4]
 432 00bc 1B68     		ldr	r3, [r3]
 433 00be 1B6A     		ldr	r3, [r3, #32]
 434 00c0 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 21


 435 00c2 1268     		ldr	r2, [r2]
 436 00c4 23F47F63 		bic	r3, r3, #4080
 437 00c8 23F00F03 		bic	r3, r3, #15
 438 00cc 1362     		str	r3, [r2, #32]
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register HTR */
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 439              		.loc 1 707 5
 440 00ce 7B68     		ldr	r3, [r7, #4]
 441 00d0 1B68     		ldr	r3, [r3]
 442 00d2 5B6A     		ldr	r3, [r3, #36]
 443 00d4 7A68     		ldr	r2, [r7, #4]
 444 00d6 1268     		ldr	r2, [r2]
 445 00d8 23F47F63 		bic	r3, r3, #4080
 446 00dc 23F00F03 		bic	r3, r3, #15
 447 00e0 5362     		str	r3, [r2, #36]
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 448              		.loc 1 709 5
 449 00e2 7B68     		ldr	r3, [r7, #4]
 450 00e4 1B68     		ldr	r3, [r3]
 451 00e6 9B6A     		ldr	r3, [r3, #40]
 452 00e8 7A68     		ldr	r2, [r7, #4]
 453 00ea 1268     		ldr	r2, [r2]
 454 00ec 23F47F63 		bic	r3, r3, #4080
 455 00f0 23F00F03 		bic	r3, r3, #15
 456 00f4 9362     		str	r3, [r2, #40]
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 457              		.loc 1 712 5
 458 00f6 7B68     		ldr	r3, [r7, #4]
 459 00f8 1B68     		ldr	r3, [r3]
 460 00fa DA6A     		ldr	r2, [r3, #44]
 461 00fc 7B68     		ldr	r3, [r7, #4]
 462 00fe 1B68     		ldr	r3, [r3]
 463 0100 02F07F42 		and	r2, r2, #-16777216
 464 0104 DA62     		str	r2, [r3, #44]
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 465              		.loc 1 717 5
 466 0106 7B68     		ldr	r3, [r7, #4]
 467 0108 1B68     		ldr	r3, [r3]
 468 010a DA6A     		ldr	r2, [r3, #44]
 469 010c 7B68     		ldr	r3, [r7, #4]
 470 010e 1B68     		ldr	r3, [r3]
 471 0110 02F07F42 		and	r2, r2, #-16777216
 472 0114 DA62     		str	r2, [r3, #44]
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR2 */
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 473              		.loc 1 722 5
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 22


 474 0116 7B68     		ldr	r3, [r7, #4]
 475 0118 1B68     		ldr	r3, [r3]
 476 011a 1A6B     		ldr	r2, [r3, #48]
 477 011c 7B68     		ldr	r3, [r7, #4]
 478 011e 1B68     		ldr	r3, [r3]
 479 0120 02F04042 		and	r2, r2, #-1073741824
 480 0124 1A63     		str	r2, [r3, #48]
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR3 */
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 481              		.loc 1 726 5
 482 0126 7B68     		ldr	r3, [r7, #4]
 483 0128 1B68     		ldr	r3, [r3]
 484 012a 5A6B     		ldr	r2, [r3, #52]
 485 012c 7B68     		ldr	r3, [r7, #4]
 486 012e 1B68     		ldr	r3, [r3]
 487 0130 02F04042 		and	r2, r2, #-1073741824
 488 0134 5A63     		str	r2, [r3, #52]
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 489              		.loc 1 730 5
 490 0136 7B68     		ldr	r3, [r7, #4]
 491 0138 1B68     		ldr	r3, [r3]
 492 013a 9B6B     		ldr	r3, [r3, #56]
 493 013c 7A68     		ldr	r2, [r7, #4]
 494 013e 1268     		ldr	r2, [r2]
 495 0140 9B0D     		lsrs	r3, r3, #22
 496 0142 9B05     		lsls	r3, r3, #22
 497 0144 9363     		str	r3, [r2, #56]
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 498              		.loc 1 735 5
 499 0146 7B68     		ldr	r3, [r7, #4]
 500 0148 1B68     		ldr	r3, [r3]
 501 014a 9B6B     		ldr	r3, [r3, #56]
 502 014c 7A68     		ldr	r2, [r7, #4]
 503 014e 1268     		ldr	r2, [r2]
 504 0150 9B0D     		lsrs	r3, r3, #22
 505 0152 9B05     		lsls	r3, r3, #22
 506 0154 9363     		str	r3, [r2, #56]
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register DR */
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 23


 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*                                                                        */
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->MspDeInitCallback == NULL)
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->MspDeInitCallback(hadc);
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 507              		.loc 1 764 5
 508 0156 7868     		ldr	r0, [r7, #4]
 509 0158 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC error code to none */
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 510              		.loc 1 768 5
 511 015c 7B68     		ldr	r3, [r7, #4]
 512 015e 0022     		movs	r2, #0
 513 0160 DA62     		str	r2, [r3, #44]
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 514              		.loc 1 771 17
 515 0162 7B68     		ldr	r3, [r7, #4]
 516 0164 0022     		movs	r2, #0
 517 0166 9A62     		str	r2, [r3, #40]
 518              	.L22:
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 519              		.loc 1 776 3
 520 0168 7B68     		ldr	r3, [r7, #4]
 521 016a 0022     		movs	r2, #0
 522 016c 83F82420 		strb	r2, [r3, #36]
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 523              		.loc 1 779 10
 524 0170 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 525              	.L21:
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 526              		.loc 1 780 1
 527 0172 1846     		mov	r0, r3
 528 0174 1037     		adds	r7, r7, #16
 529              	.LCFI8:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 24


 530              		.cfi_def_cfa_offset 8
 531 0176 BD46     		mov	sp, r7
 532              	.LCFI9:
 533              		.cfi_def_cfa_register 13
 534              		@ sp needed
 535 0178 80BD     		pop	{r7, pc}
 536              	.L24:
 537 017a 00BF     		.align	2
 538              	.L23:
 539 017c 00003FFF 		.word	-12648448
 540 0180 F00601FF 		.word	-16709904
 541              		.cfi_endproc
 542              	.LFE66:
 544              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 545              		.align	1
 546              		.weak	HAL_ADC_MspInit
 547              		.syntax unified
 548              		.thumb
 549              		.thumb_func
 550              		.fpu softvfp
 552              	HAL_ADC_MspInit:
 553              	.LFB67:
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 554              		.loc 1 788 1
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 8
 557              		@ frame_needed = 1, uses_anonymous_args = 0
 558              		@ link register save eliminated.
 559 0000 80B4     		push	{r7}
 560              	.LCFI10:
 561              		.cfi_def_cfa_offset 4
 562              		.cfi_offset 7, -4
 563 0002 83B0     		sub	sp, sp, #12
 564              	.LCFI11:
 565              		.cfi_def_cfa_offset 16
 566 0004 00AF     		add	r7, sp, #0
 567              	.LCFI12:
 568              		.cfi_def_cfa_register 7
 569 0006 7860     		str	r0, [r7, #4]
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 570              		.loc 1 794 1
 571 0008 00BF     		nop
 572 000a 0C37     		adds	r7, r7, #12
 573              	.LCFI13:
 574              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 25


 575 000c BD46     		mov	sp, r7
 576              	.LCFI14:
 577              		.cfi_def_cfa_register 13
 578              		@ sp needed
 579 000e 80BC     		pop	{r7}
 580              	.LCFI15:
 581              		.cfi_restore 7
 582              		.cfi_def_cfa_offset 0
 583 0010 7047     		bx	lr
 584              		.cfi_endproc
 585              	.LFE67:
 587              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 588              		.align	1
 589              		.weak	HAL_ADC_MspDeInit
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 593              		.fpu softvfp
 595              	HAL_ADC_MspDeInit:
 596              	.LFB68:
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 597              		.loc 1 802 1
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 8
 600              		@ frame_needed = 1, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 602 0000 80B4     		push	{r7}
 603              	.LCFI16:
 604              		.cfi_def_cfa_offset 4
 605              		.cfi_offset 7, -4
 606 0002 83B0     		sub	sp, sp, #12
 607              	.LCFI17:
 608              		.cfi_def_cfa_offset 16
 609 0004 00AF     		add	r7, sp, #0
 610              	.LCFI18:
 611              		.cfi_def_cfa_register 7
 612 0006 7860     		str	r0, [r7, #4]
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 613              		.loc 1 808 1
 614 0008 00BF     		nop
 615 000a 0C37     		adds	r7, r7, #12
 616              	.LCFI19:
 617              		.cfi_def_cfa_offset 4
 618 000c BD46     		mov	sp, r7
 619              	.LCFI20:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 26


 620              		.cfi_def_cfa_register 13
 621              		@ sp needed
 622 000e 80BC     		pop	{r7}
 623              	.LCFI21:
 624              		.cfi_restore 7
 625              		.cfi_def_cfa_offset 0
 626 0010 7047     		bx	lr
 627              		.cfi_endproc
 628              	.LFE68:
 630              		.section	.text.HAL_ADC_Start,"ax",%progbits
 631              		.align	1
 632              		.global	HAL_ADC_Start
 633              		.syntax unified
 634              		.thumb
 635              		.thumb_func
 636              		.fpu softvfp
 638              	HAL_ADC_Start:
 639              	.LFB69:
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (pCallback == NULL)
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update the error code */
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 27


 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status = HAL_ERROR;
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status = HAL_ERROR;
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 28


 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update the error code */
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Return error status */
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     status =  HAL_ERROR;
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return status;
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 29


 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status =  HAL_ERROR;
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status =  HAL_ERROR;
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update the error code */
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Return error status */
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     status =  HAL_ERROR;
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return status;
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 30


1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Input and Output operation functions
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       ##### IO operation functions #####
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group.
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group.
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion event.
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Handle ADC interrupt request
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 640              		.loc 1 1047 1
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 16
 643              		@ frame_needed = 1, uses_anonymous_args = 0
 644 0000 80B5     		push	{r7, lr}
 645              	.LCFI22:
 646              		.cfi_def_cfa_offset 8
 647              		.cfi_offset 7, -8
 648              		.cfi_offset 14, -4
 649 0002 84B0     		sub	sp, sp, #16
 650              	.LCFI23:
 651              		.cfi_def_cfa_offset 24
 652 0004 00AF     		add	r7, sp, #0
 653              	.LCFI24:
 654              		.cfi_def_cfa_register 7
 655 0006 7860     		str	r0, [r7, #4]
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 656              		.loc 1 1048 21
 657 0008 0023     		movs	r3, #0
 658 000a FB73     		strb	r3, [r7, #15]
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 659              		.loc 1 1054 3
 660 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 31


 661 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 662 0012 012B     		cmp	r3, #1
 663 0014 01D1     		bne	.L28
 664              		.loc 1 1054 3 is_stmt 0 discriminator 1
 665 0016 0223     		movs	r3, #2
 666 0018 98E0     		b	.L29
 667              	.L28:
 668              		.loc 1 1054 3 discriminator 2
 669 001a 7B68     		ldr	r3, [r7, #4]
 670 001c 0122     		movs	r2, #1
 671 001e 83F82420 		strb	r2, [r3, #36]
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 672              		.loc 1 1057 20 is_stmt 1 discriminator 2
 673 0022 7868     		ldr	r0, [r7, #4]
 674 0024 FFF7FEFF 		bl	ADC_Enable
 675 0028 0346     		mov	r3, r0
 676 002a FB73     		strb	r3, [r7, #15]
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 677              		.loc 1 1060 6 discriminator 2
 678 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 679 002e 002B     		cmp	r3, #0
 680 0030 40F08780 		bne	.L30
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 681              		.loc 1 1065 5
 682 0034 7B68     		ldr	r3, [r7, #4]
 683 0036 9B6A     		ldr	r3, [r3, #40]
 684 0038 23F44073 		bic	r3, r3, #768
 685 003c 23F00103 		bic	r3, r3, #1
 686 0040 43F48072 		orr	r2, r3, #256
 687 0044 7B68     		ldr	r3, [r7, #4]
 688 0046 9A62     		str	r2, [r3, #40]
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 689              		.loc 1 1072 9
 690 0048 7B68     		ldr	r3, [r7, #4]
 691 004a 1B68     		ldr	r3, [r3]
 692              		.loc 1 1072 8
 693 004c 414A     		ldr	r2, .L42
 694 004e 9342     		cmp	r3, r2
 695 0050 05D1     		bne	.L31
 696              		.loc 1 1072 9 discriminator 1
 697 0052 414B     		ldr	r3, .L42+4
 698 0054 5B68     		ldr	r3, [r3, #4]
 699 0056 03F47023 		and	r3, r3, #983040
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 32


 700 005a 002B     		cmp	r3, #0
 701 005c 15D1     		bne	.L32
 702              	.L31:
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 703              		.loc 1 1075 7
 704 005e 7B68     		ldr	r3, [r7, #4]
 705 0060 9B6A     		ldr	r3, [r3, #40]
 706 0062 23F48012 		bic	r2, r3, #1048576
 707 0066 7B68     		ldr	r3, [r7, #4]
 708 0068 9A62     		str	r2, [r3, #40]
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 709              		.loc 1 1079 11
 710 006a 7B68     		ldr	r3, [r7, #4]
 711 006c 1B68     		ldr	r3, [r3]
 712 006e 5B68     		ldr	r3, [r3, #4]
 713 0070 03F48063 		and	r3, r3, #1024
 714              		.loc 1 1079 10
 715 0074 002B     		cmp	r3, #0
 716 0076 26D0     		beq	.L34
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 717              		.loc 1 1081 9
 718 0078 7B68     		ldr	r3, [r7, #4]
 719 007a 9B6A     		ldr	r3, [r3, #40]
 720 007c 23F44053 		bic	r3, r3, #12288
 721 0080 43F48052 		orr	r2, r3, #4096
 722 0084 7B68     		ldr	r3, [r7, #4]
 723 0086 9A62     		str	r2, [r3, #40]
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 724              		.loc 1 1079 10
 725 0088 1DE0     		b	.L34
 726              	.L32:
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 727              		.loc 1 1087 7
 728 008a 7B68     		ldr	r3, [r7, #4]
 729 008c 9B6A     		ldr	r3, [r3, #40]
 730 008e 43F48012 		orr	r2, r3, #1048576
 731 0092 7B68     		ldr	r3, [r7, #4]
 732 0094 9A62     		str	r2, [r3, #40]
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 733              		.loc 1 1091 11
 734 0096 7B68     		ldr	r3, [r7, #4]
 735 0098 1B68     		ldr	r3, [r3]
 736              		.loc 1 1091 10
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 33


 737 009a 2F4A     		ldr	r2, .L42+4
 738 009c 9342     		cmp	r3, r2
 739 009e 04D0     		beq	.L35
 740              		.loc 1 1091 11 discriminator 2
 741 00a0 7B68     		ldr	r3, [r7, #4]
 742 00a2 1B68     		ldr	r3, [r3]
 743 00a4 2B4A     		ldr	r2, .L42
 744 00a6 9342     		cmp	r3, r2
 745 00a8 0DD1     		bne	.L34
 746              	.L35:
 747              		.loc 1 1091 11 is_stmt 0 discriminator 3
 748 00aa 2B4B     		ldr	r3, .L42+4
 749 00ac 5B68     		ldr	r3, [r3, #4]
 750 00ae 03F48063 		and	r3, r3, #1024
 751 00b2 002B     		cmp	r3, #0
 752 00b4 07D0     		beq	.L34
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 753              		.loc 1 1093 9 is_stmt 1
 754 00b6 7B68     		ldr	r3, [r7, #4]
 755 00b8 9B6A     		ldr	r3, [r3, #40]
 756 00ba 23F44053 		bic	r3, r3, #12288
 757 00be 43F48052 		orr	r2, r3, #4096
 758 00c2 7B68     		ldr	r3, [r7, #4]
 759 00c4 9A62     		str	r2, [r3, #40]
 760              	.L34:
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 761              		.loc 1 1098 9
 762 00c6 7B68     		ldr	r3, [r7, #4]
 763 00c8 9B6A     		ldr	r3, [r3, #40]
 764 00ca 03F48053 		and	r3, r3, #4096
 765              		.loc 1 1098 8
 766 00ce 002B     		cmp	r3, #0
 767 00d0 06D0     		beq	.L36
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 768              		.loc 1 1101 7
 769 00d2 7B68     		ldr	r3, [r7, #4]
 770 00d4 DB6A     		ldr	r3, [r3, #44]
 771 00d6 23F00602 		bic	r2, r3, #6
 772 00da 7B68     		ldr	r3, [r7, #4]
 773 00dc DA62     		str	r2, [r3, #44]
 774 00de 02E0     		b	.L37
 775              	.L36:
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 776              		.loc 1 1106 7
 777 00e0 7B68     		ldr	r3, [r7, #4]
 778 00e2 0022     		movs	r2, #0
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 34


 779 00e4 DA62     		str	r2, [r3, #44]
 780              	.L37:
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 781              		.loc 1 1112 5
 782 00e6 7B68     		ldr	r3, [r7, #4]
 783 00e8 0022     		movs	r2, #0
 784 00ea 83F82420 		strb	r2, [r3, #36]
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag */
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 785              		.loc 1 1116 5
 786 00ee 7B68     		ldr	r3, [r7, #4]
 787 00f0 1B68     		ldr	r3, [r3]
 788 00f2 6FF00202 		mvn	r2, #2
 789 00f6 1A60     		str	r2, [r3]
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If ADC is master, ADC is enabled and conversion is started.            */
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 790              		.loc 1 1128 9
 791 00f8 7B68     		ldr	r3, [r7, #4]
 792 00fa 1B68     		ldr	r3, [r3]
 793 00fc 9B68     		ldr	r3, [r3, #8]
 794 00fe 03F46023 		and	r3, r3, #917504
 795              		.loc 1 1128 8
 796 0102 B3F5602F 		cmp	r3, #917504
 797 0106 13D1     		bne	.L38
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 798              		.loc 1 1129 9 discriminator 1
 799 0108 7B68     		ldr	r3, [r7, #4]
 800 010a 1B68     		ldr	r3, [r3]
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 801              		.loc 1 1128 50 discriminator 1
 802 010c 114A     		ldr	r2, .L42
 803 010e 9342     		cmp	r3, r2
 804 0110 05D1     		bne	.L39
 805              		.loc 1 1129 9 discriminator 2
 806 0112 114B     		ldr	r3, .L42+4
 807 0114 5B68     		ldr	r3, [r3, #4]
 808 0116 03F47023 		and	r3, r3, #983040
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 809              		.loc 1 1128 50 discriminator 2
 810 011a 002B     		cmp	r3, #0
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 35


 811 011c 08D1     		bne	.L38
 812              	.L39:
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 813              		.loc 1 1132 7
 814 011e 7B68     		ldr	r3, [r7, #4]
 815 0120 1B68     		ldr	r3, [r3]
 816 0122 9A68     		ldr	r2, [r3, #8]
 817 0124 7B68     		ldr	r3, [r7, #4]
 818 0126 1B68     		ldr	r3, [r3]
 819 0128 42F4A002 		orr	r2, r2, #5242880
 820 012c 9A60     		str	r2, [r3, #8]
 821 012e 0CE0     		b	.L41
 822              	.L38:
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 823              		.loc 1 1137 7
 824 0130 7B68     		ldr	r3, [r7, #4]
 825 0132 1B68     		ldr	r3, [r3]
 826 0134 9A68     		ldr	r2, [r3, #8]
 827 0136 7B68     		ldr	r3, [r7, #4]
 828 0138 1B68     		ldr	r3, [r3]
 829 013a 42F48012 		orr	r2, r2, #1048576
 830 013e 9A60     		str	r2, [r3, #8]
 831 0140 03E0     		b	.L41
 832              	.L30:
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 833              		.loc 1 1143 5
 834 0142 7B68     		ldr	r3, [r7, #4]
 835 0144 0022     		movs	r2, #0
 836 0146 83F82420 		strb	r2, [r3, #36]
 837              	.L41:
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 838              		.loc 1 1147 10
 839 014a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 840              	.L29:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 841              		.loc 1 1148 1
 842 014c 1846     		mov	r0, r3
 843 014e 1037     		adds	r7, r7, #16
 844              	.LCFI25:
 845              		.cfi_def_cfa_offset 8
 846 0150 BD46     		mov	sp, r7
 847              	.LCFI26:
 848              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 36


 849              		@ sp needed
 850 0152 80BD     		pop	{r7, pc}
 851              	.L43:
 852              		.align	2
 853              	.L42:
 854 0154 00280140 		.word	1073817600
 855 0158 00240140 		.word	1073816576
 856              		.cfi_endproc
 857              	.LFE69:
 859              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 860              		.align	1
 861              		.global	HAL_ADC_Stop
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 865              		.fpu softvfp
 867              	HAL_ADC_Stop:
 868              	.LFB70:
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 869              		.loc 1 1160 1
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 16
 872              		@ frame_needed = 1, uses_anonymous_args = 0
 873 0000 80B5     		push	{r7, lr}
 874              	.LCFI27:
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 7, -8
 877              		.cfi_offset 14, -4
 878 0002 84B0     		sub	sp, sp, #16
 879              	.LCFI28:
 880              		.cfi_def_cfa_offset 24
 881 0004 00AF     		add	r7, sp, #0
 882              	.LCFI29:
 883              		.cfi_def_cfa_register 7
 884 0006 7860     		str	r0, [r7, #4]
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 885              		.loc 1 1161 21
 886 0008 0023     		movs	r3, #0
 887 000a FB73     		strb	r3, [r7, #15]
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 888              		.loc 1 1167 3
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 37


 889 000c 7B68     		ldr	r3, [r7, #4]
 890 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 891 0012 012B     		cmp	r3, #1
 892 0014 01D1     		bne	.L45
 893              		.loc 1 1167 3 is_stmt 0 discriminator 1
 894 0016 0223     		movs	r3, #2
 895 0018 1AE0     		b	.L46
 896              	.L45:
 897              		.loc 1 1167 3 discriminator 2
 898 001a 7B68     		ldr	r3, [r7, #4]
 899 001c 0122     		movs	r2, #1
 900 001e 83F82420 		strb	r2, [r3, #36]
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 901              		.loc 1 1171 20 is_stmt 1 discriminator 2
 902 0022 7868     		ldr	r0, [r7, #4]
 903 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 904 0028 0346     		mov	r3, r0
 905 002a FB73     		strb	r3, [r7, #15]
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 906              		.loc 1 1174 6 discriminator 2
 907 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 908 002e 002B     		cmp	r3, #0
 909 0030 09D1     		bne	.L47
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 910              		.loc 1 1177 5
 911 0032 7B68     		ldr	r3, [r7, #4]
 912 0034 9B6A     		ldr	r3, [r3, #40]
 913 0036 23F48853 		bic	r3, r3, #4352
 914 003a 23F00103 		bic	r3, r3, #1
 915 003e 43F00102 		orr	r2, r3, #1
 916 0042 7B68     		ldr	r3, [r7, #4]
 917 0044 9A62     		str	r2, [r3, #40]
 918              	.L47:
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 919              		.loc 1 1183 3
 920 0046 7B68     		ldr	r3, [r7, #4]
 921 0048 0022     		movs	r2, #0
 922 004a 83F82420 		strb	r2, [r3, #36]
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 923              		.loc 1 1186 10
 924 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 925              	.L46:
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 38


 926              		.loc 1 1187 1
 927 0050 1846     		mov	r0, r3
 928 0052 1037     		adds	r7, r7, #16
 929              	.LCFI30:
 930              		.cfi_def_cfa_offset 8
 931 0054 BD46     		mov	sp, r7
 932              	.LCFI31:
 933              		.cfi_def_cfa_register 13
 934              		@ sp needed
 935 0056 80BD     		pop	{r7, pc}
 936              		.cfi_endproc
 937              	.LFE70:
 939              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 940              		.align	1
 941              		.global	HAL_ADC_PollForConversion
 942              		.syntax unified
 943              		.thumb
 944              		.thumb_func
 945              		.fpu softvfp
 947              	HAL_ADC_PollForConversion:
 948              	.LFB71:
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in DMA mode.
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         performed on each conversion.
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, limitation in case of sequencer enabled
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (several ranks selected): polling cannot be done on each 
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion inside the sequence. In this case, polling is replaced by
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         wait for maximum conversion time.
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 949              		.loc 1 1204 1
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 24
 952              		@ frame_needed = 1, uses_anonymous_args = 0
 953 0000 90B5     		push	{r4, r7, lr}
 954              	.LCFI32:
 955              		.cfi_def_cfa_offset 12
 956              		.cfi_offset 4, -12
 957              		.cfi_offset 7, -8
 958              		.cfi_offset 14, -4
 959 0002 87B0     		sub	sp, sp, #28
 960              	.LCFI33:
 961              		.cfi_def_cfa_offset 40
 962 0004 00AF     		add	r7, sp, #0
 963              	.LCFI34:
 964              		.cfi_def_cfa_register 7
 965 0006 7860     		str	r0, [r7, #4]
 966 0008 3960     		str	r1, [r7]
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 39


 967              		.loc 1 1205 12
 968 000a 0023     		movs	r3, #0
 969 000c 7B61     		str	r3, [r7, #20]
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 970              		.loc 1 1209 17
 971 000e 0023     		movs	r3, #0
 972 0010 FB60     		str	r3, [r7, #12]
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 973              		.loc 1 1210 12
 974 0012 0023     		movs	r3, #0
 975 0014 3B61     		str	r3, [r7, #16]
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 976              		.loc 1 1216 15
 977 0016 FFF7FEFF 		bl	HAL_GetTick
 978 001a 7861     		str	r0, [r7, #20]
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for        */
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* each conversion:                                                         */
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode                            */
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 979              		.loc 1 1221 7
 980 001c 7B68     		ldr	r3, [r7, #4]
 981 001e 1B68     		ldr	r3, [r3]
 982 0020 9B68     		ldr	r3, [r3, #8]
 983 0022 03F48073 		and	r3, r3, #256
 984              		.loc 1 1221 6
 985 0026 002B     		cmp	r3, #0
 986 0028 0BD0     		beq	.L49
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 987              		.loc 1 1224 5
 988 002a 7B68     		ldr	r3, [r7, #4]
 989 002c 9B6A     		ldr	r3, [r3, #40]
 990 002e 43F02002 		orr	r2, r3, #32
 991 0032 7B68     		ldr	r3, [r7, #4]
 992 0034 9A62     		str	r2, [r3, #40]
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 993              		.loc 1 1227 5
 994 0036 7B68     		ldr	r3, [r7, #4]
 995 0038 0022     		movs	r2, #0
 996 003a 83F82420 		strb	r2, [r3, #36]
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 997              		.loc 1 1229 12
 998 003e 0123     		movs	r3, #1
 999 0040 D3E0     		b	.L50
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 40


 1000              	.L49:
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    with NbrOfConversion =1), flag EOC is used to determine the           */
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    conversion completion.                                                */
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    NbrOfConversion >=2), flag EOC is set only at the end of the          */
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    sequence.                                                             */
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    be set.                                                               */
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 1001              		.loc 1 1246 7
 1002 0042 7B68     		ldr	r3, [r7, #4]
 1003 0044 1B68     		ldr	r3, [r3]
 1004 0046 5B68     		ldr	r3, [r3, #4]
 1005 0048 03F48073 		and	r3, r3, #256
 1006              		.loc 1 1246 6
 1007 004c 002B     		cmp	r3, #0
 1008 004e 31D1     		bne	.L51
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1009              		.loc 1 1247 7 discriminator 1
 1010 0050 7B68     		ldr	r3, [r7, #4]
 1011 0052 1B68     		ldr	r3, [r3]
 1012 0054 DB6A     		ldr	r3, [r3, #44]
 1013 0056 03F47003 		and	r3, r3, #15728640
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1014              		.loc 1 1246 57 discriminator 1
 1015 005a 002B     		cmp	r3, #0
 1016 005c 2AD1     		bne	.L51
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait until End of Conversion flag is raised */
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 1017              		.loc 1 1250 10
 1018 005e 21E0     		b	.L52
 1019              	.L54:
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1020              		.loc 1 1253 9
 1021 0060 3B68     		ldr	r3, [r7]
 1022 0062 B3F1FF3F 		cmp	r3, #-1
 1023 0066 1DD0     		beq	.L52
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1024              		.loc 1 1255 11
 1025 0068 3B68     		ldr	r3, [r7]
 1026 006a 002B     		cmp	r3, #0
 1027 006c 07D0     		beq	.L53
 1028              		.loc 1 1255 33 discriminator 1
 1029 006e FFF7FEFF 		bl	HAL_GetTick
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 41


 1030 0072 0246     		mov	r2, r0
 1031              		.loc 1 1255 47 discriminator 1
 1032 0074 7B69     		ldr	r3, [r7, #20]
 1033 0076 D31A     		subs	r3, r2, r3
 1034              		.loc 1 1255 28 discriminator 1
 1035 0078 3A68     		ldr	r2, [r7]
 1036 007a 9A42     		cmp	r2, r3
 1037 007c 12D2     		bcs	.L52
 1038              	.L53:
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* New check to avoid false timeout detection in case of preemption */
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 1039              		.loc 1 1258 14
 1040 007e 7B68     		ldr	r3, [r7, #4]
 1041 0080 1B68     		ldr	r3, [r3]
 1042 0082 1B68     		ldr	r3, [r3]
 1043 0084 03F00203 		and	r3, r3, #2
 1044              		.loc 1 1258 13
 1045 0088 002B     		cmp	r3, #0
 1046 008a 0BD1     		bne	.L52
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Update ADC state machine to timeout */
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1047              		.loc 1 1261 13
 1048 008c 7B68     		ldr	r3, [r7, #4]
 1049 008e 9B6A     		ldr	r3, [r3, #40]
 1050 0090 43F00402 		orr	r2, r3, #4
 1051 0094 7B68     		ldr	r3, [r7, #4]
 1052 0096 9A62     		str	r2, [r3, #40]
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Process unlocked */
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             __HAL_UNLOCK(hadc);
 1053              		.loc 1 1264 13
 1054 0098 7B68     		ldr	r3, [r7, #4]
 1055 009a 0022     		movs	r2, #0
 1056 009c 83F82420 		strb	r2, [r3, #36]
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             return HAL_TIMEOUT;
 1057              		.loc 1 1266 20
 1058 00a0 0323     		movs	r3, #3
 1059 00a2 A2E0     		b	.L50
 1060              	.L52:
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1061              		.loc 1 1250 11
 1062 00a4 7B68     		ldr	r3, [r7, #4]
 1063 00a6 1B68     		ldr	r3, [r3]
 1064 00a8 1B68     		ldr	r3, [r3]
 1065 00aa 03F00203 		and	r3, r3, #2
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1066              		.loc 1 1250 10
 1067 00ae 002B     		cmp	r3, #0
 1068 00b0 D6D0     		beq	.L54
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1069              		.loc 1 1246 6
 1070 00b2 70E0     		b	.L55
 1071              	.L51:
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 42


1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Replace polling by wait for maximum conversion time */
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1072              		.loc 1 1279 43
 1073 00b4 4F4B     		ldr	r3, .L69
 1074 00b6 1C68     		ldr	r4, [r3]
 1075              		.loc 1 1279 45
 1076 00b8 0220     		movs	r0, #2
 1077 00ba FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 1078 00be 0346     		mov	r3, r0
 1079              		.loc 1 1279 43
 1080 00c0 B4FBF3F2 		udiv	r2, r4, r3
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 1081              		.loc 1 1280 44
 1082 00c4 7B68     		ldr	r3, [r7, #4]
 1083 00c6 1B68     		ldr	r3, [r3]
 1084 00c8 1969     		ldr	r1, [r3, #16]
 1085 00ca 4B4B     		ldr	r3, .L69+4
 1086 00cc 0B40     		ands	r3, r3, r1
 1087 00ce 002B     		cmp	r3, #0
 1088 00d0 18D1     		bne	.L56
 1089              		.loc 1 1280 44 is_stmt 0 discriminator 1
 1090 00d2 7B68     		ldr	r3, [r7, #4]
 1091 00d4 1B68     		ldr	r3, [r3]
 1092 00d6 D968     		ldr	r1, [r3, #12]
 1093 00d8 484B     		ldr	r3, .L69+8
 1094 00da 0B40     		ands	r3, r3, r1
 1095 00dc 002B     		cmp	r3, #0
 1096 00de 11D1     		bne	.L56
 1097              		.loc 1 1280 44 discriminator 3
 1098 00e0 7B68     		ldr	r3, [r7, #4]
 1099 00e2 1B68     		ldr	r3, [r3]
 1100 00e4 1969     		ldr	r1, [r3, #16]
 1101 00e6 464B     		ldr	r3, .L69+12
 1102 00e8 0B40     		ands	r3, r3, r1
 1103 00ea 002B     		cmp	r3, #0
 1104 00ec 08D1     		bne	.L57
 1105              		.loc 1 1280 44 discriminator 5
 1106 00ee 7B68     		ldr	r3, [r7, #4]
 1107 00f0 1B68     		ldr	r3, [r3]
 1108 00f2 D968     		ldr	r1, [r3, #12]
 1109 00f4 434B     		ldr	r3, .L69+16
 1110 00f6 0B40     		ands	r3, r3, r1
 1111 00f8 002B     		cmp	r3, #0
 1112 00fa 01D1     		bne	.L57
 1113              		.loc 1 1280 44 discriminator 7
 1114 00fc 1423     		movs	r3, #20
 1115 00fe 20E0     		b	.L59
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 43


 1116              	.L57:
 1117              		.loc 1 1280 44 discriminator 8
 1118 0100 2923     		movs	r3, #41
 1119 0102 1EE0     		b	.L59
 1120              	.L56:
 1121              		.loc 1 1280 44 discriminator 4
 1122 0104 7B68     		ldr	r3, [r7, #4]
 1123 0106 1B68     		ldr	r3, [r3]
 1124 0108 1969     		ldr	r1, [r3, #16]
 1125 010a 3D4B     		ldr	r3, .L69+12
 1126 010c 0B40     		ands	r3, r3, r1
 1127 010e 002B     		cmp	r3, #0
 1128 0110 06D1     		bne	.L60
 1129              		.loc 1 1280 44 discriminator 11
 1130 0112 7B68     		ldr	r3, [r7, #4]
 1131 0114 1B68     		ldr	r3, [r3]
 1132 0116 D968     		ldr	r1, [r3, #12]
 1133 0118 3A4B     		ldr	r3, .L69+16
 1134 011a 0B40     		ands	r3, r3, r1
 1135 011c 002B     		cmp	r3, #0
 1136 011e 0DD0     		beq	.L61
 1137              	.L60:
 1138              		.loc 1 1280 44 discriminator 14
 1139 0120 7B68     		ldr	r3, [r7, #4]
 1140 0122 1B68     		ldr	r3, [r3]
 1141 0124 1969     		ldr	r1, [r3, #16]
 1142 0126 384B     		ldr	r3, .L69+20
 1143 0128 0B40     		ands	r3, r3, r1
 1144 012a 002B     		cmp	r3, #0
 1145 012c 08D1     		bne	.L62
 1146              		.loc 1 1280 44 discriminator 15
 1147 012e 7B68     		ldr	r3, [r7, #4]
 1148 0130 1B68     		ldr	r3, [r3]
 1149 0132 D968     		ldr	r1, [r3, #12]
 1150 0134 344B     		ldr	r3, .L69+20
 1151 0136 0B40     		ands	r3, r3, r1
 1152 0138 002B     		cmp	r3, #0
 1153 013a 01D1     		bne	.L62
 1154              	.L61:
 1155              		.loc 1 1280 44 discriminator 17
 1156 013c 5423     		movs	r3, #84
 1157 013e 00E0     		b	.L59
 1158              	.L62:
 1159              		.loc 1 1280 44 discriminator 18
 1160 0140 FC23     		movs	r3, #252
 1161              	.L59:
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1162              		.loc 1 1278 39 is_stmt 1
 1163 0142 02FB03F3 		mul	r3, r2, r3
 1164 0146 3B61     		str	r3, [r7, #16]
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 1165              		.loc 1 1282 10
 1166 0148 21E0     		b	.L64
 1167              	.L67:
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 44


1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1168              		.loc 1 1285 9
 1169 014a 3B68     		ldr	r3, [r7]
 1170 014c B3F1FF3F 		cmp	r3, #-1
 1171 0150 1AD0     		beq	.L65
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 1172              		.loc 1 1287 11
 1173 0152 3B68     		ldr	r3, [r7]
 1174 0154 002B     		cmp	r3, #0
 1175 0156 07D0     		beq	.L66
 1176              		.loc 1 1287 33 discriminator 1
 1177 0158 FFF7FEFF 		bl	HAL_GetTick
 1178 015c 0246     		mov	r2, r0
 1179              		.loc 1 1287 47 discriminator 1
 1180 015e 7B69     		ldr	r3, [r7, #20]
 1181 0160 D31A     		subs	r3, r2, r3
 1182              		.loc 1 1287 28 discriminator 1
 1183 0162 3A68     		ldr	r2, [r7]
 1184 0164 9A42     		cmp	r2, r3
 1185 0166 0FD2     		bcs	.L65
 1186              	.L66:
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* New check to avoid false timeout detection in case of preemption */
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 1187              		.loc 1 1290 44
 1188 0168 FB68     		ldr	r3, [r7, #12]
 1189              		.loc 1 1290 13
 1190 016a 3A69     		ldr	r2, [r7, #16]
 1191 016c 9A42     		cmp	r2, r3
 1192 016e 0BD9     		bls	.L65
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Update ADC state machine to timeout */
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1193              		.loc 1 1293 13
 1194 0170 7B68     		ldr	r3, [r7, #4]
 1195 0172 9B6A     		ldr	r3, [r3, #40]
 1196 0174 43F00402 		orr	r2, r3, #4
 1197 0178 7B68     		ldr	r3, [r7, #4]
 1198 017a 9A62     		str	r2, [r3, #40]
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Process unlocked */
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             __HAL_UNLOCK(hadc);
 1199              		.loc 1 1296 13
 1200 017c 7B68     		ldr	r3, [r7, #4]
 1201 017e 0022     		movs	r2, #0
 1202 0180 83F82420 		strb	r2, [r3, #36]
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             return HAL_TIMEOUT;
 1203              		.loc 1 1298 20
 1204 0184 0323     		movs	r3, #3
 1205 0186 30E0     		b	.L50
 1206              	.L65:
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Conversion_Timeout_CPU_cycles ++;
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 45


 1207              		.loc 1 1302 37
 1208 0188 FB68     		ldr	r3, [r7, #12]
 1209 018a 0133     		adds	r3, r3, #1
 1210 018c FB60     		str	r3, [r7, #12]
 1211              	.L64:
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1212              		.loc 1 1282 41
 1213 018e FB68     		ldr	r3, [r7, #12]
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1214              		.loc 1 1282 10
 1215 0190 3A69     		ldr	r2, [r7, #16]
 1216 0192 9A42     		cmp	r2, r3
 1217 0194 D9D8     		bhi	.L67
 1218              	.L55:
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear regular group conversion flag */
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 1219              		.loc 1 1307 3
 1220 0196 7B68     		ldr	r3, [r7, #4]
 1221 0198 1B68     		ldr	r3, [r3]
 1222 019a 6FF01202 		mvn	r2, #18
 1223 019e 1A60     		str	r2, [r3]
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update ADC state machine */
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1224              		.loc 1 1310 3
 1225 01a0 7B68     		ldr	r3, [r7, #4]
 1226 01a2 9B6A     		ldr	r3, [r3, #40]
 1227 01a4 43F40072 		orr	r2, r3, #512
 1228 01a8 7B68     		ldr	r3, [r7, #4]
 1229 01aa 9A62     		str	r2, [r3, #40]
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: On STM32F1 devices, in case of sequencer enabled                   */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       at the end of the sequence.                                        */
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1230              		.loc 1 1317 6
 1231 01ac 7B68     		ldr	r3, [r7, #4]
 1232 01ae 1B68     		ldr	r3, [r3]
 1233 01b0 9B68     		ldr	r3, [r3, #8]
 1234 01b2 03F46023 		and	r3, r3, #917504
 1235              		.loc 1 1317 5
 1236 01b6 B3F5602F 		cmp	r3, #917504
 1237 01ba 15D1     		bne	.L68
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1238              		.loc 1 1318 17 discriminator 1
 1239 01bc 7B68     		ldr	r3, [r7, #4]
 1240 01be 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1241              		.loc 1 1317 49 discriminator 1
 1242 01c0 002B     		cmp	r3, #0
 1243 01c2 11D1     		bne	.L68
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {   
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 46


1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 1244              		.loc 1 1321 5
 1245 01c4 7B68     		ldr	r3, [r7, #4]
 1246 01c6 9B6A     		ldr	r3, [r3, #40]
 1247 01c8 23F48072 		bic	r2, r3, #256
 1248 01cc 7B68     		ldr	r3, [r7, #4]
 1249 01ce 9A62     		str	r2, [r3, #40]
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1250              		.loc 1 1323 9
 1251 01d0 7B68     		ldr	r3, [r7, #4]
 1252 01d2 9B6A     		ldr	r3, [r3, #40]
 1253 01d4 03F48053 		and	r3, r3, #4096
 1254              		.loc 1 1323 8
 1255 01d8 002B     		cmp	r3, #0
 1256 01da 05D1     		bne	.L68
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     { 
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1257              		.loc 1 1325 7
 1258 01dc 7B68     		ldr	r3, [r7, #4]
 1259 01de 9B6A     		ldr	r3, [r3, #40]
 1260 01e0 43F00102 		orr	r2, r3, #1
 1261 01e4 7B68     		ldr	r3, [r7, #4]
 1262 01e6 9A62     		str	r2, [r3, #40]
 1263              	.L68:
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1264              		.loc 1 1330 10
 1265 01e8 0023     		movs	r3, #0
 1266              	.L50:
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1267              		.loc 1 1331 1
 1268 01ea 1846     		mov	r0, r3
 1269 01ec 1C37     		adds	r7, r7, #28
 1270              	.LCFI35:
 1271              		.cfi_def_cfa_offset 12
 1272 01ee BD46     		mov	sp, r7
 1273              	.LCFI36:
 1274              		.cfi_def_cfa_register 13
 1275              		@ sp needed
 1276 01f0 90BD     		pop	{r4, r7, pc}
 1277              	.L70:
 1278 01f2 00BF     		.align	2
 1279              	.L69:
 1280 01f4 00000000 		.word	SystemCoreClock
 1281 01f8 24499224 		.word	613566756
 1282 01fc 24499200 		.word	9586980
 1283 0200 92244912 		.word	306783378
 1284 0204 92244900 		.word	4793490
 1285 0208 49922400 		.word	2396745
 1286              		.cfi_endproc
 1287              	.LFE71:
 1289              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 47


 1290              		.align	1
 1291              		.global	HAL_ADC_PollForEvent
 1292              		.syntax unified
 1293              		.thumb
 1294              		.thumb_func
 1295              		.fpu softvfp
 1297              	HAL_ADC_PollForEvent:
 1298              	.LFB72:
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1299              		.loc 1 1343 1
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 24
 1302              		@ frame_needed = 1, uses_anonymous_args = 0
 1303 0000 80B5     		push	{r7, lr}
 1304              	.LCFI37:
 1305              		.cfi_def_cfa_offset 8
 1306              		.cfi_offset 7, -8
 1307              		.cfi_offset 14, -4
 1308 0002 86B0     		sub	sp, sp, #24
 1309              	.LCFI38:
 1310              		.cfi_def_cfa_offset 32
 1311 0004 00AF     		add	r7, sp, #0
 1312              	.LCFI39:
 1313              		.cfi_def_cfa_register 7
 1314 0006 F860     		str	r0, [r7, #12]
 1315 0008 B960     		str	r1, [r7, #8]
 1316 000a 7A60     		str	r2, [r7, #4]
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U; 
 1317              		.loc 1 1344 12
 1318 000c 0023     		movs	r3, #0
 1319 000e 7B61     		str	r3, [r7, #20]
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1320              		.loc 1 1351 15
 1321 0010 FFF7FEFF 		bl	HAL_GetTick
 1322 0014 7861     		str	r0, [r7, #20]
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check selected event flag */
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1323              		.loc 1 1354 8
 1324 0016 22E0     		b	.L72
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 48


 1325              	.L75:
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1326              		.loc 1 1357 7
 1327 0018 7B68     		ldr	r3, [r7, #4]
 1328 001a B3F1FF3F 		cmp	r3, #-1
 1329 001e 1ED0     		beq	.L72
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1330              		.loc 1 1359 9
 1331 0020 7B68     		ldr	r3, [r7, #4]
 1332 0022 002B     		cmp	r3, #0
 1333 0024 07D0     		beq	.L73
 1334              		.loc 1 1359 31 discriminator 1
 1335 0026 FFF7FEFF 		bl	HAL_GetTick
 1336 002a 0246     		mov	r2, r0
 1337              		.loc 1 1359 45 discriminator 1
 1338 002c 7B69     		ldr	r3, [r7, #20]
 1339 002e D31A     		subs	r3, r2, r3
 1340              		.loc 1 1359 26 discriminator 1
 1341 0030 7A68     		ldr	r2, [r7, #4]
 1342 0032 9A42     		cmp	r2, r3
 1343 0034 13D2     		bcs	.L72
 1344              	.L73:
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1345              		.loc 1 1362 12
 1346 0036 FB68     		ldr	r3, [r7, #12]
 1347 0038 1B68     		ldr	r3, [r3]
 1348 003a 1A68     		ldr	r2, [r3]
 1349 003c BB68     		ldr	r3, [r7, #8]
 1350 003e 1340     		ands	r3, r3, r2
 1351              		.loc 1 1362 11
 1352 0040 BA68     		ldr	r2, [r7, #8]
 1353 0042 9A42     		cmp	r2, r3
 1354 0044 0BD0     		beq	.L72
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1355              		.loc 1 1365 11
 1356 0046 FB68     		ldr	r3, [r7, #12]
 1357 0048 9B6A     		ldr	r3, [r3, #40]
 1358 004a 43F00402 		orr	r2, r3, #4
 1359 004e FB68     		ldr	r3, [r7, #12]
 1360 0050 9A62     		str	r2, [r3, #40]
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1361              		.loc 1 1368 11
 1362 0052 FB68     		ldr	r3, [r7, #12]
 1363 0054 0022     		movs	r2, #0
 1364 0056 83F82420 		strb	r2, [r3, #36]
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 1365              		.loc 1 1370 18
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 49


 1366 005a 0323     		movs	r3, #3
 1367 005c 13E0     		b	.L74
 1368              	.L72:
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1369              		.loc 1 1354 9
 1370 005e FB68     		ldr	r3, [r7, #12]
 1371 0060 1B68     		ldr	r3, [r3]
 1372 0062 1A68     		ldr	r2, [r3]
 1373 0064 BB68     		ldr	r3, [r7, #8]
 1374 0066 1340     		ands	r3, r3, r2
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1375              		.loc 1 1354 8
 1376 0068 BA68     		ldr	r2, [r7, #8]
 1377 006a 9A42     		cmp	r2, r3
 1378 006c D4D1     		bne	.L75
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1379              		.loc 1 1378 3
 1380 006e FB68     		ldr	r3, [r7, #12]
 1381 0070 9B6A     		ldr	r3, [r3, #40]
 1382 0072 43F48032 		orr	r2, r3, #65536
 1383 0076 FB68     		ldr	r3, [r7, #12]
 1384 0078 9A62     		str	r2, [r3, #40]
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear ADC analog watchdog flag */
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1385              		.loc 1 1381 3
 1386 007a FB68     		ldr	r3, [r7, #12]
 1387 007c 1B68     		ldr	r3, [r3]
 1388 007e 6FF00102 		mvn	r2, #1
 1389 0082 1A60     		str	r2, [r3]
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1390              		.loc 1 1384 10
 1391 0084 0023     		movs	r3, #0
 1392              	.L74:
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1393              		.loc 1 1385 1
 1394 0086 1846     		mov	r0, r3
 1395 0088 1837     		adds	r7, r7, #24
 1396              	.LCFI40:
 1397              		.cfi_def_cfa_offset 8
 1398 008a BD46     		mov	sp, r7
 1399              	.LCFI41:
 1400              		.cfi_def_cfa_register 13
 1401              		@ sp needed
 1402 008c 80BD     		pop	{r7, pc}
 1403              		.cfi_endproc
 1404              	.LFE72:
 1406              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 50


 1407              		.align	1
 1408              		.global	HAL_ADC_Start_IT
 1409              		.syntax unified
 1410              		.thumb
 1411              		.thumb_func
 1412              		.fpu softvfp
 1414              	HAL_ADC_Start_IT:
 1415              	.LFB73:
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1416              		.loc 1 1396 1
 1417              		.cfi_startproc
 1418              		@ args = 0, pretend = 0, frame = 16
 1419              		@ frame_needed = 1, uses_anonymous_args = 0
 1420 0000 80B5     		push	{r7, lr}
 1421              	.LCFI42:
 1422              		.cfi_def_cfa_offset 8
 1423              		.cfi_offset 7, -8
 1424              		.cfi_offset 14, -4
 1425 0002 84B0     		sub	sp, sp, #16
 1426              	.LCFI43:
 1427              		.cfi_def_cfa_offset 24
 1428 0004 00AF     		add	r7, sp, #0
 1429              	.LCFI44:
 1430              		.cfi_def_cfa_register 7
 1431 0006 7860     		str	r0, [r7, #4]
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1432              		.loc 1 1397 21
 1433 0008 0023     		movs	r3, #0
 1434 000a FB73     		strb	r3, [r7, #15]
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1435              		.loc 1 1403 3
 1436 000c 7B68     		ldr	r3, [r7, #4]
 1437 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1438 0012 012B     		cmp	r3, #1
 1439 0014 01D1     		bne	.L77
 1440              		.loc 1 1403 3 is_stmt 0 discriminator 1
 1441 0016 0223     		movs	r3, #2
 1442 0018 A0E0     		b	.L78
 1443              	.L77:
 1444              		.loc 1 1403 3 discriminator 2
 1445 001a 7B68     		ldr	r3, [r7, #4]
 1446 001c 0122     		movs	r2, #1
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 51


 1447 001e 83F82420 		strb	r2, [r3, #36]
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 1448              		.loc 1 1406 20 is_stmt 1 discriminator 2
 1449 0022 7868     		ldr	r0, [r7, #4]
 1450 0024 FFF7FEFF 		bl	ADC_Enable
 1451 0028 0346     		mov	r3, r0
 1452 002a FB73     		strb	r3, [r7, #15]
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1453              		.loc 1 1409 6 discriminator 2
 1454 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1455 002e 002B     		cmp	r3, #0
 1456 0030 40F08F80 		bne	.L79
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1457              		.loc 1 1414 5
 1458 0034 7B68     		ldr	r3, [r7, #4]
 1459 0036 9B6A     		ldr	r3, [r3, #40]
 1460 0038 23F47063 		bic	r3, r3, #3840
 1461 003c 23F00103 		bic	r3, r3, #1
 1462 0040 43F48072 		orr	r2, r3, #256
 1463 0044 7B68     		ldr	r3, [r7, #4]
 1464 0046 9A62     		str	r2, [r3, #40]
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1465              		.loc 1 1421 9
 1466 0048 7B68     		ldr	r3, [r7, #4]
 1467 004a 1B68     		ldr	r3, [r3]
 1468              		.loc 1 1421 8
 1469 004c 454A     		ldr	r2, .L91
 1470 004e 9342     		cmp	r3, r2
 1471 0050 05D1     		bne	.L80
 1472              		.loc 1 1421 9 discriminator 1
 1473 0052 454B     		ldr	r3, .L91+4
 1474 0054 5B68     		ldr	r3, [r3, #4]
 1475 0056 03F47023 		and	r3, r3, #983040
 1476 005a 002B     		cmp	r3, #0
 1477 005c 15D1     		bne	.L81
 1478              	.L80:
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1479              		.loc 1 1424 7
 1480 005e 7B68     		ldr	r3, [r7, #4]
 1481 0060 9B6A     		ldr	r3, [r3, #40]
 1482 0062 23F48012 		bic	r2, r3, #1048576
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 52


 1483 0066 7B68     		ldr	r3, [r7, #4]
 1484 0068 9A62     		str	r2, [r3, #40]
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1485              		.loc 1 1428 11
 1486 006a 7B68     		ldr	r3, [r7, #4]
 1487 006c 1B68     		ldr	r3, [r3]
 1488 006e 5B68     		ldr	r3, [r3, #4]
 1489 0070 03F48063 		and	r3, r3, #1024
 1490              		.loc 1 1428 10
 1491 0074 002B     		cmp	r3, #0
 1492 0076 26D0     		beq	.L83
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1493              		.loc 1 1430 9
 1494 0078 7B68     		ldr	r3, [r7, #4]
 1495 007a 9B6A     		ldr	r3, [r3, #40]
 1496 007c 23F44053 		bic	r3, r3, #12288
 1497 0080 43F48052 		orr	r2, r3, #4096
 1498 0084 7B68     		ldr	r3, [r7, #4]
 1499 0086 9A62     		str	r2, [r3, #40]
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1500              		.loc 1 1428 10
 1501 0088 1DE0     		b	.L83
 1502              	.L81:
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1503              		.loc 1 1436 7
 1504 008a 7B68     		ldr	r3, [r7, #4]
 1505 008c 9B6A     		ldr	r3, [r3, #40]
 1506 008e 43F48012 		orr	r2, r3, #1048576
 1507 0092 7B68     		ldr	r3, [r7, #4]
 1508 0094 9A62     		str	r2, [r3, #40]
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1509              		.loc 1 1440 11
 1510 0096 7B68     		ldr	r3, [r7, #4]
 1511 0098 1B68     		ldr	r3, [r3]
 1512              		.loc 1 1440 10
 1513 009a 334A     		ldr	r2, .L91+4
 1514 009c 9342     		cmp	r3, r2
 1515 009e 04D0     		beq	.L84
 1516              		.loc 1 1440 11 discriminator 2
 1517 00a0 7B68     		ldr	r3, [r7, #4]
 1518 00a2 1B68     		ldr	r3, [r3]
 1519 00a4 2F4A     		ldr	r2, .L91
 1520 00a6 9342     		cmp	r3, r2
 1521 00a8 0DD1     		bne	.L83
 1522              	.L84:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 53


 1523              		.loc 1 1440 11 is_stmt 0 discriminator 3
 1524 00aa 2F4B     		ldr	r3, .L91+4
 1525 00ac 5B68     		ldr	r3, [r3, #4]
 1526 00ae 03F48063 		and	r3, r3, #1024
 1527 00b2 002B     		cmp	r3, #0
 1528 00b4 07D0     		beq	.L83
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1529              		.loc 1 1442 9 is_stmt 1
 1530 00b6 7B68     		ldr	r3, [r7, #4]
 1531 00b8 9B6A     		ldr	r3, [r3, #40]
 1532 00ba 23F44053 		bic	r3, r3, #12288
 1533 00be 43F48052 		orr	r2, r3, #4096
 1534 00c2 7B68     		ldr	r3, [r7, #4]
 1535 00c4 9A62     		str	r2, [r3, #40]
 1536              	.L83:
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1537              		.loc 1 1447 9
 1538 00c6 7B68     		ldr	r3, [r7, #4]
 1539 00c8 9B6A     		ldr	r3, [r3, #40]
 1540 00ca 03F48053 		and	r3, r3, #4096
 1541              		.loc 1 1447 8
 1542 00ce 002B     		cmp	r3, #0
 1543 00d0 06D0     		beq	.L85
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1544              		.loc 1 1450 7
 1545 00d2 7B68     		ldr	r3, [r7, #4]
 1546 00d4 DB6A     		ldr	r3, [r3, #44]
 1547 00d6 23F00602 		bic	r2, r3, #6
 1548 00da 7B68     		ldr	r3, [r7, #4]
 1549 00dc DA62     		str	r2, [r3, #44]
 1550 00de 02E0     		b	.L86
 1551              	.L85:
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1552              		.loc 1 1455 7
 1553 00e0 7B68     		ldr	r3, [r7, #4]
 1554 00e2 0022     		movs	r2, #0
 1555 00e4 DA62     		str	r2, [r3, #44]
 1556              	.L86:
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1557              		.loc 1 1461 5
 1558 00e6 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 54


 1559 00e8 0022     		movs	r2, #0
 1560 00ea 83F82420 		strb	r2, [r3, #36]
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1561              		.loc 1 1465 5
 1562 00ee 7B68     		ldr	r3, [r7, #4]
 1563 00f0 1B68     		ldr	r3, [r3]
 1564 00f2 6FF00202 		mvn	r2, #2
 1565 00f6 1A60     		str	r2, [r3]
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 1566              		.loc 1 1468 5
 1567 00f8 7B68     		ldr	r3, [r7, #4]
 1568 00fa 1B68     		ldr	r3, [r3]
 1569 00fc 5A68     		ldr	r2, [r3, #4]
 1570 00fe 7B68     		ldr	r3, [r7, #4]
 1571 0100 1B68     		ldr	r3, [r3]
 1572 0102 42F02002 		orr	r2, r2, #32
 1573 0106 5A60     		str	r2, [r3, #4]
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 1574              		.loc 1 1477 9
 1575 0108 7B68     		ldr	r3, [r7, #4]
 1576 010a 1B68     		ldr	r3, [r3]
 1577 010c 9B68     		ldr	r3, [r3, #8]
 1578 010e 03F46023 		and	r3, r3, #917504
 1579              		.loc 1 1477 8
 1580 0112 B3F5602F 		cmp	r3, #917504
 1581 0116 13D1     		bne	.L87
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1582              		.loc 1 1478 9 discriminator 1
 1583 0118 7B68     		ldr	r3, [r7, #4]
 1584 011a 1B68     		ldr	r3, [r3]
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1585              		.loc 1 1477 50 discriminator 1
 1586 011c 114A     		ldr	r2, .L91
 1587 011e 9342     		cmp	r3, r2
 1588 0120 05D1     		bne	.L88
 1589              		.loc 1 1478 9 discriminator 2
 1590 0122 114B     		ldr	r3, .L91+4
 1591 0124 5B68     		ldr	r3, [r3, #4]
 1592 0126 03F47023 		and	r3, r3, #983040
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1593              		.loc 1 1477 50 discriminator 2
 1594 012a 002B     		cmp	r3, #0
 1595 012c 08D1     		bne	.L87
 1596              	.L88:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 55


1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1597              		.loc 1 1481 7
 1598 012e 7B68     		ldr	r3, [r7, #4]
 1599 0130 1B68     		ldr	r3, [r3]
 1600 0132 9A68     		ldr	r2, [r3, #8]
 1601 0134 7B68     		ldr	r3, [r7, #4]
 1602 0136 1B68     		ldr	r3, [r3]
 1603 0138 42F4A002 		orr	r2, r2, #5242880
 1604 013c 9A60     		str	r2, [r3, #8]
 1605 013e 0CE0     		b	.L90
 1606              	.L87:
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1607              		.loc 1 1486 7
 1608 0140 7B68     		ldr	r3, [r7, #4]
 1609 0142 1B68     		ldr	r3, [r3]
 1610 0144 9A68     		ldr	r2, [r3, #8]
 1611 0146 7B68     		ldr	r3, [r7, #4]
 1612 0148 1B68     		ldr	r3, [r3]
 1613 014a 42F48012 		orr	r2, r2, #1048576
 1614 014e 9A60     		str	r2, [r3, #8]
 1615 0150 03E0     		b	.L90
 1616              	.L79:
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1617              		.loc 1 1492 5
 1618 0152 7B68     		ldr	r3, [r7, #4]
 1619 0154 0022     		movs	r2, #0
 1620 0156 83F82420 		strb	r2, [r3, #36]
 1621              	.L90:
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1622              		.loc 1 1496 10
 1623 015a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1624              	.L78:
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1625              		.loc 1 1497 1
 1626 015c 1846     		mov	r0, r3
 1627 015e 1037     		adds	r7, r7, #16
 1628              	.LCFI45:
 1629              		.cfi_def_cfa_offset 8
 1630 0160 BD46     		mov	sp, r7
 1631              	.LCFI46:
 1632              		.cfi_def_cfa_register 13
 1633              		@ sp needed
 1634 0162 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 56


 1635              	.L92:
 1636              		.align	2
 1637              	.L91:
 1638 0164 00280140 		.word	1073817600
 1639 0168 00240140 		.word	1073816576
 1640              		.cfi_endproc
 1641              	.LFE73:
 1643              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1644              		.align	1
 1645              		.global	HAL_ADC_Stop_IT
 1646              		.syntax unified
 1647              		.thumb
 1648              		.thumb_func
 1649              		.fpu softvfp
 1651              	HAL_ADC_Stop_IT:
 1652              	.LFB74:
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1653              		.loc 1 1507 1
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 16
 1656              		@ frame_needed = 1, uses_anonymous_args = 0
 1657 0000 80B5     		push	{r7, lr}
 1658              	.LCFI47:
 1659              		.cfi_def_cfa_offset 8
 1660              		.cfi_offset 7, -8
 1661              		.cfi_offset 14, -4
 1662 0002 84B0     		sub	sp, sp, #16
 1663              	.LCFI48:
 1664              		.cfi_def_cfa_offset 24
 1665 0004 00AF     		add	r7, sp, #0
 1666              	.LCFI49:
 1667              		.cfi_def_cfa_register 7
 1668 0006 7860     		str	r0, [r7, #4]
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1669              		.loc 1 1508 21
 1670 0008 0023     		movs	r3, #0
 1671 000a FB73     		strb	r3, [r7, #15]
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1672              		.loc 1 1514 3
 1673 000c 7B68     		ldr	r3, [r7, #4]
 1674 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1675 0012 012B     		cmp	r3, #1
 1676 0014 01D1     		bne	.L94
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 57


 1677              		.loc 1 1514 3 is_stmt 0 discriminator 1
 1678 0016 0223     		movs	r3, #2
 1679 0018 22E0     		b	.L95
 1680              	.L94:
 1681              		.loc 1 1514 3 discriminator 2
 1682 001a 7B68     		ldr	r3, [r7, #4]
 1683 001c 0122     		movs	r2, #1
 1684 001e 83F82420 		strb	r2, [r3, #36]
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1685              		.loc 1 1518 20 is_stmt 1 discriminator 2
 1686 0022 7868     		ldr	r0, [r7, #4]
 1687 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1688 0028 0346     		mov	r3, r0
 1689 002a FB73     		strb	r3, [r7, #15]
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1690              		.loc 1 1521 6 discriminator 2
 1691 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1692 002e 002B     		cmp	r3, #0
 1693 0030 11D1     		bne	.L96
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1694              		.loc 1 1524 5
 1695 0032 7B68     		ldr	r3, [r7, #4]
 1696 0034 1B68     		ldr	r3, [r3]
 1697 0036 5A68     		ldr	r2, [r3, #4]
 1698 0038 7B68     		ldr	r3, [r7, #4]
 1699 003a 1B68     		ldr	r3, [r3]
 1700 003c 22F02002 		bic	r2, r2, #32
 1701 0040 5A60     		str	r2, [r3, #4]
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1702              		.loc 1 1527 5
 1703 0042 7B68     		ldr	r3, [r7, #4]
 1704 0044 9B6A     		ldr	r3, [r3, #40]
 1705 0046 23F48853 		bic	r3, r3, #4352
 1706 004a 23F00103 		bic	r3, r3, #1
 1707 004e 43F00102 		orr	r2, r3, #1
 1708 0052 7B68     		ldr	r3, [r7, #4]
 1709 0054 9A62     		str	r2, [r3, #40]
 1710              	.L96:
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1711              		.loc 1 1533 3
 1712 0056 7B68     		ldr	r3, [r7, #4]
 1713 0058 0022     		movs	r2, #0
 1714 005a 83F82420 		strb	r2, [r3, #36]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 58


1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1715              		.loc 1 1536 10
 1716 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1717              	.L95:
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1718              		.loc 1 1537 1
 1719 0060 1846     		mov	r0, r3
 1720 0062 1037     		adds	r7, r7, #16
 1721              	.LCFI50:
 1722              		.cfi_def_cfa_offset 8
 1723 0064 BD46     		mov	sp, r7
 1724              	.LCFI51:
 1725              		.cfi_def_cfa_register 13
 1726              		@ sp needed
 1727 0066 80BD     		pop	{r7, pc}
 1728              		.cfi_endproc
 1729              	.LFE74:
 1731              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1732              		.align	1
 1733              		.global	HAL_ADC_Start_DMA
 1734              		.syntax unified
 1735              		.thumb
 1736              		.thumb_func
 1737              		.fpu softvfp
 1739              	HAL_ADC_Start_DMA:
 1740              	.LFB75:
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         through DMA.
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA transfer complete
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA half transfer
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC2 converted data can be transferred in dual ADC mode using DMA
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of ADC1 (ADC master in multimode).
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In case of using ADC1 with DMA on a device featuring 2 ADC
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         instances: ADC1 conversion register DR contains ADC1 conversion 
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         result (ADC1 register DR bits 0 to 11) and, additionally, ADC2 last
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion result (ADC1 register DR bits 16 to 27). Therefore, to
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         have DMA transferring the conversion results of ADC1 only, DMA must
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be configured to transfer size: half word.
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1741              		.loc 1 1564 1
 1742              		.cfi_startproc
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 59


 1743              		@ args = 0, pretend = 0, frame = 24
 1744              		@ frame_needed = 1, uses_anonymous_args = 0
 1745 0000 80B5     		push	{r7, lr}
 1746              	.LCFI52:
 1747              		.cfi_def_cfa_offset 8
 1748              		.cfi_offset 7, -8
 1749              		.cfi_offset 14, -4
 1750 0002 86B0     		sub	sp, sp, #24
 1751              	.LCFI53:
 1752              		.cfi_def_cfa_offset 32
 1753 0004 00AF     		add	r7, sp, #0
 1754              	.LCFI54:
 1755              		.cfi_def_cfa_register 7
 1756 0006 F860     		str	r0, [r7, #12]
 1757 0008 B960     		str	r1, [r7, #8]
 1758 000a 7A60     		str	r2, [r7, #4]
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1759              		.loc 1 1565 21
 1760 000c 0023     		movs	r3, #0
 1761 000e FB75     		strb	r3, [r7, #23]
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if multimode is disabled (for devices with several ADC)     */
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If multimode is enabled, dedicated function multimode conversion         */
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* start DMA must be used.                                                  */
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 1762              		.loc 1 1573 6
 1763 0010 FB68     		ldr	r3, [r7, #12]
 1764 0012 1B68     		ldr	r3, [r3]
 1765              		.loc 1 1573 5
 1766 0014 644A     		ldr	r2, .L114
 1767 0016 9342     		cmp	r3, r2
 1768 0018 04D0     		beq	.L98
 1769              		.loc 1 1573 6 discriminator 1
 1770 001a FB68     		ldr	r3, [r7, #12]
 1771 001c 1B68     		ldr	r3, [r3]
 1772 001e 634A     		ldr	r2, .L114+4
 1773 0020 9342     		cmp	r3, r2
 1774 0022 06D1     		bne	.L99
 1775              	.L98:
 1776              		.loc 1 1573 6 is_stmt 0 discriminator 3
 1777 0024 604B     		ldr	r3, .L114
 1778 0026 5B68     		ldr	r3, [r3, #4]
 1779 0028 03F47023 		and	r3, r3, #983040
 1780              		.loc 1 1573 36 is_stmt 1 discriminator 3
 1781 002c 002B     		cmp	r3, #0
 1782 002e 40F0B380 		bne	.L100
 1783              	.L99:
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process locked */
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1784              		.loc 1 1576 5
 1785 0032 FB68     		ldr	r3, [r7, #12]
 1786 0034 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1787 0038 012B     		cmp	r3, #1
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 60


 1788 003a 01D1     		bne	.L101
 1789              		.loc 1 1576 5 is_stmt 0 discriminator 1
 1790 003c 0223     		movs	r3, #2
 1791 003e AEE0     		b	.L102
 1792              	.L101:
 1793              		.loc 1 1576 5 discriminator 2
 1794 0040 FB68     		ldr	r3, [r7, #12]
 1795 0042 0122     		movs	r2, #1
 1796 0044 83F82420 		strb	r2, [r3, #36]
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC peripheral */
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 1797              		.loc 1 1579 22 is_stmt 1 discriminator 2
 1798 0048 F868     		ldr	r0, [r7, #12]
 1799 004a FFF7FEFF 		bl	ADC_Enable
 1800 004e 0346     		mov	r3, r0
 1801 0050 FB75     		strb	r3, [r7, #23]
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1802              		.loc 1 1582 8 discriminator 2
 1803 0052 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1804 0054 002B     		cmp	r3, #0
 1805 0056 40F09A80 		bne	.L103
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state                                                        */
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1806              		.loc 1 1587 7
 1807 005a FB68     		ldr	r3, [r7, #12]
 1808 005c 9B6A     		ldr	r3, [r3, #40]
 1809 005e 23F47063 		bic	r3, r3, #3840
 1810 0062 23F00103 		bic	r3, r3, #1
 1811 0066 43F48072 		orr	r2, r3, #256
 1812 006a FB68     		ldr	r3, [r7, #12]
 1813 006c 9A62     		str	r2, [r3, #40]
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1814              		.loc 1 1594 9
 1815 006e FB68     		ldr	r3, [r7, #12]
 1816 0070 1B68     		ldr	r3, [r3]
 1817              		.loc 1 1594 8
 1818 0072 4E4A     		ldr	r2, .L114+4
 1819 0074 9342     		cmp	r3, r2
 1820 0076 05D1     		bne	.L104
 1821              		.loc 1 1594 9 discriminator 1
 1822 0078 4B4B     		ldr	r3, .L114
 1823 007a 5B68     		ldr	r3, [r3, #4]
 1824 007c 03F47023 		and	r3, r3, #983040
 1825 0080 002B     		cmp	r3, #0
 1826 0082 15D1     		bne	.L105
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 61


 1827              	.L104:
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1828              		.loc 1 1597 7
 1829 0084 FB68     		ldr	r3, [r7, #12]
 1830 0086 9B6A     		ldr	r3, [r3, #40]
 1831 0088 23F48012 		bic	r2, r3, #1048576
 1832 008c FB68     		ldr	r3, [r7, #12]
 1833 008e 9A62     		str	r2, [r3, #40]
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1834              		.loc 1 1601 11
 1835 0090 FB68     		ldr	r3, [r7, #12]
 1836 0092 1B68     		ldr	r3, [r3]
 1837 0094 5B68     		ldr	r3, [r3, #4]
 1838 0096 03F48063 		and	r3, r3, #1024
 1839              		.loc 1 1601 10
 1840 009a 002B     		cmp	r3, #0
 1841 009c 26D0     		beq	.L107
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1842              		.loc 1 1603 9
 1843 009e FB68     		ldr	r3, [r7, #12]
 1844 00a0 9B6A     		ldr	r3, [r3, #40]
 1845 00a2 23F44053 		bic	r3, r3, #12288
 1846 00a6 43F48052 		orr	r2, r3, #4096
 1847 00aa FB68     		ldr	r3, [r7, #12]
 1848 00ac 9A62     		str	r2, [r3, #40]
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1849              		.loc 1 1601 10
 1850 00ae 1DE0     		b	.L107
 1851              	.L105:
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1852              		.loc 1 1609 7
 1853 00b0 FB68     		ldr	r3, [r7, #12]
 1854 00b2 9B6A     		ldr	r3, [r3, #40]
 1855 00b4 43F48012 		orr	r2, r3, #1048576
 1856 00b8 FB68     		ldr	r3, [r7, #12]
 1857 00ba 9A62     		str	r2, [r3, #40]
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1858              		.loc 1 1613 11
 1859 00bc FB68     		ldr	r3, [r7, #12]
 1860 00be 1B68     		ldr	r3, [r3]
 1861              		.loc 1 1613 10
 1862 00c0 394A     		ldr	r2, .L114
 1863 00c2 9342     		cmp	r3, r2
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 62


 1864 00c4 04D0     		beq	.L108
 1865              		.loc 1 1613 11 discriminator 2
 1866 00c6 FB68     		ldr	r3, [r7, #12]
 1867 00c8 1B68     		ldr	r3, [r3]
 1868 00ca 384A     		ldr	r2, .L114+4
 1869 00cc 9342     		cmp	r3, r2
 1870 00ce 0DD1     		bne	.L107
 1871              	.L108:
 1872              		.loc 1 1613 11 is_stmt 0 discriminator 3
 1873 00d0 354B     		ldr	r3, .L114
 1874 00d2 5B68     		ldr	r3, [r3, #4]
 1875 00d4 03F48063 		and	r3, r3, #1024
 1876 00d8 002B     		cmp	r3, #0
 1877 00da 07D0     		beq	.L107
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1878              		.loc 1 1615 9 is_stmt 1
 1879 00dc FB68     		ldr	r3, [r7, #12]
 1880 00de 9B6A     		ldr	r3, [r3, #40]
 1881 00e0 23F44053 		bic	r3, r3, #12288
 1882 00e4 43F48052 		orr	r2, r3, #4096
 1883 00e8 FB68     		ldr	r3, [r7, #12]
 1884 00ea 9A62     		str	r2, [r3, #40]
 1885              	.L107:
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* State machine update: Check if an injected conversion is ongoing */
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1886              		.loc 1 1620 11
 1887 00ec FB68     		ldr	r3, [r7, #12]
 1888 00ee 9B6A     		ldr	r3, [r3, #40]
 1889 00f0 03F48053 		and	r3, r3, #4096
 1890              		.loc 1 1620 10
 1891 00f4 002B     		cmp	r3, #0
 1892 00f6 06D0     		beq	.L109
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC error code fields related to conversions on group regular */
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1893              		.loc 1 1623 9
 1894 00f8 FB68     		ldr	r3, [r7, #12]
 1895 00fa DB6A     		ldr	r3, [r3, #44]
 1896 00fc 23F00602 		bic	r2, r3, #6
 1897 0100 FB68     		ldr	r3, [r7, #12]
 1898 0102 DA62     		str	r2, [r3, #44]
 1899 0104 02E0     		b	.L110
 1900              	.L109:
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC all error code fields */
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 1901              		.loc 1 1628 9
 1902 0106 FB68     		ldr	r3, [r7, #12]
 1903 0108 0022     		movs	r2, #0
 1904 010a DA62     		str	r2, [r3, #44]
 1905              	.L110:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 63


1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1906              		.loc 1 1634 7
 1907 010c FB68     		ldr	r3, [r7, #12]
 1908 010e 0022     		movs	r2, #0
 1909 0110 83F82420 		strb	r2, [r3, #36]
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1910              		.loc 1 1637 11
 1911 0114 FB68     		ldr	r3, [r7, #12]
 1912 0116 1B6A     		ldr	r3, [r3, #32]
 1913              		.loc 1 1637 42
 1914 0118 254A     		ldr	r2, .L114+8
 1915 011a 9A62     		str	r2, [r3, #40]
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1916              		.loc 1 1640 11
 1917 011c FB68     		ldr	r3, [r7, #12]
 1918 011e 1B6A     		ldr	r3, [r3, #32]
 1919              		.loc 1 1640 46
 1920 0120 244A     		ldr	r2, .L114+12
 1921 0122 DA62     		str	r2, [r3, #44]
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA error callback */
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1922              		.loc 1 1643 11
 1923 0124 FB68     		ldr	r3, [r7, #12]
 1924 0126 1B6A     		ldr	r3, [r3, #32]
 1925              		.loc 1 1643 43
 1926 0128 234A     		ldr	r2, .L114+16
 1927 012a 1A63     		str	r2, [r3, #48]
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* operations)                                                          */
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1928              		.loc 1 1652 7
 1929 012c FB68     		ldr	r3, [r7, #12]
 1930 012e 1B68     		ldr	r3, [r3]
 1931 0130 6FF00202 		mvn	r2, #2
 1932 0134 1A60     		str	r2, [r3]
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable ADC DMA mode */
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1933              		.loc 1 1655 7
 1934 0136 FB68     		ldr	r3, [r7, #12]
 1935 0138 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 64


 1936 013a 9A68     		ldr	r2, [r3, #8]
 1937 013c FB68     		ldr	r3, [r7, #12]
 1938 013e 1B68     		ldr	r3, [r3]
 1939 0140 42F48072 		orr	r2, r2, #256
 1940 0144 9A60     		str	r2, [r3, #8]
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start the DMA channel */
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1941              		.loc 1 1658 7
 1942 0146 FB68     		ldr	r3, [r7, #12]
 1943 0148 186A     		ldr	r0, [r3, #32]
 1944              		.loc 1 1658 57
 1945 014a FB68     		ldr	r3, [r7, #12]
 1946 014c 1B68     		ldr	r3, [r3]
 1947              		.loc 1 1658 52
 1948 014e 4C33     		adds	r3, r3, #76
 1949              		.loc 1 1658 7
 1950 0150 1946     		mov	r1, r3
 1951 0152 BA68     		ldr	r2, [r7, #8]
 1952 0154 7B68     		ldr	r3, [r7, #4]
 1953 0156 FFF7FEFF 		bl	HAL_DMA_Start_IT
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* trigger event.                                                       */
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 1954              		.loc 1 1664 11
 1955 015a FB68     		ldr	r3, [r7, #12]
 1956 015c 1B68     		ldr	r3, [r3]
 1957 015e 9B68     		ldr	r3, [r3, #8]
 1958 0160 03F46023 		and	r3, r3, #917504
 1959              		.loc 1 1664 10
 1960 0164 B3F5602F 		cmp	r3, #917504
 1961 0168 08D1     		bne	.L111
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with SW start */
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1962              		.loc 1 1667 9
 1963 016a FB68     		ldr	r3, [r7, #12]
 1964 016c 1B68     		ldr	r3, [r3]
 1965 016e 9A68     		ldr	r2, [r3, #8]
 1966 0170 FB68     		ldr	r3, [r7, #12]
 1967 0172 1B68     		ldr	r3, [r3]
 1968 0174 42F4A002 		orr	r2, r2, #5242880
 1969 0178 9A60     		str	r2, [r3, #8]
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1970              		.loc 1 1582 8
 1971 017a 0FE0     		b	.L113
 1972              	.L111:
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with external trigger */
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1973              		.loc 1 1672 9
 1974 017c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 65


 1975 017e 1B68     		ldr	r3, [r3]
 1976 0180 9A68     		ldr	r2, [r3, #8]
 1977 0182 FB68     		ldr	r3, [r7, #12]
 1978 0184 1B68     		ldr	r3, [r3]
 1979 0186 42F48012 		orr	r2, r2, #1048576
 1980 018a 9A60     		str	r2, [r3, #8]
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1981              		.loc 1 1582 8
 1982 018c 06E0     		b	.L113
 1983              	.L103:
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1984              		.loc 1 1678 7
 1985 018e FB68     		ldr	r3, [r7, #12]
 1986 0190 0022     		movs	r2, #0
 1987 0192 83F82420 		strb	r2, [r3, #36]
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1988              		.loc 1 1582 8
 1989 0196 01E0     		b	.L113
 1990              	.L100:
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 1991              		.loc 1 1683 20
 1992 0198 0123     		movs	r3, #1
 1993 019a FB75     		strb	r3, [r7, #23]
 1994              	.L113:
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1995              		.loc 1 1687 10
 1996 019c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1997              	.L102:
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1998              		.loc 1 1688 1
 1999 019e 1846     		mov	r0, r3
 2000 01a0 1837     		adds	r7, r7, #24
 2001              	.LCFI55:
 2002              		.cfi_def_cfa_offset 8
 2003 01a2 BD46     		mov	sp, r7
 2004              	.LCFI56:
 2005              		.cfi_def_cfa_register 13
 2006              		@ sp needed
 2007 01a4 80BD     		pop	{r7, pc}
 2008              	.L115:
 2009 01a6 00BF     		.align	2
 2010              	.L114:
 2011 01a8 00240140 		.word	1073816576
 2012 01ac 00280140 		.word	1073817600
 2013 01b0 00000000 		.word	ADC_DMAConvCplt
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 66


 2014 01b4 00000000 		.word	ADC_DMAHalfConvCplt
 2015 01b8 00000000 		.word	ADC_DMAError
 2016              		.cfi_endproc
 2017              	.LFE75:
 2019              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 2020              		.align	1
 2021              		.global	HAL_ADC_Stop_DMA
 2022              		.syntax unified
 2023              		.thumb
 2024              		.thumb_func
 2025              		.fpu softvfp
 2027              	HAL_ADC_Stop_DMA:
 2028              	.LFB76:
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC peripheral.
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2029              		.loc 1 1705 1
 2030              		.cfi_startproc
 2031              		@ args = 0, pretend = 0, frame = 16
 2032              		@ frame_needed = 1, uses_anonymous_args = 0
 2033 0000 80B5     		push	{r7, lr}
 2034              	.LCFI57:
 2035              		.cfi_def_cfa_offset 8
 2036              		.cfi_offset 7, -8
 2037              		.cfi_offset 14, -4
 2038 0002 84B0     		sub	sp, sp, #16
 2039              	.LCFI58:
 2040              		.cfi_def_cfa_offset 24
 2041 0004 00AF     		add	r7, sp, #0
 2042              	.LCFI59:
 2043              		.cfi_def_cfa_register 7
 2044 0006 7860     		str	r0, [r7, #4]
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2045              		.loc 1 1706 21
 2046 0008 0023     		movs	r3, #0
 2047 000a FB73     		strb	r3, [r7, #15]
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2048              		.loc 1 1712 3
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 67


 2049 000c 7B68     		ldr	r3, [r7, #4]
 2050 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2051 0012 012B     		cmp	r3, #1
 2052 0014 01D1     		bne	.L117
 2053              		.loc 1 1712 3 is_stmt 0 discriminator 1
 2054 0016 0223     		movs	r3, #2
 2055 0018 39E0     		b	.L118
 2056              	.L117:
 2057              		.loc 1 1712 3 discriminator 2
 2058 001a 7B68     		ldr	r3, [r7, #4]
 2059 001c 0122     		movs	r2, #1
 2060 001e 83F82420 		strb	r2, [r3, #36]
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 2061              		.loc 1 1716 20 is_stmt 1 discriminator 2
 2062 0022 7868     		ldr	r0, [r7, #4]
 2063 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2064 0028 0346     		mov	r3, r0
 2065 002a FB73     		strb	r3, [r7, #15]
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 2066              		.loc 1 1719 6 discriminator 2
 2067 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2068 002e 002B     		cmp	r3, #0
 2069 0030 28D1     		bne	.L119
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 2070              		.loc 1 1722 5
 2071 0032 7B68     		ldr	r3, [r7, #4]
 2072 0034 1B68     		ldr	r3, [r3]
 2073 0036 9A68     		ldr	r2, [r3, #8]
 2074 0038 7B68     		ldr	r3, [r7, #4]
 2075 003a 1B68     		ldr	r3, [r3]
 2076 003c 22F48072 		bic	r2, r2, #256
 2077 0040 9A60     		str	r2, [r3, #8]
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 2078              		.loc 1 1726 13
 2079 0042 7B68     		ldr	r3, [r7, #4]
 2080 0044 1B6A     		ldr	r3, [r3, #32]
 2081              		.loc 1 1726 25
 2082 0046 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 2083              		.loc 1 1726 8
 2084 004a 022B     		cmp	r3, #2
 2085 004c 1AD1     		bne	.L119
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 2086              		.loc 1 1728 24
 2087 004e 7B68     		ldr	r3, [r7, #4]
 2088 0050 1B6A     		ldr	r3, [r3, #32]
 2089 0052 1846     		mov	r0, r3
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 68


 2090 0054 FFF7FEFF 		bl	HAL_DMA_Abort
 2091 0058 0346     		mov	r3, r0
 2092 005a FB73     		strb	r3, [r7, #15]
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (tmp_hal_status == HAL_OK)
 2093              		.loc 1 1731 10
 2094 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2095 005e 002B     		cmp	r3, #0
 2096 0060 0AD1     		bne	.L120
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 2097              		.loc 1 1734 9
 2098 0062 7B68     		ldr	r3, [r7, #4]
 2099 0064 9B6A     		ldr	r3, [r3, #40]
 2100 0066 23F48853 		bic	r3, r3, #4352
 2101 006a 23F00103 		bic	r3, r3, #1
 2102 006e 43F00102 		orr	r2, r3, #1
 2103 0072 7B68     		ldr	r3, [r7, #4]
 2104 0074 9A62     		str	r2, [r3, #40]
 2105 0076 05E0     		b	.L119
 2106              	.L120:
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2107              		.loc 1 1741 9
 2108 0078 7B68     		ldr	r3, [r7, #4]
 2109 007a 9B6A     		ldr	r3, [r3, #40]
 2110 007c 43F04002 		orr	r2, r3, #64
 2111 0080 7B68     		ldr	r3, [r7, #4]
 2112 0082 9A62     		str	r2, [r3, #40]
 2113              	.L119:
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2114              		.loc 1 1747 3
 2115 0084 7B68     		ldr	r3, [r7, #4]
 2116 0086 0022     		movs	r2, #0
 2117 0088 83F82420 		strb	r2, [r3, #36]
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2118              		.loc 1 1750 10
 2119 008c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2120              	.L118:
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2121              		.loc 1 1751 1
 2122 008e 1846     		mov	r0, r3
 2123 0090 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 69


 2124              	.LCFI60:
 2125              		.cfi_def_cfa_offset 8
 2126 0092 BD46     		mov	sp, r7
 2127              	.LCFI61:
 2128              		.cfi_def_cfa_register 13
 2129              		@ sp needed
 2130 0094 80BD     		pop	{r7, pc}
 2131              		.cfi_endproc
 2132              	.LFE76:
 2134              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 2135              		.align	1
 2136              		.global	HAL_ADC_GetValue
 2137              		.syntax unified
 2138              		.thumb
 2139              		.thumb_func
 2140              		.fpu softvfp
 2142              	HAL_ADC_GetValue:
 2143              	.LFB77:
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            to flag EOC.
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2144              		.loc 1 1773 1
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 8
 2147              		@ frame_needed = 1, uses_anonymous_args = 0
 2148              		@ link register save eliminated.
 2149 0000 80B4     		push	{r7}
 2150              	.LCFI62:
 2151              		.cfi_def_cfa_offset 4
 2152              		.cfi_offset 7, -4
 2153 0002 83B0     		sub	sp, sp, #12
 2154              	.LCFI63:
 2155              		.cfi_def_cfa_offset 16
 2156 0004 00AF     		add	r7, sp, #0
 2157              	.LCFI64:
 2158              		.cfi_def_cfa_register 7
 2159 0006 7860     		str	r0, [r7, #4]
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 70


1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC converted value */ 
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->Instance->DR;
 2160              		.loc 1 1781 14
 2161 0008 7B68     		ldr	r3, [r7, #4]
 2162 000a 1B68     		ldr	r3, [r3]
 2163              		.loc 1 1781 24
 2164 000c DB6C     		ldr	r3, [r3, #76]
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2165              		.loc 1 1782 1
 2166 000e 1846     		mov	r0, r3
 2167 0010 0C37     		adds	r7, r7, #12
 2168              	.LCFI65:
 2169              		.cfi_def_cfa_offset 4
 2170 0012 BD46     		mov	sp, r7
 2171              	.LCFI66:
 2172              		.cfi_def_cfa_register 13
 2173              		@ sp needed
 2174 0014 80BC     		pop	{r7}
 2175              	.LCFI67:
 2176              		.cfi_restore 7
 2177              		.cfi_def_cfa_offset 0
 2178 0016 7047     		bx	lr
 2179              		.cfi_endproc
 2180              	.LFE77:
 2182              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2183              		.align	1
 2184              		.global	HAL_ADC_IRQHandler
 2185              		.syntax unified
 2186              		.thumb
 2187              		.thumb_func
 2188              		.fpu softvfp
 2190              	HAL_ADC_IRQHandler:
 2191              	.LFB78:
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2192              		.loc 1 1790 1
 2193              		.cfi_startproc
 2194              		@ args = 0, pretend = 0, frame = 8
 2195              		@ frame_needed = 1, uses_anonymous_args = 0
 2196 0000 80B5     		push	{r7, lr}
 2197              	.LCFI68:
 2198              		.cfi_def_cfa_offset 8
 2199              		.cfi_offset 7, -8
 2200              		.cfi_offset 14, -4
 2201 0002 82B0     		sub	sp, sp, #8
 2202              	.LCFI69:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 71


 2203              		.cfi_def_cfa_offset 16
 2204 0004 00AF     		add	r7, sp, #0
 2205              	.LCFI70:
 2206              		.cfi_def_cfa_register 7
 2207 0006 7860     		str	r0, [r7, #4]
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 2208              		.loc 1 1798 6
 2209 0008 7B68     		ldr	r3, [r7, #4]
 2210 000a 1B68     		ldr	r3, [r3]
 2211 000c 5B68     		ldr	r3, [r3, #4]
 2212 000e 03F02003 		and	r3, r3, #32
 2213              		.loc 1 1798 5
 2214 0012 202B     		cmp	r3, #32
 2215 0014 40D1     		bne	.L124
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 2216              		.loc 1 1800 8
 2217 0016 7B68     		ldr	r3, [r7, #4]
 2218 0018 1B68     		ldr	r3, [r3]
 2219 001a 1B68     		ldr	r3, [r3]
 2220 001c 03F00203 		and	r3, r3, #2
 2221              		.loc 1 1800 7
 2222 0020 022B     		cmp	r3, #2
 2223 0022 39D1     		bne	.L124
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2224              		.loc 1 1803 11
 2225 0024 7B68     		ldr	r3, [r7, #4]
 2226 0026 9B6A     		ldr	r3, [r3, #40]
 2227 0028 03F01003 		and	r3, r3, #16
 2228              		.loc 1 1803 10
 2229 002c 002B     		cmp	r3, #0
 2230 002e 05D1     		bne	.L125
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 2231              		.loc 1 1806 9
 2232 0030 7B68     		ldr	r3, [r7, #4]
 2233 0032 9B6A     		ldr	r3, [r3, #40]
 2234 0034 43F40072 		orr	r2, r3, #512
 2235 0038 7B68     		ldr	r3, [r7, #4]
 2236 003a 9A62     		str	r2, [r3, #40]
 2237              	.L125:
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 72


1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 2238              		.loc 1 1814 10
 2239 003c 7B68     		ldr	r3, [r7, #4]
 2240 003e 1B68     		ldr	r3, [r3]
 2241 0040 9B68     		ldr	r3, [r3, #8]
 2242 0042 03F46023 		and	r3, r3, #917504
 2243              		.loc 1 1814 9
 2244 0046 B3F5602F 		cmp	r3, #917504
 2245 004a 1DD1     		bne	.L126
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 2246              		.loc 1 1815 21 discriminator 1
 2247 004c 7B68     		ldr	r3, [r7, #4]
 2248 004e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 2249              		.loc 1 1814 53 discriminator 1
 2250 0050 002B     		cmp	r3, #0
 2251 0052 19D1     		bne	.L126
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group regular */
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 2252              		.loc 1 1818 9
 2253 0054 7B68     		ldr	r3, [r7, #4]
 2254 0056 1B68     		ldr	r3, [r3]
 2255 0058 5A68     		ldr	r2, [r3, #4]
 2256 005a 7B68     		ldr	r3, [r7, #4]
 2257 005c 1B68     		ldr	r3, [r3]
 2258 005e 22F02002 		bic	r2, r2, #32
 2259 0062 5A60     		str	r2, [r3, #4]
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 2260              		.loc 1 1821 9
 2261 0064 7B68     		ldr	r3, [r7, #4]
 2262 0066 9B6A     		ldr	r3, [r3, #40]
 2263 0068 23F48072 		bic	r2, r3, #256
 2264 006c 7B68     		ldr	r3, [r7, #4]
 2265 006e 9A62     		str	r2, [r3, #40]
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 2266              		.loc 1 1823 13
 2267 0070 7B68     		ldr	r3, [r7, #4]
 2268 0072 9B6A     		ldr	r3, [r3, #40]
 2269 0074 03F48053 		and	r3, r3, #4096
 2270              		.loc 1 1823 12
 2271 0078 002B     		cmp	r3, #0
 2272 007a 05D1     		bne	.L126
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2273              		.loc 1 1825 11
 2274 007c 7B68     		ldr	r3, [r7, #4]
 2275 007e 9B6A     		ldr	r3, [r3, #40]
 2276 0080 43F00102 		orr	r2, r3, #1
 2277 0084 7B68     		ldr	r3, [r7, #4]
 2278 0086 9A62     		str	r2, [r3, #40]
 2279              	.L126:
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 73


1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->ConvCpltCallback(hadc);
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
 2280              		.loc 1 1833 7
 2281 0088 7868     		ldr	r0, [r7, #4]
 2282 008a FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag */
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 2283              		.loc 1 1837 7
 2284 008e 7B68     		ldr	r3, [r7, #4]
 2285 0090 1B68     		ldr	r3, [r3]
 2286 0092 6FF01202 		mvn	r2, #18
 2287 0096 1A60     		str	r2, [r3]
 2288              	.L124:
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 2289              		.loc 1 1842 6
 2290 0098 7B68     		ldr	r3, [r7, #4]
 2291 009a 1B68     		ldr	r3, [r3]
 2292 009c 5B68     		ldr	r3, [r3, #4]
 2293 009e 03F08003 		and	r3, r3, #128
 2294              		.loc 1 1842 5
 2295 00a2 802B     		cmp	r3, #128
 2296 00a4 4FD1     		bne	.L127
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 2297              		.loc 1 1844 8
 2298 00a6 7B68     		ldr	r3, [r7, #4]
 2299 00a8 1B68     		ldr	r3, [r3]
 2300 00aa 1B68     		ldr	r3, [r3]
 2301 00ac 03F00403 		and	r3, r3, #4
 2302              		.loc 1 1844 7
 2303 00b0 042B     		cmp	r3, #4
 2304 00b2 48D1     		bne	.L127
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2305              		.loc 1 1847 11
 2306 00b4 7B68     		ldr	r3, [r7, #4]
 2307 00b6 9B6A     		ldr	r3, [r3, #40]
 2308 00b8 03F01003 		and	r3, r3, #16
 2309              		.loc 1 1847 10
 2310 00bc 002B     		cmp	r3, #0
 2311 00be 05D1     		bne	.L128
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 2312              		.loc 1 1850 9
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 74


 2313 00c0 7B68     		ldr	r3, [r7, #4]
 2314 00c2 9B6A     		ldr	r3, [r3, #40]
 2315 00c4 43F40052 		orr	r2, r3, #8192
 2316 00c8 7B68     		ldr	r3, [r7, #4]
 2317 00ca 9A62     		str	r2, [r3, #40]
 2318              	.L128:
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 2319              		.loc 1 1860 10
 2320 00cc 7B68     		ldr	r3, [r7, #4]
 2321 00ce 1B68     		ldr	r3, [r3]
 2322 00d0 9B68     		ldr	r3, [r3, #8]
 2323 00d2 03F4E043 		and	r3, r3, #28672
 2324              		.loc 1 1860 9
 2325 00d6 B3F5E04F 		cmp	r3, #28672
 2326 00da 12D0     		beq	.L129
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2327              		.loc 1 1861 11 discriminator 1
 2328 00dc 7B68     		ldr	r3, [r7, #4]
 2329 00de 1B68     		ldr	r3, [r3]
 2330 00e0 5B68     		ldr	r3, [r3, #4]
 2331 00e2 03F48063 		and	r3, r3, #1024
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2332              		.loc 1 1860 67 discriminator 1
 2333 00e6 002B     		cmp	r3, #0
 2334 00e8 25D1     		bne	.L130
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2335              		.loc 1 1862 11
 2336 00ea 7B68     		ldr	r3, [r7, #4]
 2337 00ec 1B68     		ldr	r3, [r3]
 2338 00ee 9B68     		ldr	r3, [r3, #8]
 2339 00f0 03F46023 		and	r3, r3, #917504
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2340              		.loc 1 1861 62
 2341 00f4 B3F5602F 		cmp	r3, #917504
 2342 00f8 1DD1     		bne	.L130
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 2343              		.loc 1 1863 22
 2344 00fa 7B68     		ldr	r3, [r7, #4]
 2345 00fc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2346              		.loc 1 1862 54
 2347 00fe 002B     		cmp	r3, #0
 2348 0100 19D1     		bne	.L130
 2349              	.L129:
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group injected */
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 2350              		.loc 1 1866 9
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 75


 2351 0102 7B68     		ldr	r3, [r7, #4]
 2352 0104 1B68     		ldr	r3, [r3]
 2353 0106 5A68     		ldr	r2, [r3, #4]
 2354 0108 7B68     		ldr	r3, [r7, #4]
 2355 010a 1B68     		ldr	r3, [r3]
 2356 010c 22F08002 		bic	r2, r2, #128
 2357 0110 5A60     		str	r2, [r3, #4]
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 2358              		.loc 1 1869 9
 2359 0112 7B68     		ldr	r3, [r7, #4]
 2360 0114 9B6A     		ldr	r3, [r3, #40]
 2361 0116 23F48052 		bic	r2, r3, #4096
 2362 011a 7B68     		ldr	r3, [r7, #4]
 2363 011c 9A62     		str	r2, [r3, #40]
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 2364              		.loc 1 1871 13
 2365 011e 7B68     		ldr	r3, [r7, #4]
 2366 0120 9B6A     		ldr	r3, [r3, #40]
 2367 0122 03F48073 		and	r3, r3, #256
 2368              		.loc 1 1871 12
 2369 0126 002B     		cmp	r3, #0
 2370 0128 05D1     		bne	.L130
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2371              		.loc 1 1873 11
 2372 012a 7B68     		ldr	r3, [r7, #4]
 2373 012c 9B6A     		ldr	r3, [r3, #40]
 2374 012e 43F00102 		orr	r2, r3, #1
 2375 0132 7B68     		ldr	r3, [r7, #4]
 2376 0134 9A62     		str	r2, [r3, #40]
 2377              	.L130:
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */ 
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->InjectedConvCpltCallback(hadc);
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
 2378              		.loc 1 1881 7
 2379 0136 7868     		ldr	r0, [r7, #4]
 2380 0138 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 2381              		.loc 1 1885 7
 2382 013c 7B68     		ldr	r3, [r7, #4]
 2383 013e 1B68     		ldr	r3, [r3]
 2384 0140 6FF00C02 		mvn	r2, #12
 2385 0144 1A60     		str	r2, [r3]
 2386              	.L127:
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 76


1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 2387              		.loc 1 1890 6
 2388 0146 7B68     		ldr	r3, [r7, #4]
 2389 0148 1B68     		ldr	r3, [r3]
 2390 014a 5B68     		ldr	r3, [r3, #4]
 2391 014c 03F04003 		and	r3, r3, #64
 2392              		.loc 1 1890 5
 2393 0150 402B     		cmp	r3, #64
 2394 0152 14D1     		bne	.L132
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 2395              		.loc 1 1892 8
 2396 0154 7B68     		ldr	r3, [r7, #4]
 2397 0156 1B68     		ldr	r3, [r3]
 2398 0158 1B68     		ldr	r3, [r3]
 2399 015a 03F00103 		and	r3, r3, #1
 2400              		.loc 1 1892 7
 2401 015e 012B     		cmp	r3, #1
 2402 0160 0DD1     		bne	.L132
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 2403              		.loc 1 1895 7
 2404 0162 7B68     		ldr	r3, [r7, #4]
 2405 0164 9B6A     		ldr	r3, [r3, #40]
 2406 0166 43F48032 		orr	r2, r3, #65536
 2407 016a 7B68     		ldr	r3, [r7, #4]
 2408 016c 9A62     		str	r2, [r3, #40]
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Level out of window callback */ 
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->LevelOutOfWindowCallback(hadc);
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 2409              		.loc 1 1901 7
 2410 016e 7868     		ldr	r0, [r7, #4]
 2411 0170 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 2412              		.loc 1 1905 7
 2413 0174 7B68     		ldr	r3, [r7, #4]
 2414 0176 1B68     		ldr	r3, [r3]
 2415 0178 6FF00102 		mvn	r2, #1
 2416 017c 1A60     		str	r2, [r3]
 2417              	.L132:
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2418              		.loc 1 1909 1
 2419 017e 00BF     		nop
 2420 0180 0837     		adds	r7, r7, #8
 2421              	.LCFI71:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 77


 2422              		.cfi_def_cfa_offset 8
 2423 0182 BD46     		mov	sp, r7
 2424              	.LCFI72:
 2425              		.cfi_def_cfa_register 13
 2426              		@ sp needed
 2427 0184 80BD     		pop	{r7, pc}
 2428              		.cfi_endproc
 2429              	.LFE78:
 2431              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 2432              		.align	1
 2433              		.weak	HAL_ADC_ConvCpltCallback
 2434              		.syntax unified
 2435              		.thumb
 2436              		.thumb_func
 2437              		.fpu softvfp
 2439              	HAL_ADC_ConvCpltCallback:
 2440              	.LFB79:
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2441              		.loc 1 1917 1
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 8
 2444              		@ frame_needed = 1, uses_anonymous_args = 0
 2445              		@ link register save eliminated.
 2446 0000 80B4     		push	{r7}
 2447              	.LCFI73:
 2448              		.cfi_def_cfa_offset 4
 2449              		.cfi_offset 7, -4
 2450 0002 83B0     		sub	sp, sp, #12
 2451              	.LCFI74:
 2452              		.cfi_def_cfa_offset 16
 2453 0004 00AF     		add	r7, sp, #0
 2454              	.LCFI75:
 2455              		.cfi_def_cfa_register 7
 2456 0006 7860     		str	r0, [r7, #4]
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2457              		.loc 1 1923 1
 2458 0008 00BF     		nop
 2459 000a 0C37     		adds	r7, r7, #12
 2460              	.LCFI76:
 2461              		.cfi_def_cfa_offset 4
 2462 000c BD46     		mov	sp, r7
 2463              	.LCFI77:
 2464              		.cfi_def_cfa_register 13
 2465              		@ sp needed
 2466 000e 80BC     		pop	{r7}
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 78


 2467              	.LCFI78:
 2468              		.cfi_restore 7
 2469              		.cfi_def_cfa_offset 0
 2470 0010 7047     		bx	lr
 2471              		.cfi_endproc
 2472              	.LFE79:
 2474              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2475              		.align	1
 2476              		.weak	HAL_ADC_ConvHalfCpltCallback
 2477              		.syntax unified
 2478              		.thumb
 2479              		.thumb_func
 2480              		.fpu softvfp
 2482              	HAL_ADC_ConvHalfCpltCallback:
 2483              	.LFB80:
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2484              		.loc 1 1931 1
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 8
 2487              		@ frame_needed = 1, uses_anonymous_args = 0
 2488              		@ link register save eliminated.
 2489 0000 80B4     		push	{r7}
 2490              	.LCFI79:
 2491              		.cfi_def_cfa_offset 4
 2492              		.cfi_offset 7, -4
 2493 0002 83B0     		sub	sp, sp, #12
 2494              	.LCFI80:
 2495              		.cfi_def_cfa_offset 16
 2496 0004 00AF     		add	r7, sp, #0
 2497              	.LCFI81:
 2498              		.cfi_def_cfa_register 7
 2499 0006 7860     		str	r0, [r7, #4]
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2500              		.loc 1 1937 1
 2501 0008 00BF     		nop
 2502 000a 0C37     		adds	r7, r7, #12
 2503              	.LCFI82:
 2504              		.cfi_def_cfa_offset 4
 2505 000c BD46     		mov	sp, r7
 2506              	.LCFI83:
 2507              		.cfi_def_cfa_register 13
 2508              		@ sp needed
 2509 000e 80BC     		pop	{r7}
 2510              	.LCFI84:
 2511              		.cfi_restore 7
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 79


 2512              		.cfi_def_cfa_offset 0
 2513 0010 7047     		bx	lr
 2514              		.cfi_endproc
 2515              	.LFE80:
 2517              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2518              		.align	1
 2519              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2520              		.syntax unified
 2521              		.thumb
 2522              		.thumb_func
 2523              		.fpu softvfp
 2525              	HAL_ADC_LevelOutOfWindowCallback:
 2526              	.LFB81:
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2527              		.loc 1 1945 1
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 8
 2530              		@ frame_needed = 1, uses_anonymous_args = 0
 2531              		@ link register save eliminated.
 2532 0000 80B4     		push	{r7}
 2533              	.LCFI85:
 2534              		.cfi_def_cfa_offset 4
 2535              		.cfi_offset 7, -4
 2536 0002 83B0     		sub	sp, sp, #12
 2537              	.LCFI86:
 2538              		.cfi_def_cfa_offset 16
 2539 0004 00AF     		add	r7, sp, #0
 2540              	.LCFI87:
 2541              		.cfi_def_cfa_register 7
 2542 0006 7860     		str	r0, [r7, #4]
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2543              		.loc 1 1951 1
 2544 0008 00BF     		nop
 2545 000a 0C37     		adds	r7, r7, #12
 2546              	.LCFI88:
 2547              		.cfi_def_cfa_offset 4
 2548 000c BD46     		mov	sp, r7
 2549              	.LCFI89:
 2550              		.cfi_def_cfa_register 13
 2551              		@ sp needed
 2552 000e 80BC     		pop	{r7}
 2553              	.LCFI90:
 2554              		.cfi_restore 7
 2555              		.cfi_def_cfa_offset 0
 2556 0010 7047     		bx	lr
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 80


 2557              		.cfi_endproc
 2558              	.LFE81:
 2560              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2561              		.align	1
 2562              		.weak	HAL_ADC_ErrorCallback
 2563              		.syntax unified
 2564              		.thumb
 2565              		.thumb_func
 2566              		.fpu softvfp
 2568              	HAL_ADC_ErrorCallback:
 2569              	.LFB82:
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2570              		.loc 1 1960 1
 2571              		.cfi_startproc
 2572              		@ args = 0, pretend = 0, frame = 8
 2573              		@ frame_needed = 1, uses_anonymous_args = 0
 2574              		@ link register save eliminated.
 2575 0000 80B4     		push	{r7}
 2576              	.LCFI91:
 2577              		.cfi_def_cfa_offset 4
 2578              		.cfi_offset 7, -4
 2579 0002 83B0     		sub	sp, sp, #12
 2580              	.LCFI92:
 2581              		.cfi_def_cfa_offset 16
 2582 0004 00AF     		add	r7, sp, #0
 2583              	.LCFI93:
 2584              		.cfi_def_cfa_register 7
 2585 0006 7860     		str	r0, [r7, #4]
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2586              		.loc 1 1966 1
 2587 0008 00BF     		nop
 2588 000a 0C37     		adds	r7, r7, #12
 2589              	.LCFI94:
 2590              		.cfi_def_cfa_offset 4
 2591 000c BD46     		mov	sp, r7
 2592              	.LCFI95:
 2593              		.cfi_def_cfa_register 13
 2594              		@ sp needed
 2595 000e 80BC     		pop	{r7}
 2596              	.LCFI96:
 2597              		.cfi_restore 7
 2598              		.cfi_def_cfa_offset 0
 2599 0010 7047     		bx	lr
 2600              		.cfi_endproc
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 81


 2601              	.LFE82:
 2603              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2604              		.align	1
 2605              		.global	HAL_ADC_ConfigChannel
 2606              		.syntax unified
 2607              		.thumb
 2608              		.thumb_func
 2609              		.fpu softvfp
 2611              	HAL_ADC_ConfigChannel:
 2612              	.LFB83:
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral Control functions
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure channels on regular group
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure the analog watchdog
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         group.
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the ADC.
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** { 
 2613              		.loc 1 2008 1
 2614              		.cfi_startproc
 2615              		@ args = 0, pretend = 0, frame = 16
 2616              		@ frame_needed = 1, uses_anonymous_args = 0
 2617              		@ link register save eliminated.
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 82


 2618 0000 80B4     		push	{r7}
 2619              	.LCFI97:
 2620              		.cfi_def_cfa_offset 4
 2621              		.cfi_offset 7, -4
 2622 0002 85B0     		sub	sp, sp, #20
 2623              	.LCFI98:
 2624              		.cfi_def_cfa_offset 24
 2625 0004 00AF     		add	r7, sp, #0
 2626              	.LCFI99:
 2627              		.cfi_def_cfa_register 7
 2628 0006 7860     		str	r0, [r7, #4]
 2629 0008 3960     		str	r1, [r7]
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2630              		.loc 1 2009 21
 2631 000a 0023     		movs	r3, #0
 2632 000c FB73     		strb	r3, [r7, #15]
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2633              		.loc 1 2010 17
 2634 000e 0023     		movs	r3, #0
 2635 0010 BB60     		str	r3, [r7, #8]
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2636              		.loc 1 2019 3
 2637 0012 7B68     		ldr	r3, [r7, #4]
 2638 0014 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2639 0018 012B     		cmp	r3, #1
 2640 001a 01D1     		bne	.L138
 2641              		.loc 1 2019 3 is_stmt 0 discriminator 1
 2642 001c 0223     		movs	r3, #2
 2643 001e DCE0     		b	.L139
 2644              	.L138:
 2645              		.loc 1 2019 3 discriminator 2
 2646 0020 7B68     		ldr	r3, [r7, #4]
 2647 0022 0122     		movs	r2, #1
 2648 0024 83F82420 		strb	r2, [r3, #36]
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Regular sequence configuration */
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 1 to 6 */
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Rank < 7U)
 2649              		.loc 1 2024 14 is_stmt 1 discriminator 2
 2650 0028 3B68     		ldr	r3, [r7]
 2651 002a 5B68     		ldr	r3, [r3, #4]
 2652              		.loc 1 2024 6 discriminator 2
 2653 002c 062B     		cmp	r3, #6
 2654 002e 1CD8     		bhi	.L140
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
 2655              		.loc 1 2026 5
 2656 0030 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 83


 2657 0032 1B68     		ldr	r3, [r3]
 2658 0034 596B     		ldr	r1, [r3, #52]
 2659 0036 3B68     		ldr	r3, [r7]
 2660 0038 5A68     		ldr	r2, [r3, #4]
 2661 003a 1346     		mov	r3, r2
 2662 003c 9B00     		lsls	r3, r3, #2
 2663 003e 1344     		add	r3, r3, r2
 2664 0040 053B     		subs	r3, r3, #5
 2665 0042 1F22     		movs	r2, #31
 2666 0044 02FA03F3 		lsl	r3, r2, r3
 2667 0048 DB43     		mvns	r3, r3
 2668 004a 1940     		ands	r1, r1, r3
 2669 004c 3B68     		ldr	r3, [r7]
 2670 004e 1868     		ldr	r0, [r3]
 2671 0050 3B68     		ldr	r3, [r7]
 2672 0052 5A68     		ldr	r2, [r3, #4]
 2673 0054 1346     		mov	r3, r2
 2674 0056 9B00     		lsls	r3, r3, #2
 2675 0058 1344     		add	r3, r3, r2
 2676 005a 053B     		subs	r3, r3, #5
 2677 005c 00FA03F2 		lsl	r2, r0, r3
 2678 0060 7B68     		ldr	r3, [r7, #4]
 2679 0062 1B68     		ldr	r3, [r3]
 2680 0064 0A43     		orrs	r2, r2, r1
 2681 0066 5A63     		str	r2, [r3, #52]
 2682 0068 3CE0     		b	.L141
 2683              	.L140:
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 7 to 12 */
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (sConfig->Rank < 13U)
 2684              		.loc 1 2031 19
 2685 006a 3B68     		ldr	r3, [r7]
 2686 006c 5B68     		ldr	r3, [r3, #4]
 2687              		.loc 1 2031 11
 2688 006e 0C2B     		cmp	r3, #12
 2689 0070 1CD8     		bhi	.L142
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
 2690              		.loc 1 2033 5
 2691 0072 7B68     		ldr	r3, [r7, #4]
 2692 0074 1B68     		ldr	r3, [r3]
 2693 0076 196B     		ldr	r1, [r3, #48]
 2694 0078 3B68     		ldr	r3, [r7]
 2695 007a 5A68     		ldr	r2, [r3, #4]
 2696 007c 1346     		mov	r3, r2
 2697 007e 9B00     		lsls	r3, r3, #2
 2698 0080 1344     		add	r3, r3, r2
 2699 0082 233B     		subs	r3, r3, #35
 2700 0084 1F22     		movs	r2, #31
 2701 0086 02FA03F3 		lsl	r3, r2, r3
 2702 008a DB43     		mvns	r3, r3
 2703 008c 1940     		ands	r1, r1, r3
 2704 008e 3B68     		ldr	r3, [r7]
 2705 0090 1868     		ldr	r0, [r3]
 2706 0092 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 84


 2707 0094 5A68     		ldr	r2, [r3, #4]
 2708 0096 1346     		mov	r3, r2
 2709 0098 9B00     		lsls	r3, r3, #2
 2710 009a 1344     		add	r3, r3, r2
 2711 009c 233B     		subs	r3, r3, #35
 2712 009e 00FA03F2 		lsl	r2, r0, r3
 2713 00a2 7B68     		ldr	r3, [r7, #4]
 2714 00a4 1B68     		ldr	r3, [r3]
 2715 00a6 0A43     		orrs	r2, r2, r1
 2716 00a8 1A63     		str	r2, [r3, #48]
 2717 00aa 1BE0     		b	.L141
 2718              	.L142:
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 13 to 16 */
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
 2719              		.loc 1 2040 5
 2720 00ac 7B68     		ldr	r3, [r7, #4]
 2721 00ae 1B68     		ldr	r3, [r3]
 2722 00b0 D96A     		ldr	r1, [r3, #44]
 2723 00b2 3B68     		ldr	r3, [r7]
 2724 00b4 5A68     		ldr	r2, [r3, #4]
 2725 00b6 1346     		mov	r3, r2
 2726 00b8 9B00     		lsls	r3, r3, #2
 2727 00ba 1344     		add	r3, r3, r2
 2728 00bc 413B     		subs	r3, r3, #65
 2729 00be 1F22     		movs	r2, #31
 2730 00c0 02FA03F3 		lsl	r3, r2, r3
 2731 00c4 DB43     		mvns	r3, r3
 2732 00c6 1940     		ands	r1, r1, r3
 2733 00c8 3B68     		ldr	r3, [r7]
 2734 00ca 1868     		ldr	r0, [r3]
 2735 00cc 3B68     		ldr	r3, [r7]
 2736 00ce 5A68     		ldr	r2, [r3, #4]
 2737 00d0 1346     		mov	r3, r2
 2738 00d2 9B00     		lsls	r3, r3, #2
 2739 00d4 1344     		add	r3, r3, r2
 2740 00d6 413B     		subs	r3, r3, #65
 2741 00d8 00FA03F2 		lsl	r2, r0, r3
 2742 00dc 7B68     		ldr	r3, [r7, #4]
 2743 00de 1B68     		ldr	r3, [r3]
 2744 00e0 0A43     		orrs	r2, r2, r1
 2745 00e2 DA62     		str	r2, [r3, #44]
 2746              	.L141:
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Channel sampling time configuration */
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For channels 10 to 17 */
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Channel >= ADC_CHANNEL_10)
 2747              		.loc 1 2048 14
 2748 00e4 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 85


 2749 00e6 1B68     		ldr	r3, [r3]
 2750              		.loc 1 2048 6
 2751 00e8 092B     		cmp	r3, #9
 2752 00ea 1CD9     		bls	.L143
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
 2753              		.loc 1 2050 5
 2754 00ec 7B68     		ldr	r3, [r7, #4]
 2755 00ee 1B68     		ldr	r3, [r3]
 2756 00f0 D968     		ldr	r1, [r3, #12]
 2757 00f2 3B68     		ldr	r3, [r7]
 2758 00f4 1A68     		ldr	r2, [r3]
 2759 00f6 1346     		mov	r3, r2
 2760 00f8 5B00     		lsls	r3, r3, #1
 2761 00fa 1344     		add	r3, r3, r2
 2762 00fc 1E3B     		subs	r3, r3, #30
 2763 00fe 0722     		movs	r2, #7
 2764 0100 02FA03F3 		lsl	r3, r2, r3
 2765 0104 DB43     		mvns	r3, r3
 2766 0106 1940     		ands	r1, r1, r3
 2767 0108 3B68     		ldr	r3, [r7]
 2768 010a 9868     		ldr	r0, [r3, #8]
 2769 010c 3B68     		ldr	r3, [r7]
 2770 010e 1A68     		ldr	r2, [r3]
 2771 0110 1346     		mov	r3, r2
 2772 0112 5B00     		lsls	r3, r3, #1
 2773 0114 1344     		add	r3, r3, r2
 2774 0116 1E3B     		subs	r3, r3, #30
 2775 0118 00FA03F2 		lsl	r2, r0, r3
 2776 011c 7B68     		ldr	r3, [r7, #4]
 2777 011e 1B68     		ldr	r3, [r3]
 2778 0120 0A43     		orrs	r2, r2, r1
 2779 0122 DA60     		str	r2, [r3, #12]
 2780 0124 19E0     		b	.L144
 2781              	.L143:
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else /* For channels 0 to 9 */
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
 2782              		.loc 1 2056 5
 2783 0126 7B68     		ldr	r3, [r7, #4]
 2784 0128 1B68     		ldr	r3, [r3]
 2785 012a 1969     		ldr	r1, [r3, #16]
 2786 012c 3B68     		ldr	r3, [r7]
 2787 012e 1A68     		ldr	r2, [r3]
 2788 0130 1346     		mov	r3, r2
 2789 0132 5B00     		lsls	r3, r3, #1
 2790 0134 1344     		add	r3, r3, r2
 2791 0136 0722     		movs	r2, #7
 2792 0138 02FA03F3 		lsl	r3, r2, r3
 2793 013c DB43     		mvns	r3, r3
 2794 013e 1940     		ands	r1, r1, r3
 2795 0140 3B68     		ldr	r3, [r7]
 2796 0142 9868     		ldr	r0, [r3, #8]
 2797 0144 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 86


 2798 0146 1A68     		ldr	r2, [r3]
 2799 0148 1346     		mov	r3, r2
 2800 014a 5B00     		lsls	r3, r3, #1
 2801 014c 1344     		add	r3, r3, r2
 2802 014e 00FA03F2 		lsl	r2, r0, r3
 2803 0152 7B68     		ldr	r3, [r7, #4]
 2804 0154 1B68     		ldr	r3, [r3]
 2805 0156 0A43     		orrs	r2, r2, r1
 2806 0158 1A61     		str	r2, [r3, #16]
 2807              	.L144:
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 2808              		.loc 1 2063 15
 2809 015a 3B68     		ldr	r3, [r7]
 2810 015c 1B68     		ldr	r3, [r3]
 2811              		.loc 1 2063 6
 2812 015e 102B     		cmp	r3, #16
 2813 0160 03D0     		beq	.L145
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2814              		.loc 1 2064 15 discriminator 1
 2815 0162 3B68     		ldr	r3, [r7]
 2816 0164 1B68     		ldr	r3, [r3]
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2817              		.loc 1 2063 52 discriminator 1
 2818 0166 112B     		cmp	r3, #17
 2819 0168 32D1     		bne	.L146
 2820              	.L145:
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* intended to be set on other ADC instances, an error is reported.       */
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Instance == ADC1)
 2821              		.loc 1 2069 13
 2822 016a 7B68     		ldr	r3, [r7, #4]
 2823 016c 1B68     		ldr	r3, [r3]
 2824              		.loc 1 2069 8
 2825 016e 1D4A     		ldr	r2, .L150
 2826 0170 9342     		cmp	r3, r2
 2827 0172 25D1     		bne	.L147
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 2828              		.loc 1 2071 11
 2829 0174 7B68     		ldr	r3, [r7, #4]
 2830 0176 1B68     		ldr	r3, [r3]
 2831 0178 9B68     		ldr	r3, [r3, #8]
 2832 017a 03F40003 		and	r3, r3, #8388608
 2833              		.loc 1 2071 10
 2834 017e 002B     		cmp	r3, #0
 2835 0180 26D1     		bne	.L146
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 2836              		.loc 1 2073 9
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 87


 2837 0182 7B68     		ldr	r3, [r7, #4]
 2838 0184 1B68     		ldr	r3, [r3]
 2839 0186 9A68     		ldr	r2, [r3, #8]
 2840 0188 7B68     		ldr	r3, [r7, #4]
 2841 018a 1B68     		ldr	r3, [r3]
 2842 018c 42F40002 		orr	r2, r2, #8388608
 2843 0190 9A60     		str	r2, [r3, #8]
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 2844              		.loc 1 2075 20
 2845 0192 3B68     		ldr	r3, [r7]
 2846 0194 1B68     		ldr	r3, [r3]
 2847              		.loc 1 2075 12
 2848 0196 102B     		cmp	r3, #16
 2849 0198 1AD1     		bne	.L146
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 2850              		.loc 1 2079 73
 2851 019a 134B     		ldr	r3, .L150+4
 2852 019c 1B68     		ldr	r3, [r3]
 2853 019e 134A     		ldr	r2, .L150+8
 2854 01a0 A2FB0323 		umull	r2, r3, r2, r3
 2855 01a4 9A0C     		lsrs	r2, r3, #18
 2856              		.loc 1 2079 54
 2857 01a6 1346     		mov	r3, r2
 2858 01a8 9B00     		lsls	r3, r3, #2
 2859 01aa 1344     		add	r3, r3, r2
 2860 01ac 5B00     		lsls	r3, r3, #1
 2861              		.loc 1 2079 27
 2862 01ae BB60     		str	r3, [r7, #8]
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2863              		.loc 1 2080 16
 2864 01b0 02E0     		b	.L148
 2865              	.L149:
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             wait_loop_index--;
 2866              		.loc 1 2082 28
 2867 01b2 BB68     		ldr	r3, [r7, #8]
 2868 01b4 013B     		subs	r3, r3, #1
 2869 01b6 BB60     		str	r3, [r7, #8]
 2870              	.L148:
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2871              		.loc 1 2080 33
 2872 01b8 BB68     		ldr	r3, [r7, #8]
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2873              		.loc 1 2080 16
 2874 01ba 002B     		cmp	r3, #0
 2875 01bc F9D1     		bne	.L149
 2876 01be 07E0     		b	.L146
 2877              	.L147:
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 88


2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2878              		.loc 1 2090 7
 2879 01c0 7B68     		ldr	r3, [r7, #4]
 2880 01c2 9B6A     		ldr	r3, [r3, #40]
 2881 01c4 43F02002 		orr	r2, r3, #32
 2882 01c8 7B68     		ldr	r3, [r7, #4]
 2883 01ca 9A62     		str	r2, [r3, #40]
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 2884              		.loc 1 2092 22
 2885 01cc 0123     		movs	r3, #1
 2886 01ce FB73     		strb	r3, [r7, #15]
 2887              	.L146:
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2888              		.loc 1 2097 3
 2889 01d0 7B68     		ldr	r3, [r7, #4]
 2890 01d2 0022     		movs	r2, #0
 2891 01d4 83F82420 		strb	r2, [r3, #36]
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2892              		.loc 1 2100 10
 2893 01d8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2894              	.L139:
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2895              		.loc 1 2101 1
 2896 01da 1846     		mov	r0, r3
 2897 01dc 1437     		adds	r7, r7, #20
 2898              	.LCFI100:
 2899              		.cfi_def_cfa_offset 4
 2900 01de BD46     		mov	sp, r7
 2901              	.LCFI101:
 2902              		.cfi_def_cfa_register 13
 2903              		@ sp needed
 2904 01e0 80BC     		pop	{r7}
 2905              	.LCFI102:
 2906              		.cfi_restore 7
 2907              		.cfi_def_cfa_offset 0
 2908 01e2 7047     		bx	lr
 2909              	.L151:
 2910              		.align	2
 2911              	.L150:
 2912 01e4 00240140 		.word	1073816576
 2913 01e8 00000000 		.word	SystemCoreClock
 2914 01ec 83DE1B43 		.word	1125899907
 2915              		.cfi_endproc
 2916              	.LFE83:
 2918              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2919              		.align	1
 2920              		.global	HAL_ADC_AnalogWDGConfig
 2921              		.syntax unified
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 89


 2922              		.thumb
 2923              		.thumb_func
 2924              		.fpu softvfp
 2926              	HAL_ADC_AnalogWDGConfig:
 2927              	.LFB84:
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         is on going.
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2928              		.loc 1 2118 1
 2929              		.cfi_startproc
 2930              		@ args = 0, pretend = 0, frame = 8
 2931              		@ frame_needed = 1, uses_anonymous_args = 0
 2932              		@ link register save eliminated.
 2933 0000 80B4     		push	{r7}
 2934              	.LCFI103:
 2935              		.cfi_def_cfa_offset 4
 2936              		.cfi_offset 7, -4
 2937 0002 83B0     		sub	sp, sp, #12
 2938              	.LCFI104:
 2939              		.cfi_def_cfa_offset 16
 2940 0004 00AF     		add	r7, sp, #0
 2941              	.LCFI105:
 2942              		.cfi_def_cfa_register 7
 2943 0006 7860     		str	r0, [r7, #4]
 2944 0008 3960     		str	r1, [r7]
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 2945              		.loc 1 2126 22
 2946 000a 3B68     		ldr	r3, [r7]
 2947 000c 1B68     		ldr	r3, [r3]
 2948              		.loc 1 2126 5
 2949 000e 244A     		ldr	r2, .L158
 2950 0010 9342     		cmp	r3, r2
 2951 0012 03D0     		beq	.L153
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2952              		.loc 1 2127 22 discriminator 1
 2953 0014 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 90


 2954 0016 1B68     		ldr	r3, [r3]
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2955              		.loc 1 2126 75 discriminator 1
 2956 0018 224A     		ldr	r2, .L158+4
 2957 001a 9342     		cmp	r3, r2
 2958              	.L153:
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2959              		.loc 1 2134 3
 2960 001c 7B68     		ldr	r3, [r7, #4]
 2961 001e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2962 0022 012B     		cmp	r3, #1
 2963 0024 01D1     		bne	.L154
 2964              		.loc 1 2134 3 is_stmt 0 discriminator 1
 2965 0026 0223     		movs	r3, #2
 2966 0028 35E0     		b	.L155
 2967              	.L154:
 2968              		.loc 1 2134 3 discriminator 2
 2969 002a 7B68     		ldr	r3, [r7, #4]
 2970 002c 0122     		movs	r2, #1
 2971 002e 83F82420 		strb	r2, [r3, #36]
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog configuration */
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
 2972              		.loc 1 2139 21 is_stmt 1 discriminator 2
 2973 0032 3B68     		ldr	r3, [r7]
 2974 0034 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2975              		.loc 1 2139 5 discriminator 2
 2976 0036 012B     		cmp	r3, #1
 2977 0038 08D1     		bne	.L156
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 2978              		.loc 1 2142 5
 2979 003a 7B68     		ldr	r3, [r7, #4]
 2980 003c 1B68     		ldr	r3, [r3]
 2981 003e 5A68     		ldr	r2, [r3, #4]
 2982 0040 7B68     		ldr	r3, [r7, #4]
 2983 0042 1B68     		ldr	r3, [r3]
 2984 0044 42F04002 		orr	r2, r2, #64
 2985 0048 5A60     		str	r2, [r3, #4]
 2986 004a 07E0     		b	.L157
 2987              	.L156:
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 2988              		.loc 1 2147 5
 2989 004c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 91


 2990 004e 1B68     		ldr	r3, [r3]
 2991 0050 5A68     		ldr	r2, [r3, #4]
 2992 0052 7B68     		ldr	r3, [r7, #4]
 2993 0054 1B68     		ldr	r3, [r3]
 2994 0056 22F04002 		bic	r2, r2, #64
 2995 005a 5A60     		str	r2, [r3, #4]
 2996              	.L157:
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    one or all channels.                                                  */
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   MODIFY_REG(hadc->Instance->CR1            ,
 2997              		.loc 1 2155 3
 2998 005c 7B68     		ldr	r3, [r7, #4]
 2999 005e 1B68     		ldr	r3, [r3]
 3000 0060 5A68     		ldr	r2, [r3, #4]
 3001 0062 114B     		ldr	r3, .L158+8
 3002 0064 1340     		ands	r3, r3, r2
 3003 0066 3A68     		ldr	r2, [r7]
 3004 0068 1168     		ldr	r1, [r2]
 3005 006a 3A68     		ldr	r2, [r7]
 3006 006c 5268     		ldr	r2, [r2, #4]
 3007 006e 1143     		orrs	r1, r1, r2
 3008 0070 7A68     		ldr	r2, [r7, #4]
 3009 0072 1268     		ldr	r2, [r2]
 3010 0074 0B43     		orrs	r3, r3, r1
 3011 0076 5360     		str	r3, [r2, #4]
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_JAWDEN |
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDEN  |
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDCH                  ,
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->WatchdogMode |
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->Channel        );
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the high threshold */
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 3012              		.loc 1 2164 3
 3013 0078 7B68     		ldr	r3, [r7, #4]
 3014 007a 1B68     		ldr	r3, [r3]
 3015 007c 3A68     		ldr	r2, [r7]
 3016 007e D268     		ldr	r2, [r2, #12]
 3017 0080 5A62     		str	r2, [r3, #36]
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the low threshold */
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 3018              		.loc 1 2167 3
 3019 0082 7B68     		ldr	r3, [r7, #4]
 3020 0084 1B68     		ldr	r3, [r3]
 3021 0086 3A68     		ldr	r2, [r7]
 3022 0088 1269     		ldr	r2, [r2, #16]
 3023 008a 9A62     		str	r2, [r3, #40]
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 92


 3024              		.loc 1 2170 3
 3025 008c 7B68     		ldr	r3, [r7, #4]
 3026 008e 0022     		movs	r2, #0
 3027 0090 83F82420 		strb	r2, [r3, #36]
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3028              		.loc 1 2173 10
 3029 0094 0023     		movs	r3, #0
 3030              	.L155:
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3031              		.loc 1 2174 1
 3032 0096 1846     		mov	r0, r3
 3033 0098 0C37     		adds	r7, r7, #12
 3034              	.LCFI106:
 3035              		.cfi_def_cfa_offset 4
 3036 009a BD46     		mov	sp, r7
 3037              	.LCFI107:
 3038              		.cfi_def_cfa_register 13
 3039              		@ sp needed
 3040 009c 80BC     		pop	{r7}
 3041              	.LCFI108:
 3042              		.cfi_restore 7
 3043              		.cfi_def_cfa_offset 0
 3044 009e 7047     		bx	lr
 3045              	.L159:
 3046              		.align	2
 3047              	.L158:
 3048 00a0 00028000 		.word	8389120
 3049 00a4 00024000 		.word	4194816
 3050 00a8 E0FD3FFF 		.word	-12583456
 3051              		.cfi_endproc
 3052              	.LFE84:
 3054              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 3055              		.align	1
 3056              		.global	HAL_ADC_GetState
 3057              		.syntax unified
 3058              		.thumb
 3059              		.thumb_func
 3060              		.fpu softvfp
 3062              	HAL_ADC_GetState:
 3063              	.LFB85:
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral State functions
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 93


2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     peripheral.
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC state
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC error code
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  return the ADC state
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL state
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3064              		.loc 1 2205 1
 3065              		.cfi_startproc
 3066              		@ args = 0, pretend = 0, frame = 8
 3067              		@ frame_needed = 1, uses_anonymous_args = 0
 3068              		@ link register save eliminated.
 3069 0000 80B4     		push	{r7}
 3070              	.LCFI109:
 3071              		.cfi_def_cfa_offset 4
 3072              		.cfi_offset 7, -4
 3073 0002 83B0     		sub	sp, sp, #12
 3074              	.LCFI110:
 3075              		.cfi_def_cfa_offset 16
 3076 0004 00AF     		add	r7, sp, #0
 3077              	.LCFI111:
 3078              		.cfi_def_cfa_register 7
 3079 0006 7860     		str	r0, [r7, #4]
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->State;
 3080              		.loc 1 2207 14
 3081 0008 7B68     		ldr	r3, [r7, #4]
 3082 000a 9B6A     		ldr	r3, [r3, #40]
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3083              		.loc 1 2208 1
 3084 000c 1846     		mov	r0, r3
 3085 000e 0C37     		adds	r7, r7, #12
 3086              	.LCFI112:
 3087              		.cfi_def_cfa_offset 4
 3088 0010 BD46     		mov	sp, r7
 3089              	.LCFI113:
 3090              		.cfi_def_cfa_register 13
 3091              		@ sp needed
 3092 0012 80BC     		pop	{r7}
 3093              	.LCFI114:
 3094              		.cfi_restore 7
 3095              		.cfi_def_cfa_offset 0
 3096 0014 7047     		bx	lr
 3097              		.cfi_endproc
 3098              	.LFE85:
 3100              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 3101              		.align	1
 3102              		.global	HAL_ADC_GetError
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 94


 3103              		.syntax unified
 3104              		.thumb
 3105              		.thumb_func
 3106              		.fpu softvfp
 3108              	HAL_ADC_GetError:
 3109              	.LFB86:
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Return the ADC error code
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC Error Code
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3110              		.loc 1 2216 1
 3111              		.cfi_startproc
 3112              		@ args = 0, pretend = 0, frame = 8
 3113              		@ frame_needed = 1, uses_anonymous_args = 0
 3114              		@ link register save eliminated.
 3115 0000 80B4     		push	{r7}
 3116              	.LCFI115:
 3117              		.cfi_def_cfa_offset 4
 3118              		.cfi_offset 7, -4
 3119 0002 83B0     		sub	sp, sp, #12
 3120              	.LCFI116:
 3121              		.cfi_def_cfa_offset 16
 3122 0004 00AF     		add	r7, sp, #0
 3123              	.LCFI117:
 3124              		.cfi_def_cfa_register 7
 3125 0006 7860     		str	r0, [r7, #4]
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
 3126              		.loc 1 2217 14
 3127 0008 7B68     		ldr	r3, [r7, #4]
 3128 000a DB6A     		ldr	r3, [r3, #44]
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3129              		.loc 1 2218 1
 3130 000c 1846     		mov	r0, r3
 3131 000e 0C37     		adds	r7, r7, #12
 3132              	.LCFI118:
 3133              		.cfi_def_cfa_offset 4
 3134 0010 BD46     		mov	sp, r7
 3135              	.LCFI119:
 3136              		.cfi_def_cfa_register 13
 3137              		@ sp needed
 3138 0012 80BC     		pop	{r7}
 3139              	.LCFI120:
 3140              		.cfi_restore 7
 3141              		.cfi_def_cfa_offset 0
 3142 0014 7047     		bx	lr
 3143              		.cfi_endproc
 3144              	.LFE86:
 3146              		.section	.text.ADC_Enable,"ax",%progbits
 3147              		.align	1
 3148              		.global	ADC_Enable
 3149              		.syntax unified
 3150              		.thumb
 3151              		.thumb_func
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 95


 3152              		.fpu softvfp
 3154              	ADC_Enable:
 3155              	.LFB87:
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3156              		.loc 1 2240 1
 3157              		.cfi_startproc
 3158              		@ args = 0, pretend = 0, frame = 16
 3159              		@ frame_needed = 1, uses_anonymous_args = 0
 3160 0000 80B5     		push	{r7, lr}
 3161              	.LCFI121:
 3162              		.cfi_def_cfa_offset 8
 3163              		.cfi_offset 7, -8
 3164              		.cfi_offset 14, -4
 3165 0002 84B0     		sub	sp, sp, #16
 3166              	.LCFI122:
 3167              		.cfi_def_cfa_offset 24
 3168 0004 00AF     		add	r7, sp, #0
 3169              	.LCFI123:
 3170              		.cfi_def_cfa_register 7
 3171 0006 7860     		str	r0, [r7, #4]
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3172              		.loc 1 2241 12
 3173 0008 0023     		movs	r3, #0
 3174 000a FB60     		str	r3, [r7, #12]
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 3175              		.loc 1 2242 17
 3176 000c 0023     		movs	r3, #0
 3177 000e BB60     		str	r3, [r7, #8]
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 3178              		.loc 1 2248 7
 3179 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 96


 3180 0012 1B68     		ldr	r3, [r3]
 3181 0014 9B68     		ldr	r3, [r3, #8]
 3182 0016 03F00103 		and	r3, r3, #1
 3183              		.loc 1 2248 6
 3184 001a 012B     		cmp	r3, #1
 3185 001c 40D0     		beq	.L165
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the Peripheral */
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 3186              		.loc 1 2251 5
 3187 001e 7B68     		ldr	r3, [r7, #4]
 3188 0020 1B68     		ldr	r3, [r3]
 3189 0022 9A68     		ldr	r2, [r3, #8]
 3190 0024 7B68     		ldr	r3, [r7, #4]
 3191 0026 1B68     		ldr	r3, [r3]
 3192 0028 42F00102 		orr	r2, r2, #1
 3193 002c 9A60     		str	r2, [r3, #8]
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 3194              		.loc 1 2255 42
 3195 002e 1F4B     		ldr	r3, .L171
 3196 0030 1B68     		ldr	r3, [r3]
 3197 0032 1F4A     		ldr	r2, .L171+4
 3198 0034 A2FB0323 		umull	r2, r3, r2, r3
 3199 0038 9B0C     		lsrs	r3, r3, #18
 3200              		.loc 1 2255 21
 3201 003a BB60     		str	r3, [r7, #8]
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3202              		.loc 1 2256 10
 3203 003c 02E0     		b	.L166
 3204              	.L167:
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       wait_loop_index--;
 3205              		.loc 1 2258 22
 3206 003e BB68     		ldr	r3, [r7, #8]
 3207 0040 013B     		subs	r3, r3, #1
 3208 0042 BB60     		str	r3, [r7, #8]
 3209              	.L166:
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3210              		.loc 1 2256 27
 3211 0044 BB68     		ldr	r3, [r7, #8]
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3212              		.loc 1 2256 10
 3213 0046 002B     		cmp	r3, #0
 3214 0048 F9D1     		bne	.L167
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3215              		.loc 1 2262 17
 3216 004a FFF7FEFF 		bl	HAL_GetTick
 3217 004e F860     		str	r0, [r7, #12]
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 97


 3218              		.loc 1 2265 10
 3219 0050 1FE0     		b	.L168
 3220              	.L170:
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 3221              		.loc 1 2267 11
 3222 0052 FFF7FEFF 		bl	HAL_GetTick
 3223 0056 0246     		mov	r2, r0
 3224              		.loc 1 2267 25
 3225 0058 FB68     		ldr	r3, [r7, #12]
 3226 005a D31A     		subs	r3, r2, r3
 3227              		.loc 1 2267 9
 3228 005c 022B     		cmp	r3, #2
 3229 005e 18D9     		bls	.L168
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if(ADC_IS_ENABLE(hadc) == RESET)
 3230              		.loc 1 2270 12
 3231 0060 7B68     		ldr	r3, [r7, #4]
 3232 0062 1B68     		ldr	r3, [r3]
 3233 0064 9B68     		ldr	r3, [r3, #8]
 3234 0066 03F00103 		and	r3, r3, #1
 3235              		.loc 1 2270 11
 3236 006a 012B     		cmp	r3, #1
 3237 006c 11D0     		beq	.L168
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to error */
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3238              		.loc 1 2273 11
 3239 006e 7B68     		ldr	r3, [r7, #4]
 3240 0070 9B6A     		ldr	r3, [r3, #40]
 3241 0072 43F01002 		orr	r2, r3, #16
 3242 0076 7B68     		ldr	r3, [r7, #4]
 3243 0078 9A62     		str	r2, [r3, #40]
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3244              		.loc 1 2276 11
 3245 007a 7B68     		ldr	r3, [r7, #4]
 3246 007c DB6A     		ldr	r3, [r3, #44]
 3247 007e 43F00102 		orr	r2, r3, #1
 3248 0082 7B68     		ldr	r3, [r7, #4]
 3249 0084 DA62     		str	r2, [r3, #44]
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 3250              		.loc 1 2279 11
 3251 0086 7B68     		ldr	r3, [r7, #4]
 3252 0088 0022     		movs	r2, #0
 3253 008a 83F82420 		strb	r2, [r3, #36]
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_ERROR;
 3254              		.loc 1 2281 18
 3255 008e 0123     		movs	r3, #1
 3256 0090 07E0     		b	.L169
 3257              	.L168:
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 98


 3258              		.loc 1 2265 11
 3259 0092 7B68     		ldr	r3, [r7, #4]
 3260 0094 1B68     		ldr	r3, [r3]
 3261 0096 9B68     		ldr	r3, [r3, #8]
 3262 0098 03F00103 		and	r3, r3, #1
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3263              		.loc 1 2265 10
 3264 009c 012B     		cmp	r3, #1
 3265 009e D8D1     		bne	.L170
 3266              	.L165:
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3267              		.loc 1 2288 10
 3268 00a0 0023     		movs	r3, #0
 3269              	.L169:
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3270              		.loc 1 2289 1
 3271 00a2 1846     		mov	r0, r3
 3272 00a4 1037     		adds	r7, r7, #16
 3273              	.LCFI124:
 3274              		.cfi_def_cfa_offset 8
 3275 00a6 BD46     		mov	sp, r7
 3276              	.LCFI125:
 3277              		.cfi_def_cfa_register 13
 3278              		@ sp needed
 3279 00a8 80BD     		pop	{r7, pc}
 3280              	.L172:
 3281 00aa 00BF     		.align	2
 3282              	.L171:
 3283 00ac 00000000 		.word	SystemCoreClock
 3284 00b0 83DE1B43 		.word	1125899907
 3285              		.cfi_endproc
 3286              	.LFE87:
 3288              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 3289              		.align	1
 3290              		.global	ADC_ConversionStop_Disable
 3291              		.syntax unified
 3292              		.thumb
 3293              		.thumb_func
 3294              		.fpu softvfp
 3296              	ADC_ConversionStop_Disable:
 3297              	.LFB88:
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         stopped to disable the ADC.
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 99


 3298              		.loc 1 2299 1
 3299              		.cfi_startproc
 3300              		@ args = 0, pretend = 0, frame = 16
 3301              		@ frame_needed = 1, uses_anonymous_args = 0
 3302 0000 80B5     		push	{r7, lr}
 3303              	.LCFI126:
 3304              		.cfi_def_cfa_offset 8
 3305              		.cfi_offset 7, -8
 3306              		.cfi_offset 14, -4
 3307 0002 84B0     		sub	sp, sp, #16
 3308              	.LCFI127:
 3309              		.cfi_def_cfa_offset 24
 3310 0004 00AF     		add	r7, sp, #0
 3311              	.LCFI128:
 3312              		.cfi_def_cfa_register 7
 3313 0006 7860     		str	r0, [r7, #4]
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3314              		.loc 1 2300 12
 3315 0008 0023     		movs	r3, #0
 3316 000a FB60     		str	r3, [r7, #12]
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 3317              		.loc 1 2303 7
 3318 000c 7B68     		ldr	r3, [r7, #4]
 3319 000e 1B68     		ldr	r3, [r3]
 3320 0010 9B68     		ldr	r3, [r3, #8]
 3321 0012 03F00103 		and	r3, r3, #1
 3322              		.loc 1 2303 6
 3323 0016 012B     		cmp	r3, #1
 3324 0018 2ED1     		bne	.L174
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC peripheral */
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
 3325              		.loc 1 2306 5
 3326 001a 7B68     		ldr	r3, [r7, #4]
 3327 001c 1B68     		ldr	r3, [r3]
 3328 001e 9A68     		ldr	r2, [r3, #8]
 3329 0020 7B68     		ldr	r3, [r7, #4]
 3330 0022 1B68     		ldr	r3, [r3]
 3331 0024 22F00102 		bic	r2, r2, #1
 3332 0028 9A60     		str	r2, [r3, #8]
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3333              		.loc 1 2309 17
 3334 002a FFF7FEFF 		bl	HAL_GetTick
 3335 002e F860     		str	r0, [r7, #12]
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
 3336              		.loc 1 2312 10
 3337 0030 1BE0     		b	.L175
 3338              	.L177:
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 3339              		.loc 1 2314 11
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 100


 3340 0032 FFF7FEFF 		bl	HAL_GetTick
 3341 0036 0246     		mov	r2, r0
 3342              		.loc 1 2314 25
 3343 0038 FB68     		ldr	r3, [r7, #12]
 3344 003a D31A     		subs	r3, r2, r3
 3345              		.loc 1 2314 9
 3346 003c 022B     		cmp	r3, #2
 3347 003e 14D9     		bls	.L175
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if(ADC_IS_ENABLE(hadc) != RESET)
 3348              		.loc 1 2317 12
 3349 0040 7B68     		ldr	r3, [r7, #4]
 3350 0042 1B68     		ldr	r3, [r3]
 3351 0044 9B68     		ldr	r3, [r3, #8]
 3352 0046 03F00103 		and	r3, r3, #1
 3353              		.loc 1 2317 11
 3354 004a 012B     		cmp	r3, #1
 3355 004c 0DD1     		bne	.L175
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to error */
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3356              		.loc 1 2320 11
 3357 004e 7B68     		ldr	r3, [r7, #4]
 3358 0050 9B6A     		ldr	r3, [r3, #40]
 3359 0052 43F01002 		orr	r2, r3, #16
 3360 0056 7B68     		ldr	r3, [r7, #4]
 3361 0058 9A62     		str	r2, [r3, #40]
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3362              		.loc 1 2323 11
 3363 005a 7B68     		ldr	r3, [r7, #4]
 3364 005c DB6A     		ldr	r3, [r3, #44]
 3365 005e 43F00102 		orr	r2, r3, #1
 3366 0062 7B68     		ldr	r3, [r7, #4]
 3367 0064 DA62     		str	r2, [r3, #44]
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_ERROR;
 3368              		.loc 1 2325 18
 3369 0066 0123     		movs	r3, #1
 3370 0068 07E0     		b	.L176
 3371              	.L175:
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3372              		.loc 1 2312 11
 3373 006a 7B68     		ldr	r3, [r7, #4]
 3374 006c 1B68     		ldr	r3, [r3]
 3375 006e 9B68     		ldr	r3, [r3, #8]
 3376 0070 03F00103 		and	r3, r3, #1
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3377              		.loc 1 2312 10
 3378 0074 012B     		cmp	r3, #1
 3379 0076 DCD0     		beq	.L177
 3380              	.L174:
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 101


2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3381              		.loc 1 2332 10
 3382 0078 0023     		movs	r3, #0
 3383              	.L176:
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3384              		.loc 1 2333 1
 3385 007a 1846     		mov	r0, r3
 3386 007c 1037     		adds	r7, r7, #16
 3387              	.LCFI129:
 3388              		.cfi_def_cfa_offset 8
 3389 007e BD46     		mov	sp, r7
 3390              	.LCFI130:
 3391              		.cfi_def_cfa_register 13
 3392              		@ sp needed
 3393 0080 80BD     		pop	{r7, pc}
 3394              		.cfi_endproc
 3395              	.LFE88:
 3397              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 3398              		.align	1
 3399              		.global	ADC_DMAConvCplt
 3400              		.syntax unified
 3401              		.thumb
 3402              		.thumb_func
 3403              		.fpu softvfp
 3405              	ADC_DMAConvCplt:
 3406              	.LFB89:
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3407              		.loc 1 2341 1
 3408              		.cfi_startproc
 3409              		@ args = 0, pretend = 0, frame = 16
 3410              		@ frame_needed = 1, uses_anonymous_args = 0
 3411 0000 80B5     		push	{r7, lr}
 3412              	.LCFI131:
 3413              		.cfi_def_cfa_offset 8
 3414              		.cfi_offset 7, -8
 3415              		.cfi_offset 14, -4
 3416 0002 84B0     		sub	sp, sp, #16
 3417              	.LCFI132:
 3418              		.cfi_def_cfa_offset 24
 3419 0004 00AF     		add	r7, sp, #0
 3420              	.LCFI133:
 3421              		.cfi_def_cfa_register 7
 3422 0006 7860     		str	r0, [r7, #4]
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3423              		.loc 1 2343 22
 3424 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 102


 3425 000a 5B6A     		ldr	r3, [r3, #36]
 3426 000c FB60     		str	r3, [r7, #12]
2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 3427              		.loc 1 2346 7
 3428 000e FB68     		ldr	r3, [r7, #12]
 3429 0010 9B6A     		ldr	r3, [r3, #40]
 3430 0012 03F05003 		and	r3, r3, #80
 3431              		.loc 1 2346 6
 3432 0016 002B     		cmp	r3, #0
 3433 0018 27D1     		bne	.L179
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine */
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3434              		.loc 1 2349 5
 3435 001a FB68     		ldr	r3, [r7, #12]
 3436 001c 9B6A     		ldr	r3, [r3, #40]
 3437 001e 43F40072 		orr	r2, r3, #512
 3438 0022 FB68     		ldr	r3, [r7, #12]
 3439 0024 9A62     		str	r2, [r3, #40]
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: On STM32F1 devices, in case of sequencer enabled                 */
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       (several ranks selected), end of conversion flag is raised       */
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       at the end of the sequence.                                      */
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 3440              		.loc 1 2356 8
 3441 0026 FB68     		ldr	r3, [r7, #12]
 3442 0028 1B68     		ldr	r3, [r3]
 3443 002a 9B68     		ldr	r3, [r3, #8]
 3444 002c 03F46023 		and	r3, r3, #917504
 3445              		.loc 1 2356 7
 3446 0030 B3F5602F 		cmp	r3, #917504
 3447 0034 15D1     		bne	.L180
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3448              		.loc 1 2357 19 discriminator 1
 3449 0036 FB68     		ldr	r3, [r7, #12]
 3450 0038 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3451              		.loc 1 2356 51 discriminator 1
 3452 003a 002B     		cmp	r3, #0
 3453 003c 11D1     		bne	.L180
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 3454              		.loc 1 2360 7
 3455 003e FB68     		ldr	r3, [r7, #12]
 3456 0040 9B6A     		ldr	r3, [r3, #40]
 3457 0042 23F48072 		bic	r2, r3, #256
 3458 0046 FB68     		ldr	r3, [r7, #12]
 3459 0048 9A62     		str	r2, [r3, #40]
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3460              		.loc 1 2362 11
 3461 004a FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 103


 3462 004c 9B6A     		ldr	r3, [r3, #40]
 3463 004e 03F48053 		and	r3, r3, #4096
 3464              		.loc 1 2362 10
 3465 0052 002B     		cmp	r3, #0
 3466 0054 05D1     		bne	.L180
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3467              		.loc 1 2364 9
 3468 0056 FB68     		ldr	r3, [r7, #12]
 3469 0058 9B6A     		ldr	r3, [r3, #40]
 3470 005a 43F00102 		orr	r2, r3, #1
 3471 005e FB68     		ldr	r3, [r7, #12]
 3472 0060 9A62     		str	r2, [r3, #40]
 3473              	.L180:
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Conversion complete callback */
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 3474              		.loc 1 2372 5
 3475 0062 F868     		ldr	r0, [r7, #12]
 3476 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Call DMA error callback */
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3477              		.loc 1 2380 1
 3478 0068 04E0     		b	.L182
 3479              	.L179:
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3480              		.loc 1 2378 9
 3481 006a FB68     		ldr	r3, [r7, #12]
 3482 006c 1B6A     		ldr	r3, [r3, #32]
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3483              		.loc 1 2378 21
 3484 006e 1B6B     		ldr	r3, [r3, #48]
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3485              		.loc 1 2378 5
 3486 0070 7868     		ldr	r0, [r7, #4]
 3487 0072 9847     		blx	r3
 3488              	.LVL0:
 3489              	.L182:
 3490              		.loc 1 2380 1
 3491 0074 00BF     		nop
 3492 0076 1037     		adds	r7, r7, #16
 3493              	.LCFI134:
 3494              		.cfi_def_cfa_offset 8
 3495 0078 BD46     		mov	sp, r7
 3496              	.LCFI135:
 3497              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 104


 3498              		@ sp needed
 3499 007a 80BD     		pop	{r7, pc}
 3500              		.cfi_endproc
 3501              	.LFE89:
 3503              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 3504              		.align	1
 3505              		.global	ADC_DMAHalfConvCplt
 3506              		.syntax unified
 3507              		.thumb
 3508              		.thumb_func
 3509              		.fpu softvfp
 3511              	ADC_DMAHalfConvCplt:
 3512              	.LFB90:
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3513              		.loc 1 2388 1
 3514              		.cfi_startproc
 3515              		@ args = 0, pretend = 0, frame = 16
 3516              		@ frame_needed = 1, uses_anonymous_args = 0
 3517 0000 80B5     		push	{r7, lr}
 3518              	.LCFI136:
 3519              		.cfi_def_cfa_offset 8
 3520              		.cfi_offset 7, -8
 3521              		.cfi_offset 14, -4
 3522 0002 84B0     		sub	sp, sp, #16
 3523              	.LCFI137:
 3524              		.cfi_def_cfa_offset 24
 3525 0004 00AF     		add	r7, sp, #0
 3526              	.LCFI138:
 3527              		.cfi_def_cfa_register 7
 3528 0006 7860     		str	r0, [r7, #4]
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3529              		.loc 1 2390 22
 3530 0008 7B68     		ldr	r3, [r7, #4]
 3531 000a 5B6A     		ldr	r3, [r3, #36]
 3532 000c FB60     		str	r3, [r7, #12]
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Half conversion callback */
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback(hadc);
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 3533              		.loc 1 2396 3
 3534 000e F868     		ldr	r0, [r7, #12]
 3535 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3536              		.loc 1 2398 1
 3537 0014 00BF     		nop
 3538 0016 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 105


 3539              	.LCFI139:
 3540              		.cfi_def_cfa_offset 8
 3541 0018 BD46     		mov	sp, r7
 3542              	.LCFI140:
 3543              		.cfi_def_cfa_register 13
 3544              		@ sp needed
 3545 001a 80BD     		pop	{r7, pc}
 3546              		.cfi_endproc
 3547              	.LFE90:
 3549              		.section	.text.ADC_DMAError,"ax",%progbits
 3550              		.align	1
 3551              		.global	ADC_DMAError
 3552              		.syntax unified
 3553              		.thumb
 3554              		.thumb_func
 3555              		.fpu softvfp
 3557              	ADC_DMAError:
 3558              	.LFB91:
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA error callback 
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3559              		.loc 1 2406 1
 3560              		.cfi_startproc
 3561              		@ args = 0, pretend = 0, frame = 16
 3562              		@ frame_needed = 1, uses_anonymous_args = 0
 3563 0000 80B5     		push	{r7, lr}
 3564              	.LCFI141:
 3565              		.cfi_def_cfa_offset 8
 3566              		.cfi_offset 7, -8
 3567              		.cfi_offset 14, -4
 3568 0002 84B0     		sub	sp, sp, #16
 3569              	.LCFI142:
 3570              		.cfi_def_cfa_offset 24
 3571 0004 00AF     		add	r7, sp, #0
 3572              	.LCFI143:
 3573              		.cfi_def_cfa_register 7
 3574 0006 7860     		str	r0, [r7, #4]
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3575              		.loc 1 2408 22
 3576 0008 7B68     		ldr	r3, [r7, #4]
 3577 000a 5B6A     		ldr	r3, [r3, #36]
 3578 000c FB60     		str	r3, [r7, #12]
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3579              		.loc 1 2411 3
 3580 000e FB68     		ldr	r3, [r7, #12]
 3581 0010 9B6A     		ldr	r3, [r3, #40]
 3582 0012 43F04002 		orr	r2, r3, #64
 3583 0016 FB68     		ldr	r3, [r7, #12]
 3584 0018 9A62     		str	r2, [r3, #40]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 106


2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 3585              		.loc 1 2414 3
 3586 001a FB68     		ldr	r3, [r7, #12]
 3587 001c DB6A     		ldr	r3, [r3, #44]
 3588 001e 43F00402 		orr	r2, r3, #4
 3589 0022 FB68     		ldr	r3, [r7, #12]
 3590 0024 DA62     		str	r2, [r3, #44]
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Error callback */
2417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
2420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 3591              		.loc 1 2420 3
 3592 0026 F868     		ldr	r0, [r7, #12]
 3593 0028 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
2421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3594              		.loc 1 2422 1
 3595 002c 00BF     		nop
 3596 002e 1037     		adds	r7, r7, #16
 3597              	.LCFI144:
 3598              		.cfi_def_cfa_offset 8
 3599 0030 BD46     		mov	sp, r7
 3600              	.LCFI145:
 3601              		.cfi_def_cfa_register 13
 3602              		@ sp needed
 3603 0032 80BD     		pop	{r7, pc}
 3604              		.cfi_endproc
 3605              	.LFE91:
 3607              		.text
 3608              	.Letext0:
 3609              		.file 2 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\machine\\
 3610              		.file 3 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\sys\\_std
 3611              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 3612              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 3613              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 3614              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 3615              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 3616              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 107


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal_adc.c
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:16     .text.HAL_ADC_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:24     .text.HAL_ADC_Init:00000000 HAL_ADC_Init
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:552    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3296   .text.ADC_ConversionStop_Disable:00000000 ADC_ConversionStop_Disable
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:307    .text.HAL_ADC_Init:000001a8 $d
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:313    .text.HAL_ADC_DeInit:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:320    .text.HAL_ADC_DeInit:00000000 HAL_ADC_DeInit
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:595    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:539    .text.HAL_ADC_DeInit:0000017c $d
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:545    .text.HAL_ADC_MspInit:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:588    .text.HAL_ADC_MspDeInit:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:631    .text.HAL_ADC_Start:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:638    .text.HAL_ADC_Start:00000000 HAL_ADC_Start
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3154   .text.ADC_Enable:00000000 ADC_Enable
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:854    .text.HAL_ADC_Start:00000154 $d
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:860    .text.HAL_ADC_Stop:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:867    .text.HAL_ADC_Stop:00000000 HAL_ADC_Stop
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:940    .text.HAL_ADC_PollForConversion:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:947    .text.HAL_ADC_PollForConversion:00000000 HAL_ADC_PollForConversion
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1280   .text.HAL_ADC_PollForConversion:000001f4 $d
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1290   .text.HAL_ADC_PollForEvent:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1297   .text.HAL_ADC_PollForEvent:00000000 HAL_ADC_PollForEvent
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1407   .text.HAL_ADC_Start_IT:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1414   .text.HAL_ADC_Start_IT:00000000 HAL_ADC_Start_IT
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1638   .text.HAL_ADC_Start_IT:00000164 $d
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1644   .text.HAL_ADC_Stop_IT:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1651   .text.HAL_ADC_Stop_IT:00000000 HAL_ADC_Stop_IT
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1732   .text.HAL_ADC_Start_DMA:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:1739   .text.HAL_ADC_Start_DMA:00000000 HAL_ADC_Start_DMA
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2011   .text.HAL_ADC_Start_DMA:000001a8 $d
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3405   .text.ADC_DMAConvCplt:00000000 ADC_DMAConvCplt
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3511   .text.ADC_DMAHalfConvCplt:00000000 ADC_DMAHalfConvCplt
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3557   .text.ADC_DMAError:00000000 ADC_DMAError
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2020   .text.HAL_ADC_Stop_DMA:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2027   .text.HAL_ADC_Stop_DMA:00000000 HAL_ADC_Stop_DMA
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2135   .text.HAL_ADC_GetValue:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2142   .text.HAL_ADC_GetValue:00000000 HAL_ADC_GetValue
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2183   .text.HAL_ADC_IRQHandler:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2190   .text.HAL_ADC_IRQHandler:00000000 HAL_ADC_IRQHandler
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2439   .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2525   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 HAL_ADC_LevelOutOfWindowCallback
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2432   .text.HAL_ADC_ConvCpltCallback:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2475   .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2482   .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2518   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2561   .text.HAL_ADC_ErrorCallback:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2568   .text.HAL_ADC_ErrorCallback:00000000 HAL_ADC_ErrorCallback
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2604   .text.HAL_ADC_ConfigChannel:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2611   .text.HAL_ADC_ConfigChannel:00000000 HAL_ADC_ConfigChannel
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2912   .text.HAL_ADC_ConfigChannel:000001e4 $d
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2919   .text.HAL_ADC_AnalogWDGConfig:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:2926   .text.HAL_ADC_AnalogWDGConfig:00000000 HAL_ADC_AnalogWDGConfig
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3048   .text.HAL_ADC_AnalogWDGConfig:000000a0 $d
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3055   .text.HAL_ADC_GetState:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3062   .text.HAL_ADC_GetState:00000000 HAL_ADC_GetState
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s 			page 108


C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3101   .text.HAL_ADC_GetError:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3108   .text.HAL_ADC_GetError:00000000 HAL_ADC_GetError
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3147   .text.ADC_Enable:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3283   .text.ADC_Enable:000000ac $d
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3289   .text.ADC_ConversionStop_Disable:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3398   .text.ADC_DMAConvCplt:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3504   .text.ADC_DMAHalfConvCplt:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccjiEQNb.s:3550   .text.ADC_DMAError:00000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
