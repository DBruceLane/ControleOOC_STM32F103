ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	hadc1
  16              		.section	.bss.hadc1,"aw",%nobits
  17              		.align	2
  20              	hadc1:
  21 0000 00000000 		.space	48
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.global	hi2c1
  23              		.section	.bss.hi2c1,"aw",%nobits
  24              		.align	2
  27              	hi2c1:
  28 0000 00000000 		.space	84
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.global	htim4
  30              		.section	.bss.htim4,"aw",%nobits
  31              		.align	2
  34              	htim4:
  35 0000 00000000 		.space	72
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.global	MenuAtual
  37              		.section	.bss.MenuAtual,"aw",%nobits
  38              		.align	2
  41              	MenuAtual:
  42 0000 00000000 		.space	4
  43              		.global	counterOpcao
  44              		.section	.bss.counterOpcao,"aw",%nobits
  45              		.align	2
  48              	counterOpcao:
  49 0000 00000000 		.space	4
  50              		.global	counterPrev
  51              		.section	.bss.counterPrev,"aw",%nobits
  52              		.align	2
  55              	counterPrev:
  56 0000 00000000 		.space	4
  57              		.global	txtCounter
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 2


  58              		.section	.bss.txtCounter,"aw",%nobits
  59              		.align	2
  62              	txtCounter:
  63 0000 00000000 		.space	10
  63      00000000 
  63      0000
  64              		.global	ligarMotor
  65              		.section	.bss.ligarMotor,"aw",%nobits
  68              	ligarMotor:
  69 0000 00       		.space	1
  70              		.global	StepAlta
  71              		.section	.data.StepAlta,"aw"
  74              	StepAlta:
  75 0000 01       		.byte	1
  76              		.global	TempVolts
  77              		.section	.bss.TempVolts,"aw",%nobits
  78              		.align	2
  81              	TempVolts:
  82 0000 00000000 		.space	4
  83              		.global	TempCelsius
  84              		.section	.bss.TempCelsius,"aw",%nobits
  85              		.align	2
  88              	TempCelsius:
  89 0000 00000000 		.space	4
  90              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  91              		.align	1
  92              		.global	HAL_TIM_PeriodElapsedCallback
  93              		.arch armv7-m
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu softvfp
  99              	HAL_TIM_PeriodElapsedCallback:
 100              	.LFB65:
 101              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 3


  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "ssd1306.h"
  26:Core/Src/main.c **** #include "fonts.h"
  27:Core/Src/main.c **** #include "test.h"
  28:Core/Src/main.c **** #include "stdbool.h"
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PD */
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE BEGIN PV */
  53:Core/Src/main.c **** uint32_t MenuAtual = 0;
  54:Core/Src/main.c **** uint32_t counterOpcao = 0;
  55:Core/Src/main.c **** uint32_t counterPrev = 0;
  56:Core/Src/main.c **** char txtCounter[10];
  57:Core/Src/main.c **** _Bool ligarMotor = false;
  58:Core/Src/main.c **** _Bool StepAlta = true;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** // LM35
  61:Core/Src/main.c **** uint32_t TempVolts;
  62:Core/Src/main.c **** float TempCelsius;
  63:Core/Src/main.c **** /* USER CODE END PV */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  66:Core/Src/main.c **** void SystemClock_Config(void);
  67:Core/Src/main.c **** static void MX_GPIO_Init(void);
  68:Core/Src/main.c **** static void MX_I2C1_Init(void);
  69:Core/Src/main.c **** static void MX_TIM4_Init(void);
  70:Core/Src/main.c **** static void MX_ADC1_Init(void);
  71:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  72:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) // Interrupt do passo do motor
  73:Core/Src/main.c **** {
 102              		.loc 1 73 1
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 8
 105              		@ frame_needed = 1, uses_anonymous_args = 0
 106 0000 80B5     		push	{r7, lr}
 107              	.LCFI0:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 4


 108              		.cfi_def_cfa_offset 8
 109              		.cfi_offset 7, -8
 110              		.cfi_offset 14, -4
 111 0002 82B0     		sub	sp, sp, #8
 112              	.LCFI1:
 113              		.cfi_def_cfa_offset 16
 114 0004 00AF     		add	r7, sp, #0
 115              	.LCFI2:
 116              		.cfi_def_cfa_register 7
 117 0006 7860     		str	r0, [r7, #4]
  74:Core/Src/main.c ****   if(StepAlta)
 118              		.loc 1 74 6
 119 0008 0F4B     		ldr	r3, .L5
 120 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 121              		.loc 1 74 5
 122 000c 002B     		cmp	r3, #0
 123 000e 0ED0     		beq	.L2
  75:Core/Src/main.c ****   {
  76:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); // Pino Step
 124              		.loc 1 76 5
 125 0010 0122     		movs	r2, #1
 126 0012 0821     		movs	r1, #8
 127 0014 0D48     		ldr	r0, .L5+4
 128 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
  77:Core/Src/main.c ****     StepAlta = false;
 129              		.loc 1 77 14
 130 001a 0B4B     		ldr	r3, .L5
 131 001c 0022     		movs	r2, #0
 132 001e 1A70     		strb	r2, [r3]
  78:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 133              		.loc 1 78 5
 134 0020 0122     		movs	r2, #1
 135 0022 4FF48071 		mov	r1, #256
 136 0026 0A48     		ldr	r0, .L5+8
 137 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
  79:Core/Src/main.c ****   }
  80:Core/Src/main.c ****   else
  81:Core/Src/main.c ****   {
  82:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); // Pino Step
  83:Core/Src/main.c ****     StepAlta = true;
  84:Core/Src/main.c ****     //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
  85:Core/Src/main.c ****   }
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /*
  88:Core/Src/main.c ****   static uint32_t millis = 0;
  89:Core/Src/main.c ****   millis++;
  90:Core/Src/main.c ****   if (millis % 1000 == 0) {
  91:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 0);
  92:Core/Src/main.c ****   }
  93:Core/Src/main.c ****   */
  94:Core/Src/main.c ****   
  95:Core/Src/main.c **** }
 138              		.loc 1 95 1
 139 002c 07E0     		b	.L4
 140              	.L2:
  82:Core/Src/main.c ****     StepAlta = true;
 141              		.loc 1 82 5
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 5


 142 002e 0022     		movs	r2, #0
 143 0030 0821     		movs	r1, #8
 144 0032 0648     		ldr	r0, .L5+4
 145 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
  83:Core/Src/main.c ****     //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 146              		.loc 1 83 14
 147 0038 034B     		ldr	r3, .L5
 148 003a 0122     		movs	r2, #1
 149 003c 1A70     		strb	r2, [r3]
 150              	.L4:
 151              		.loc 1 95 1
 152 003e 00BF     		nop
 153 0040 0837     		adds	r7, r7, #8
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 8
 156 0042 BD46     		mov	sp, r7
 157              	.LCFI4:
 158              		.cfi_def_cfa_register 13
 159              		@ sp needed
 160 0044 80BD     		pop	{r7, pc}
 161              	.L6:
 162 0046 00BF     		.align	2
 163              	.L5:
 164 0048 00000000 		.word	StepAlta
 165 004c 000C0140 		.word	1073810432
 166 0050 00080140 		.word	1073809408
 167              		.cfi_endproc
 168              	.LFE65:
 170              		.section	.rodata
 171              		.align	2
 172              	.LC0:
 173 0000 31204F75 		.ascii	"1 Outro Menu\000"
 173      74726F20 
 173      4D656E75 
 173      00
 174              		.global	__aeabi_f2iz
 175 000d 000000   		.align	2
 176              	.LC1:
 177 0010 2C00     		.ascii	",\000"
 178              		.global	__aeabi_i2f
 179              		.global	__aeabi_fsub
 180              		.global	__aeabi_fmul
 181 0012 0000     		.align	2
 182              	.LC2:
 183 0014 3020566F 		.ascii	"0 Voltar\000"
 183      6C746172 
 183      00
 184 001d 000000   		.align	2
 185              	.LC3:
 186 0020 31204C69 		.ascii	"1 Ligar Motor\000"
 186      67617220 
 186      4D6F746F 
 186      7200
 187 002e 0000     		.align	2
 188              	.LC4:
 189 0030 32204465 		.ascii	"2 Desligar Motor\000"
 189      736C6967 
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 6


 189      6172204D 
 189      6F746F72 
 189      00
 190              		.section	.text.MenuHandler,"ax",%progbits
 191              		.align	1
 192              		.global	MenuHandler
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu softvfp
 198              	MenuHandler:
 199              	.LFB66:
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** void MenuHandler(void)
  98:Core/Src/main.c **** {
 200              		.loc 1 98 1
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204 0000 98B5     		push	{r3, r4, r7, lr}
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 3, -16
 208              		.cfi_offset 4, -12
 209              		.cfi_offset 7, -8
 210              		.cfi_offset 14, -4
 211 0002 00AF     		add	r7, sp, #0
 212              	.LCFI6:
 213              		.cfi_def_cfa_register 7
  99:Core/Src/main.c ****   if(MenuAtual==0)
 214              		.loc 1 99 15
 215 0004 534B     		ldr	r3, .L11
 216 0006 1B68     		ldr	r3, [r3]
 217              		.loc 1 99 5
 218 0008 002B     		cmp	r3, #0
 219 000a 64D1     		bne	.L8
 100:Core/Src/main.c ****     {
 101:Core/Src/main.c ****       
 102:Core/Src/main.c ****       itoa(counterOpcao, txtCounter, 10); // Coloca valor do counter na txtCounter
 220              		.loc 1 102 7
 221 000c 524B     		ldr	r3, .L11+4
 222 000e 1B68     		ldr	r3, [r3]
 223 0010 0A22     		movs	r2, #10
 224 0012 5249     		ldr	r1, .L11+8
 225 0014 1846     		mov	r0, r3
 226 0016 FFF7FEFF 		bl	itoa
 103:Core/Src/main.c ****       //if (counterPrev != counterOpcao) // Atualiza tela so se mudar contador
 104:Core/Src/main.c ****       //{
 105:Core/Src/main.c ****         //SSD1306_Clear();
 106:Core/Src/main.c ****         counterPrev = counterOpcao;
 227              		.loc 1 106 21
 228 001a 4F4B     		ldr	r3, .L11+4
 229 001c 1B68     		ldr	r3, [r3]
 230 001e 504A     		ldr	r2, .L11+12
 231 0020 1360     		str	r3, [r2]
 107:Core/Src/main.c ****         SSD1306_GotoXY(2, 2);
 232              		.loc 1 107 9
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 7


 233 0022 0221     		movs	r1, #2
 234 0024 0220     		movs	r0, #2
 235 0026 FFF7FEFF 		bl	SSD1306_GotoXY
 108:Core/Src/main.c ****         SSD1306_Puts(txtCounter, &Font_7x10, 1);
 236              		.loc 1 108 9
 237 002a 0122     		movs	r2, #1
 238 002c 4D49     		ldr	r1, .L11+16
 239 002e 4B48     		ldr	r0, .L11+8
 240 0030 FFF7FEFF 		bl	SSD1306_Puts
 109:Core/Src/main.c ****         SSD1306_GotoXY(2, 12);
 241              		.loc 1 109 9
 242 0034 0C21     		movs	r1, #12
 243 0036 0220     		movs	r0, #2
 244 0038 FFF7FEFF 		bl	SSD1306_GotoXY
 110:Core/Src/main.c ****         SSD1306_Puts("1 Outro Menu", &Font_7x10, 1);
 245              		.loc 1 110 9
 246 003c 0122     		movs	r2, #1
 247 003e 4949     		ldr	r1, .L11+16
 248 0040 4948     		ldr	r0, .L11+20
 249 0042 FFF7FEFF 		bl	SSD1306_Puts
 111:Core/Src/main.c ****         SSD1306_GotoXY(2, 22);
 250              		.loc 1 111 9
 251 0046 1621     		movs	r1, #22
 252 0048 0220     		movs	r0, #2
 253 004a FFF7FEFF 		bl	SSD1306_GotoXY
 112:Core/Src/main.c ****         itoa(TempCelsius, txtCounter, 10);
 254              		.loc 1 112 9
 255 004e 474B     		ldr	r3, .L11+24
 256 0050 1B68     		ldr	r3, [r3]	@ float
 257 0052 1846     		mov	r0, r3
 258 0054 FFF7FEFF 		bl	__aeabi_f2iz
 259 0058 0346     		mov	r3, r0
 260 005a 0A22     		movs	r2, #10
 261 005c 3F49     		ldr	r1, .L11+8
 262 005e 1846     		mov	r0, r3
 263 0060 FFF7FEFF 		bl	itoa
 113:Core/Src/main.c ****         SSD1306_Puts(txtCounter, &Font_7x10, 1);
 264              		.loc 1 113 9
 265 0064 0122     		movs	r2, #1
 266 0066 3F49     		ldr	r1, .L11+16
 267 0068 3C48     		ldr	r0, .L11+8
 268 006a FFF7FEFF 		bl	SSD1306_Puts
 114:Core/Src/main.c ****         SSD1306_GotoXY(16, 22);
 269              		.loc 1 114 9
 270 006e 1621     		movs	r1, #22
 271 0070 1020     		movs	r0, #16
 272 0072 FFF7FEFF 		bl	SSD1306_GotoXY
 115:Core/Src/main.c ****         SSD1306_Puts(",", &Font_7x10, 1);
 273              		.loc 1 115 9
 274 0076 0122     		movs	r2, #1
 275 0078 3A49     		ldr	r1, .L11+16
 276 007a 3D48     		ldr	r0, .L11+28
 277 007c FFF7FEFF 		bl	SSD1306_Puts
 116:Core/Src/main.c ****         SSD1306_GotoXY(23, 22);
 278              		.loc 1 116 9
 279 0080 1621     		movs	r1, #22
 280 0082 1720     		movs	r0, #23
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 8


 281 0084 FFF7FEFF 		bl	SSD1306_GotoXY
 117:Core/Src/main.c ****         itoa(100*(TempCelsius-(int)TempCelsius), txtCounter, 10);  
 282              		.loc 1 117 30
 283 0088 384B     		ldr	r3, .L11+24
 284 008a 1C68     		ldr	r4, [r3]	@ float
 285              		.loc 1 117 31
 286 008c 374B     		ldr	r3, .L11+24
 287 008e 1B68     		ldr	r3, [r3]	@ float
 288 0090 1846     		mov	r0, r3
 289 0092 FFF7FEFF 		bl	__aeabi_f2iz
 290 0096 0346     		mov	r3, r0
 291              		.loc 1 117 30
 292 0098 1846     		mov	r0, r3
 293 009a FFF7FEFF 		bl	__aeabi_i2f
 294 009e 0346     		mov	r3, r0
 295 00a0 1946     		mov	r1, r3
 296 00a2 2046     		mov	r0, r4
 297 00a4 FFF7FEFF 		bl	__aeabi_fsub
 298 00a8 0346     		mov	r3, r0
 299              		.loc 1 117 17
 300 00aa 3249     		ldr	r1, .L11+32
 301 00ac 1846     		mov	r0, r3
 302 00ae FFF7FEFF 		bl	__aeabi_fmul
 303 00b2 0346     		mov	r3, r0
 304              		.loc 1 117 9
 305 00b4 1846     		mov	r0, r3
 306 00b6 FFF7FEFF 		bl	__aeabi_f2iz
 307 00ba 0346     		mov	r3, r0
 308 00bc 0A22     		movs	r2, #10
 309 00be 2749     		ldr	r1, .L11+8
 310 00c0 1846     		mov	r0, r3
 311 00c2 FFF7FEFF 		bl	itoa
 118:Core/Src/main.c ****         SSD1306_Puts(txtCounter, &Font_7x10, 1);
 312              		.loc 1 118 9
 313 00c6 0122     		movs	r2, #1
 314 00c8 2649     		ldr	r1, .L11+16
 315 00ca 2448     		ldr	r0, .L11+8
 316 00cc FFF7FEFF 		bl	SSD1306_Puts
 119:Core/Src/main.c ****         
 120:Core/Src/main.c ****         SSD1306_UpdateScreen();
 317              		.loc 1 120 9
 318 00d0 FFF7FEFF 		bl	SSD1306_UpdateScreen
 121:Core/Src/main.c ****       //}
 122:Core/Src/main.c ****     }
 123:Core/Src/main.c ****     else if (MenuAtual==1)
 124:Core/Src/main.c ****     {
 125:Core/Src/main.c ****       
 126:Core/Src/main.c ****       itoa(counterOpcao, txtCounter, 10); // Coloca valor do counter na txtCounter
 127:Core/Src/main.c ****       if (counterPrev != counterOpcao) // Atualiza tela so se mudar contador
 128:Core/Src/main.c ****       {
 129:Core/Src/main.c ****         SSD1306_Clear();
 130:Core/Src/main.c ****         counterPrev = counterOpcao;
 131:Core/Src/main.c ****         SSD1306_GotoXY(2, 2);
 132:Core/Src/main.c ****         SSD1306_Puts(txtCounter, &Font_7x10, 1);
 133:Core/Src/main.c ****         SSD1306_GotoXY(2, 12);
 134:Core/Src/main.c ****         SSD1306_Puts("0 Voltar", &Font_7x10, 1);
 135:Core/Src/main.c ****         SSD1306_GotoXY(2, 22);
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 9


 136:Core/Src/main.c ****         SSD1306_Puts("1 Ligar Motor", &Font_7x10, 1);
 137:Core/Src/main.c ****         SSD1306_GotoXY(2, 32);
 138:Core/Src/main.c ****         SSD1306_Puts("2 Desligar Motor", &Font_7x10, 1);
 139:Core/Src/main.c ****         
 140:Core/Src/main.c ****         SSD1306_UpdateScreen();
 141:Core/Src/main.c ****       }
 142:Core/Src/main.c ****     }
 143:Core/Src/main.c ****     
 144:Core/Src/main.c **** }
 319              		.loc 1 144 1
 320 00d4 3CE0     		b	.L10
 321              	.L8:
 123:Core/Src/main.c ****     {
 322              		.loc 1 123 23
 323 00d6 1F4B     		ldr	r3, .L11
 324 00d8 1B68     		ldr	r3, [r3]
 123:Core/Src/main.c ****     {
 325              		.loc 1 123 13
 326 00da 012B     		cmp	r3, #1
 327 00dc 38D1     		bne	.L10
 126:Core/Src/main.c ****       if (counterPrev != counterOpcao) // Atualiza tela so se mudar contador
 328              		.loc 1 126 7
 329 00de 1E4B     		ldr	r3, .L11+4
 330 00e0 1B68     		ldr	r3, [r3]
 331 00e2 0A22     		movs	r2, #10
 332 00e4 1D49     		ldr	r1, .L11+8
 333 00e6 1846     		mov	r0, r3
 334 00e8 FFF7FEFF 		bl	itoa
 127:Core/Src/main.c ****       {
 335              		.loc 1 127 23
 336 00ec 1C4B     		ldr	r3, .L11+12
 337 00ee 1A68     		ldr	r2, [r3]
 338 00f0 194B     		ldr	r3, .L11+4
 339 00f2 1B68     		ldr	r3, [r3]
 127:Core/Src/main.c ****       {
 340              		.loc 1 127 10
 341 00f4 9A42     		cmp	r2, r3
 342 00f6 2BD0     		beq	.L10
 129:Core/Src/main.c ****         counterPrev = counterOpcao;
 343              		.loc 1 129 9
 344 00f8 FFF7FEFF 		bl	SSD1306_Clear
 130:Core/Src/main.c ****         SSD1306_GotoXY(2, 2);
 345              		.loc 1 130 21
 346 00fc 164B     		ldr	r3, .L11+4
 347 00fe 1B68     		ldr	r3, [r3]
 348 0100 174A     		ldr	r2, .L11+12
 349 0102 1360     		str	r3, [r2]
 131:Core/Src/main.c ****         SSD1306_Puts(txtCounter, &Font_7x10, 1);
 350              		.loc 1 131 9
 351 0104 0221     		movs	r1, #2
 352 0106 0220     		movs	r0, #2
 353 0108 FFF7FEFF 		bl	SSD1306_GotoXY
 132:Core/Src/main.c ****         SSD1306_GotoXY(2, 12);
 354              		.loc 1 132 9
 355 010c 0122     		movs	r2, #1
 356 010e 1549     		ldr	r1, .L11+16
 357 0110 1248     		ldr	r0, .L11+8
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 10


 358 0112 FFF7FEFF 		bl	SSD1306_Puts
 133:Core/Src/main.c ****         SSD1306_Puts("0 Voltar", &Font_7x10, 1);
 359              		.loc 1 133 9
 360 0116 0C21     		movs	r1, #12
 361 0118 0220     		movs	r0, #2
 362 011a FFF7FEFF 		bl	SSD1306_GotoXY
 134:Core/Src/main.c ****         SSD1306_GotoXY(2, 22);
 363              		.loc 1 134 9
 364 011e 0122     		movs	r2, #1
 365 0120 1049     		ldr	r1, .L11+16
 366 0122 1548     		ldr	r0, .L11+36
 367 0124 FFF7FEFF 		bl	SSD1306_Puts
 135:Core/Src/main.c ****         SSD1306_Puts("1 Ligar Motor", &Font_7x10, 1);
 368              		.loc 1 135 9
 369 0128 1621     		movs	r1, #22
 370 012a 0220     		movs	r0, #2
 371 012c FFF7FEFF 		bl	SSD1306_GotoXY
 136:Core/Src/main.c ****         SSD1306_GotoXY(2, 32);
 372              		.loc 1 136 9
 373 0130 0122     		movs	r2, #1
 374 0132 0C49     		ldr	r1, .L11+16
 375 0134 1148     		ldr	r0, .L11+40
 376 0136 FFF7FEFF 		bl	SSD1306_Puts
 137:Core/Src/main.c ****         SSD1306_Puts("2 Desligar Motor", &Font_7x10, 1);
 377              		.loc 1 137 9
 378 013a 2021     		movs	r1, #32
 379 013c 0220     		movs	r0, #2
 380 013e FFF7FEFF 		bl	SSD1306_GotoXY
 138:Core/Src/main.c ****         
 381              		.loc 1 138 9
 382 0142 0122     		movs	r2, #1
 383 0144 0749     		ldr	r1, .L11+16
 384 0146 0E48     		ldr	r0, .L11+44
 385 0148 FFF7FEFF 		bl	SSD1306_Puts
 140:Core/Src/main.c ****       }
 386              		.loc 1 140 9
 387 014c FFF7FEFF 		bl	SSD1306_UpdateScreen
 388              	.L10:
 389              		.loc 1 144 1
 390 0150 00BF     		nop
 391 0152 98BD     		pop	{r3, r4, r7, pc}
 392              	.L12:
 393              		.align	2
 394              	.L11:
 395 0154 00000000 		.word	MenuAtual
 396 0158 00000000 		.word	counterOpcao
 397 015c 00000000 		.word	txtCounter
 398 0160 00000000 		.word	counterPrev
 399 0164 00000000 		.word	Font_7x10
 400 0168 00000000 		.word	.LC0
 401 016c 00000000 		.word	TempCelsius
 402 0170 10000000 		.word	.LC1
 403 0174 0000C842 		.word	1120403456
 404 0178 14000000 		.word	.LC2
 405 017c 20000000 		.word	.LC3
 406 0180 30000000 		.word	.LC4
 407              		.cfi_endproc
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 11


 408              	.LFE66:
 410              		.section	.text.ClickHandler,"ax",%progbits
 411              		.align	1
 412              		.global	ClickHandler
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 416              		.fpu softvfp
 418              	ClickHandler:
 419              	.LFB67:
 145:Core/Src/main.c **** 
 146:Core/Src/main.c **** void ClickHandler(void)
 147:Core/Src/main.c **** {
 420              		.loc 1 147 1
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 1, uses_anonymous_args = 0
 424 0000 80B5     		push	{r7, lr}
 425              	.LCFI7:
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 7, -8
 428              		.cfi_offset 14, -4
 429 0002 00AF     		add	r7, sp, #0
 430              	.LCFI8:
 431              		.cfi_def_cfa_register 7
 148:Core/Src/main.c ****   //SSD1306_Clear();
 149:Core/Src/main.c ****   if(MenuAtual == 0)
 432              		.loc 1 149 16
 433 0004 184B     		ldr	r3, .L18
 434 0006 1B68     		ldr	r3, [r3]
 435              		.loc 1 149 5
 436 0008 002B     		cmp	r3, #0
 437 000a 06D1     		bne	.L14
 150:Core/Src/main.c ****   {
 151:Core/Src/main.c ****     if(counterOpcao == 1)
 438              		.loc 1 151 21
 439 000c 174B     		ldr	r3, .L18+4
 440 000e 1B68     		ldr	r3, [r3]
 441              		.loc 1 151 7
 442 0010 012B     		cmp	r3, #1
 443 0012 02D1     		bne	.L14
 152:Core/Src/main.c ****     {
 153:Core/Src/main.c ****       MenuAtual = 1;
 444              		.loc 1 153 17
 445 0014 144B     		ldr	r3, .L18
 446 0016 0122     		movs	r2, #1
 447 0018 1A60     		str	r2, [r3]
 448              	.L14:
 154:Core/Src/main.c ****     }
 155:Core/Src/main.c ****   }
 156:Core/Src/main.c ****   if(MenuAtual == 1)
 449              		.loc 1 156 16
 450 001a 134B     		ldr	r3, .L18
 451 001c 1B68     		ldr	r3, [r3]
 452              		.loc 1 156 5
 453 001e 012B     		cmp	r3, #1
 454 0020 1CD1     		bne	.L15
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 12


 157:Core/Src/main.c ****   {
 158:Core/Src/main.c ****     if(counterOpcao == 1) //Ligar Interrupt
 455              		.loc 1 158 21
 456 0022 124B     		ldr	r3, .L18+4
 457 0024 1B68     		ldr	r3, [r3]
 458              		.loc 1 158 7
 459 0026 012B     		cmp	r3, #1
 460 0028 03D1     		bne	.L16
 159:Core/Src/main.c ****     {
 160:Core/Src/main.c ****       HAL_TIM_Base_Start_IT(&htim4);
 461              		.loc 1 160 7
 462 002a 1148     		ldr	r0, .L18+8
 463 002c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 464 0030 14E0     		b	.L15
 465              	.L16:
 161:Core/Src/main.c ****     }
 162:Core/Src/main.c ****     else if (counterOpcao == 2) // Desligar Interrupt
 466              		.loc 1 162 27
 467 0032 0E4B     		ldr	r3, .L18+4
 468 0034 1B68     		ldr	r3, [r3]
 469              		.loc 1 162 13
 470 0036 022B     		cmp	r3, #2
 471 0038 09D1     		bne	.L17
 163:Core/Src/main.c ****     {
 164:Core/Src/main.c ****       HAL_TIM_Base_Stop_IT(&htim4);
 472              		.loc 1 164 7
 473 003a 0D48     		ldr	r0, .L18+8
 474 003c FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 165:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 475              		.loc 1 165 7
 476 0040 0022     		movs	r2, #0
 477 0042 4FF48071 		mov	r1, #256
 478 0046 0B48     		ldr	r0, .L18+12
 479 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 480 004c 06E0     		b	.L15
 481              	.L17:
 166:Core/Src/main.c ****     }
 167:Core/Src/main.c ****     else if(counterOpcao == 0)
 482              		.loc 1 167 26
 483 004e 074B     		ldr	r3, .L18+4
 484 0050 1B68     		ldr	r3, [r3]
 485              		.loc 1 167 12
 486 0052 002B     		cmp	r3, #0
 487 0054 02D1     		bne	.L15
 168:Core/Src/main.c ****     {
 169:Core/Src/main.c ****       MenuAtual = 0;
 488              		.loc 1 169 17
 489 0056 044B     		ldr	r3, .L18
 490 0058 0022     		movs	r2, #0
 491 005a 1A60     		str	r2, [r3]
 492              	.L15:
 170:Core/Src/main.c ****     }
 171:Core/Src/main.c ****   }
 172:Core/Src/main.c ****   
 173:Core/Src/main.c ****   
 174:Core/Src/main.c ****   counterPrev = 99; // Forca a atualizar a tela
 493              		.loc 1 174 15
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 13


 494 005c 064B     		ldr	r3, .L18+16
 495 005e 6322     		movs	r2, #99
 496 0060 1A60     		str	r2, [r3]
 175:Core/Src/main.c ****   
 176:Core/Src/main.c ****   
 177:Core/Src/main.c **** }
 497              		.loc 1 177 1
 498 0062 00BF     		nop
 499 0064 80BD     		pop	{r7, pc}
 500              	.L19:
 501 0066 00BF     		.align	2
 502              	.L18:
 503 0068 00000000 		.word	MenuAtual
 504 006c 00000000 		.word	counterOpcao
 505 0070 00000000 		.word	htim4
 506 0074 00080140 		.word	1073809408
 507 0078 00000000 		.word	counterPrev
 508              		.cfi_endproc
 509              	.LFE67:
 511              		.global	__aeabi_ui2d
 512              		.global	__aeabi_dmul
 513              		.global	__aeabi_ddiv
 514              		.global	__aeabi_d2f
 515              		.global	__aeabi_fcmplt
 516              		.section	.text.main,"ax",%progbits
 517              		.align	1
 518              		.global	main
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 522              		.fpu softvfp
 524              	main:
 525              	.LFB68:
 178:Core/Src/main.c **** /* USER CODE END PFP */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 181:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** /* USER CODE END 0 */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****   * @brief  The application entry point.
 187:Core/Src/main.c ****   * @retval int
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** int main(void)
 190:Core/Src/main.c **** {
 526              		.loc 1 190 1
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 16
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530 0000 80B5     		push	{r7, lr}
 531              	.LCFI9:
 532              		.cfi_def_cfa_offset 8
 533              		.cfi_offset 7, -8
 534              		.cfi_offset 14, -4
 535 0002 84B0     		sub	sp, sp, #16
 536              	.LCFI10:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 14


 537              		.cfi_def_cfa_offset 24
 538 0004 00AF     		add	r7, sp, #0
 539              	.LCFI11:
 540              		.cfi_def_cfa_register 7
 191:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 192:Core/Src/main.c ****   /*uint32_t i;
 193:Core/Src/main.c ****   float Temp;
 194:Core/Src/main.c ****   uint32_t counter = 0;*/
 195:Core/Src/main.c ****   GPIO_PinState aState;
 196:Core/Src/main.c ****   GPIO_PinState aLastState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 541              		.loc 1 196 30
 542 0006 4021     		movs	r1, #64
 543 0008 5548     		ldr	r0, .L32+24
 544 000a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 545 000e 0346     		mov	r3, r0
 546 0010 FB73     		strb	r3, [r7, #15]
 197:Core/Src/main.c ****   uint32_t counter = 0;
 547              		.loc 1 197 12
 548 0012 0023     		movs	r3, #0
 549 0014 BB60     		str	r3, [r7, #8]
 198:Core/Src/main.c ****   
 199:Core/Src/main.c ****   
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE END 1 */
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 206:Core/Src/main.c ****   HAL_Init();
 550              		.loc 1 206 3
 551 0016 FFF7FEFF 		bl	HAL_Init
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE END Init */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Configure the system clock */
 213:Core/Src/main.c ****   SystemClock_Config();
 552              		.loc 1 213 3
 553 001a FFF7FEFF 		bl	SystemClock_Config
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /* USER CODE END SysInit */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* Initialize all configured peripherals */
 220:Core/Src/main.c ****   MX_GPIO_Init();
 554              		.loc 1 220 3
 555 001e FFF7FEFF 		bl	MX_GPIO_Init
 221:Core/Src/main.c ****   MX_I2C1_Init();
 556              		.loc 1 221 3
 557 0022 FFF7FEFF 		bl	MX_I2C1_Init
 222:Core/Src/main.c ****   MX_TIM4_Init();
 558              		.loc 1 222 3
 559 0026 FFF7FEFF 		bl	MX_TIM4_Init
 223:Core/Src/main.c ****   MX_ADC1_Init();
 560              		.loc 1 223 3
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 15


 561 002a FFF7FEFF 		bl	MX_ADC1_Init
 224:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   
 227:Core/Src/main.c ****   /* USER CODE END 2 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* Infinite loop */
 230:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 231:Core/Src/main.c ****   SSD1306_Init();
 562              		.loc 1 231 3
 563 002e FFF7FEFF 		bl	SSD1306_Init
 232:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 564              		.loc 1 232 3
 565 0032 0122     		movs	r2, #1
 566 0034 1021     		movs	r1, #16
 567 0036 4B48     		ldr	r0, .L32+28
 568 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 569              	.L29:
 233:Core/Src/main.c ****   
 234:Core/Src/main.c ****   
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   while (1)
 237:Core/Src/main.c ****   {
 238:Core/Src/main.c ****     
 239:Core/Src/main.c ****     /*if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET)
 240:Core/Src/main.c ****     {
 241:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 242:Core/Src/main.c ****     }
 243:Core/Src/main.c ****     else
 244:Core/Src/main.c ****     {
 245:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 246:Core/Src/main.c ****     }*/
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****     // Contador Rot Button
 249:Core/Src/main.c ****     aState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 570              		.loc 1 249 14
 571 003c 4021     		movs	r1, #64
 572 003e 4848     		ldr	r0, .L32+24
 573 0040 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 574 0044 0346     		mov	r3, r0
 575 0046 FB71     		strb	r3, [r7, #7]
 250:Core/Src/main.c ****     if (aState != aLastState)
 576              		.loc 1 250 8
 577 0048 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 578 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 579 004c 9A42     		cmp	r2, r3
 580 004e 1DD0     		beq	.L21
 251:Core/Src/main.c ****     {
 252:Core/Src/main.c ****       if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) != aState)
 581              		.loc 1 252 11
 582 0050 8021     		movs	r1, #128
 583 0052 4348     		ldr	r0, .L32+24
 584 0054 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 585 0058 0346     		mov	r3, r0
 586 005a 1A46     		mov	r2, r3
 587              		.loc 1 252 10
 588 005c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 16


 589 005e 9342     		cmp	r3, r2
 590 0060 03D0     		beq	.L22
 253:Core/Src/main.c ****       {
 254:Core/Src/main.c ****         counter--; // Sentido Horario
 591              		.loc 1 254 16
 592 0062 BB68     		ldr	r3, [r7, #8]
 593 0064 013B     		subs	r3, r3, #1
 594 0066 BB60     		str	r3, [r7, #8]
 595 0068 02E0     		b	.L23
 596              	.L22:
 255:Core/Src/main.c ****       }
 256:Core/Src/main.c ****       else
 257:Core/Src/main.c ****       {
 258:Core/Src/main.c ****         counter++; // Sentido Anti Horario
 597              		.loc 1 258 16
 598 006a BB68     		ldr	r3, [r7, #8]
 599 006c 0133     		adds	r3, r3, #1
 600 006e BB60     		str	r3, [r7, #8]
 601              	.L23:
 259:Core/Src/main.c ****       }
 260:Core/Src/main.c ****       if (counter % 2 == 0)
 602              		.loc 1 260 19
 603 0070 BB68     		ldr	r3, [r7, #8]
 604 0072 03F00103 		and	r3, r3, #1
 605              		.loc 1 260 10
 606 0076 002B     		cmp	r3, #0
 607 0078 03D1     		bne	.L24
 261:Core/Src/main.c ****       {
 262:Core/Src/main.c ****         counterOpcao = counter/2;
 608              		.loc 1 262 31
 609 007a BB68     		ldr	r3, [r7, #8]
 610 007c 5B08     		lsrs	r3, r3, #1
 611              		.loc 1 262 22
 612 007e 3A4A     		ldr	r2, .L32+32
 613 0080 1360     		str	r3, [r2]
 614              	.L24:
 263:Core/Src/main.c ****       }
 264:Core/Src/main.c ****       if(counter>100)
 615              		.loc 1 264 9
 616 0082 BB68     		ldr	r3, [r7, #8]
 617 0084 642B     		cmp	r3, #100
 618 0086 01D9     		bls	.L21
 265:Core/Src/main.c ****       {
 266:Core/Src/main.c ****         counter = 0;
 619              		.loc 1 266 17
 620 0088 0023     		movs	r3, #0
 621 008a BB60     		str	r3, [r7, #8]
 622              	.L21:
 267:Core/Src/main.c ****       }
 268:Core/Src/main.c ****     }
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****     aLastState = aState;
 623              		.loc 1 270 16
 624 008c FB79     		ldrb	r3, [r7, #7]
 625 008e FB73     		strb	r3, [r7, #15]
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** 
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 17


 273:Core/Src/main.c ****     // OLED
 274:Core/Src/main.c ****     /*
 275:Core/Src/main.c ****     MenuHandler();
 276:Core/Src/main.c ****     if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 277:Core/Src/main.c ****     {
 278:Core/Src/main.c ****       ClickHandler();
 279:Core/Src/main.c ****     }
 280:Core/Src/main.c ****     */
 281:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 626              		.loc 1 281 5
 627 0090 3648     		ldr	r0, .L32+36
 628 0092 FFF7FEFF 		bl	HAL_ADC_Start
 282:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1,100);
 629              		.loc 1 282 5
 630 0096 6421     		movs	r1, #100
 631 0098 3448     		ldr	r0, .L32+36
 632 009a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 283:Core/Src/main.c ****     TempVolts = HAL_ADC_GetValue(&hadc1);
 633              		.loc 1 283 17
 634 009e 3348     		ldr	r0, .L32+36
 635 00a0 FFF7FEFF 		bl	HAL_ADC_GetValue
 636 00a4 0346     		mov	r3, r0
 637              		.loc 1 283 15
 638 00a6 324A     		ldr	r2, .L32+40
 639 00a8 1360     		str	r3, [r2]
 284:Core/Src/main.c ****     TempCelsius = ((TempVolts * 1.1 / (4095)) / 0.01);
 640              		.loc 1 284 31
 641 00aa 314B     		ldr	r3, .L32+40
 642 00ac 1B68     		ldr	r3, [r3]
 643 00ae 1846     		mov	r0, r3
 644 00b0 FFF7FEFF 		bl	__aeabi_ui2d
 645 00b4 24A3     		adr	r3, .L32
 646 00b6 D3E90023 		ldrd	r2, [r3]
 647 00ba FFF7FEFF 		bl	__aeabi_dmul
 648 00be 0246     		mov	r2, r0
 649 00c0 0B46     		mov	r3, r1
 650 00c2 1046     		mov	r0, r2
 651 00c4 1946     		mov	r1, r3
 652              		.loc 1 284 37
 653 00c6 22A3     		adr	r3, .L32+8
 654 00c8 D3E90023 		ldrd	r2, [r3]
 655 00cc FFF7FEFF 		bl	__aeabi_ddiv
 656 00d0 0246     		mov	r2, r0
 657 00d2 0B46     		mov	r3, r1
 658 00d4 1046     		mov	r0, r2
 659 00d6 1946     		mov	r1, r3
 660              		.loc 1 284 47
 661 00d8 1FA3     		adr	r3, .L32+16
 662 00da D3E90023 		ldrd	r2, [r3]
 663 00de FFF7FEFF 		bl	__aeabi_ddiv
 664 00e2 0246     		mov	r2, r0
 665 00e4 0B46     		mov	r3, r1
 666 00e6 1046     		mov	r0, r2
 667 00e8 1946     		mov	r1, r3
 668 00ea FFF7FEFF 		bl	__aeabi_d2f
 669 00ee 0346     		mov	r3, r0
 670              		.loc 1 284 17
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 18


 671 00f0 204A     		ldr	r2, .L32+44
 672 00f2 1360     		str	r3, [r2]	@ float
 285:Core/Src/main.c ****     MenuHandler();
 673              		.loc 1 285 5
 674 00f4 FFF7FEFF 		bl	MenuHandler
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****     if(TempCelsius<20.0)
 675              		.loc 1 287 19
 676 00f8 1E4B     		ldr	r3, .L32+44
 677 00fa 1B68     		ldr	r3, [r3]	@ float
 678              		.loc 1 287 7
 679 00fc 1E49     		ldr	r1, .L32+48
 680 00fe 1846     		mov	r0, r3
 681 0100 FFF7FEFF 		bl	__aeabi_fcmplt
 682 0104 0346     		mov	r3, r0
 683 0106 002B     		cmp	r3, #0
 684 0108 06D0     		beq	.L31
 288:Core/Src/main.c ****     {
 289:Core/Src/main.c ****       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 290:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 685              		.loc 1 290 7
 686 010a 0122     		movs	r2, #1
 687 010c 4FF40051 		mov	r1, #8192
 688 0110 1A48     		ldr	r0, .L32+52
 689 0112 FFF7FEFF 		bl	HAL_GPIO_WritePin
 690 0116 0AE0     		b	.L27
 691              	.L31:
 291:Core/Src/main.c ****     }
 292:Core/Src/main.c ****     else
 293:Core/Src/main.c ****     {
 294:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 692              		.loc 1 294 7
 693 0118 0022     		movs	r2, #0
 694 011a 0221     		movs	r1, #2
 695 011c 1048     		ldr	r0, .L32+24
 696 011e FFF7FEFF 		bl	HAL_GPIO_WritePin
 295:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 697              		.loc 1 295 7
 698 0122 0022     		movs	r2, #0
 699 0124 4FF40051 		mov	r1, #8192
 700 0128 1448     		ldr	r0, .L32+52
 701 012a FFF7FEFF 		bl	HAL_GPIO_WritePin
 702              	.L27:
 296:Core/Src/main.c ****     }
 297:Core/Src/main.c ****     
 298:Core/Src/main.c ****   
 299:Core/Src/main.c ****     if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 703              		.loc 1 299 8
 704 012e 4FF48061 		mov	r1, #1024
 705 0132 0C48     		ldr	r0, .L32+28
 706 0134 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 707 0138 0346     		mov	r3, r0
 708              		.loc 1 299 7
 709 013a 002B     		cmp	r3, #0
 710 013c 3FF47EAF 		beq	.L29
 300:Core/Src/main.c ****     {
 301:Core/Src/main.c ****       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 19


 302:Core/Src/main.c ****       ClickHandler();
 711              		.loc 1 302 7
 712 0140 FFF7FEFF 		bl	ClickHandler
 249:Core/Src/main.c ****     if (aState != aLastState)
 713              		.loc 1 249 12
 714 0144 7AE7     		b	.L29
 715              	.L33:
 716 0146 00BF     		.align	3
 717              	.L32:
 718 0148 9A999999 		.word	-1717986918
 719 014c 9999F13F 		.word	1072798105
 720 0150 00000000 		.word	0
 721 0154 00FEAF40 		.word	1085275648
 722 0158 7B14AE47 		.word	1202590843
 723 015c E17A843F 		.word	1065646817
 724 0160 00080140 		.word	1073809408
 725 0164 000C0140 		.word	1073810432
 726 0168 00000000 		.word	counterOpcao
 727 016c 00000000 		.word	hadc1
 728 0170 00000000 		.word	TempVolts
 729 0174 00000000 		.word	TempCelsius
 730 0178 0000A041 		.word	1101004800
 731 017c 00100140 		.word	1073811456
 732              		.cfi_endproc
 733              	.LFE68:
 735              		.section	.text.SystemClock_Config,"ax",%progbits
 736              		.align	1
 737              		.global	SystemClock_Config
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu softvfp
 743              	SystemClock_Config:
 744              	.LFB69:
 303:Core/Src/main.c ****     }
 304:Core/Src/main.c ****     else
 305:Core/Src/main.c ****     {
 306:Core/Src/main.c ****       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 307:Core/Src/main.c ****     }
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****     //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 310:Core/Src/main.c ****     //HAL_Delay(1);
 311:Core/Src/main.c ****     //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 312:Core/Src/main.c ****     //HAL_Delay(1);
 313:Core/Src/main.c ****     
 314:Core/Src/main.c ****     
 315:Core/Src/main.c ****     // update screen
 316:Core/Src/main.c ****     /*for (i = 0; i < 8; i++)
 317:Core/Src/main.c ****     {
 318:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 319:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 320:Core/Src/main.c ****       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 321:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 322:Core/Src/main.c ****       HAL_Delay(2500);
 323:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 324:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 325:Core/Src/main.c ****       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 20


 326:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 327:Core/Src/main.c ****       HAL_Delay(2500);
 328:Core/Src/main.c ****     }*/
 329:Core/Src/main.c ****     //HAL_Delay(800);
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****     /*Temp = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 332:Core/Src/main.c ****     Temp = ((Temp * 1.1 / (1023)) / 0.01);
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****     if (Temp < 25)
 335:Core/Src/main.c ****     {
 336:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 337:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 338:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 339:Core/Src/main.c ****     }
 340:Core/Src/main.c ****     else if (Temp >= 25 && Temp < 30)
 341:Core/Src/main.c ****     {
 342:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 343:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 344:Core/Src/main.c ****     }
 345:Core/Src/main.c ****     else if (Temp >= 30 && Temp < 35)
 346:Core/Src/main.c ****     {
 347:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 348:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 349:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 350:Core/Src/main.c ****     }
 351:Core/Src/main.c ****     else if (Temp >= 35 && Temp < 40)
 352:Core/Src/main.c ****     {
 353:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 354:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 355:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 356:Core/Src/main.c ****     }
 357:Core/Src/main.c ****     else
 358:Core/Src/main.c ****     {
 359:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 360:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 361:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 362:Core/Src/main.c ****     }*/
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****     /* USER CODE END WHILE */
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 367:Core/Src/main.c ****   }
 368:Core/Src/main.c ****   /* USER CODE END 3 */
 369:Core/Src/main.c **** }
 370:Core/Src/main.c **** 
 371:Core/Src/main.c **** /**
 372:Core/Src/main.c ****   * @brief System Clock Configuration
 373:Core/Src/main.c ****   * @retval None
 374:Core/Src/main.c ****   */
 375:Core/Src/main.c **** void SystemClock_Config(void)
 376:Core/Src/main.c **** {
 745              		.loc 1 376 1
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 80
 748              		@ frame_needed = 1, uses_anonymous_args = 0
 749 0000 80B5     		push	{r7, lr}
 750              	.LCFI12:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 21


 751              		.cfi_def_cfa_offset 8
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 94B0     		sub	sp, sp, #80
 755              	.LCFI13:
 756              		.cfi_def_cfa_offset 88
 757 0004 00AF     		add	r7, sp, #0
 758              	.LCFI14:
 759              		.cfi_def_cfa_register 7
 377:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 760              		.loc 1 377 22
 761 0006 07F12803 		add	r3, r7, #40
 762 000a 2822     		movs	r2, #40
 763 000c 0021     		movs	r1, #0
 764 000e 1846     		mov	r0, r3
 765 0010 FFF7FEFF 		bl	memset
 378:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 766              		.loc 1 378 22
 767 0014 07F11403 		add	r3, r7, #20
 768 0018 0022     		movs	r2, #0
 769 001a 1A60     		str	r2, [r3]
 770 001c 5A60     		str	r2, [r3, #4]
 771 001e 9A60     		str	r2, [r3, #8]
 772 0020 DA60     		str	r2, [r3, #12]
 773 0022 1A61     		str	r2, [r3, #16]
 379:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 774              		.loc 1 379 28
 775 0024 3B1D     		adds	r3, r7, #4
 776 0026 0022     		movs	r2, #0
 777 0028 1A60     		str	r2, [r3]
 778 002a 5A60     		str	r2, [r3, #4]
 779 002c 9A60     		str	r2, [r3, #8]
 780 002e DA60     		str	r2, [r3, #12]
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 382:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 383:Core/Src/main.c ****   */
 384:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 781              		.loc 1 384 36
 782 0030 0123     		movs	r3, #1
 783 0032 BB62     		str	r3, [r7, #40]
 385:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 784              		.loc 1 385 30
 785 0034 4FF48033 		mov	r3, #65536
 786 0038 FB62     		str	r3, [r7, #44]
 386:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 787              		.loc 1 386 36
 788 003a 0023     		movs	r3, #0
 789 003c 3B63     		str	r3, [r7, #48]
 387:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 790              		.loc 1 387 30
 791 003e 0123     		movs	r3, #1
 792 0040 BB63     		str	r3, [r7, #56]
 388:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 793              		.loc 1 388 34
 794 0042 0223     		movs	r3, #2
 795 0044 7B64     		str	r3, [r7, #68]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 22


 389:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 796              		.loc 1 389 35
 797 0046 4FF48033 		mov	r3, #65536
 798 004a BB64     		str	r3, [r7, #72]
 390:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 799              		.loc 1 390 32
 800 004c 4FF4E013 		mov	r3, #1835008
 801 0050 FB64     		str	r3, [r7, #76]
 391:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802              		.loc 1 391 7
 803 0052 07F12803 		add	r3, r7, #40
 804 0056 1846     		mov	r0, r3
 805 0058 FFF7FEFF 		bl	HAL_RCC_OscConfig
 806 005c 0346     		mov	r3, r0
 807              		.loc 1 391 6
 808 005e 002B     		cmp	r3, #0
 809 0060 01D0     		beq	.L35
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****     Error_Handler();
 810              		.loc 1 393 5
 811 0062 FFF7FEFF 		bl	Error_Handler
 812              	.L35:
 394:Core/Src/main.c ****   }
 395:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 396:Core/Src/main.c ****   */
 397:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 813              		.loc 1 397 31
 814 0066 0F23     		movs	r3, #15
 815 0068 7B61     		str	r3, [r7, #20]
 398:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 399:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 816              		.loc 1 399 34
 817 006a 0223     		movs	r3, #2
 818 006c BB61     		str	r3, [r7, #24]
 400:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 819              		.loc 1 400 35
 820 006e 0023     		movs	r3, #0
 821 0070 FB61     		str	r3, [r7, #28]
 401:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 822              		.loc 1 401 36
 823 0072 4FF48063 		mov	r3, #1024
 824 0076 3B62     		str	r3, [r7, #32]
 402:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 825              		.loc 1 402 36
 826 0078 0023     		movs	r3, #0
 827 007a 7B62     		str	r3, [r7, #36]
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 828              		.loc 1 404 7
 829 007c 07F11403 		add	r3, r7, #20
 830 0080 0221     		movs	r1, #2
 831 0082 1846     		mov	r0, r3
 832 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 833 0088 0346     		mov	r3, r0
 834              		.loc 1 404 6
 835 008a 002B     		cmp	r3, #0
 836 008c 01D0     		beq	.L36
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 23


 405:Core/Src/main.c ****   {
 406:Core/Src/main.c ****     Error_Handler();
 837              		.loc 1 406 5
 838 008e FFF7FEFF 		bl	Error_Handler
 839              	.L36:
 407:Core/Src/main.c ****   }
 408:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 840              		.loc 1 408 38
 841 0092 0223     		movs	r3, #2
 842 0094 7B60     		str	r3, [r7, #4]
 409:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 843              		.loc 1 409 35
 844 0096 4FF40043 		mov	r3, #32768
 845 009a FB60     		str	r3, [r7, #12]
 410:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 846              		.loc 1 410 7
 847 009c 3B1D     		adds	r3, r7, #4
 848 009e 1846     		mov	r0, r3
 849 00a0 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 850 00a4 0346     		mov	r3, r0
 851              		.loc 1 410 6
 852 00a6 002B     		cmp	r3, #0
 853 00a8 01D0     		beq	.L38
 411:Core/Src/main.c ****   {
 412:Core/Src/main.c ****     Error_Handler();
 854              		.loc 1 412 5
 855 00aa FFF7FEFF 		bl	Error_Handler
 856              	.L38:
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c **** }
 857              		.loc 1 414 1
 858 00ae 00BF     		nop
 859 00b0 5037     		adds	r7, r7, #80
 860              	.LCFI15:
 861              		.cfi_def_cfa_offset 8
 862 00b2 BD46     		mov	sp, r7
 863              	.LCFI16:
 864              		.cfi_def_cfa_register 13
 865              		@ sp needed
 866 00b4 80BD     		pop	{r7, pc}
 867              		.cfi_endproc
 868              	.LFE69:
 870              		.section	.text.MX_ADC1_Init,"ax",%progbits
 871              		.align	1
 872              		.syntax unified
 873              		.thumb
 874              		.thumb_func
 875              		.fpu softvfp
 877              	MX_ADC1_Init:
 878              	.LFB70:
 415:Core/Src/main.c **** 
 416:Core/Src/main.c **** /**
 417:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 418:Core/Src/main.c ****   * @param None
 419:Core/Src/main.c ****   * @retval None
 420:Core/Src/main.c ****   */
 421:Core/Src/main.c **** static void MX_ADC1_Init(void)
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 24


 422:Core/Src/main.c **** {
 879              		.loc 1 422 1
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 16
 882              		@ frame_needed = 1, uses_anonymous_args = 0
 883 0000 80B5     		push	{r7, lr}
 884              	.LCFI17:
 885              		.cfi_def_cfa_offset 8
 886              		.cfi_offset 7, -8
 887              		.cfi_offset 14, -4
 888 0002 84B0     		sub	sp, sp, #16
 889              	.LCFI18:
 890              		.cfi_def_cfa_offset 24
 891 0004 00AF     		add	r7, sp, #0
 892              	.LCFI19:
 893              		.cfi_def_cfa_register 7
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 894              		.loc 1 428 26
 895 0006 3B1D     		adds	r3, r7, #4
 896 0008 0022     		movs	r2, #0
 897 000a 1A60     		str	r2, [r3]
 898 000c 5A60     		str	r2, [r3, #4]
 899 000e 9A60     		str	r2, [r3, #8]
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 433:Core/Src/main.c ****   /** Common config
 434:Core/Src/main.c ****   */
 435:Core/Src/main.c ****   hadc1.Instance = ADC1;
 900              		.loc 1 435 18
 901 0010 184B     		ldr	r3, .L43
 902 0012 194A     		ldr	r2, .L43+4
 903 0014 1A60     		str	r2, [r3]
 436:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 904              		.loc 1 436 27
 905 0016 174B     		ldr	r3, .L43
 906 0018 0022     		movs	r2, #0
 907 001a 9A60     		str	r2, [r3, #8]
 437:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 908              		.loc 1 437 33
 909 001c 154B     		ldr	r3, .L43
 910 001e 0022     		movs	r2, #0
 911 0020 1A73     		strb	r2, [r3, #12]
 438:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 912              		.loc 1 438 36
 913 0022 144B     		ldr	r3, .L43
 914 0024 0022     		movs	r2, #0
 915 0026 1A75     		strb	r2, [r3, #20]
 439:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 916              		.loc 1 439 31
 917 0028 124B     		ldr	r3, .L43
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 25


 918 002a 4FF46022 		mov	r2, #917504
 919 002e DA61     		str	r2, [r3, #28]
 440:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 920              		.loc 1 440 24
 921 0030 104B     		ldr	r3, .L43
 922 0032 0022     		movs	r2, #0
 923 0034 5A60     		str	r2, [r3, #4]
 441:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 924              		.loc 1 441 30
 925 0036 0F4B     		ldr	r3, .L43
 926 0038 0122     		movs	r2, #1
 927 003a 1A61     		str	r2, [r3, #16]
 442:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 928              		.loc 1 442 7
 929 003c 0D48     		ldr	r0, .L43
 930 003e FFF7FEFF 		bl	HAL_ADC_Init
 931 0042 0346     		mov	r3, r0
 932              		.loc 1 442 6
 933 0044 002B     		cmp	r3, #0
 934 0046 01D0     		beq	.L40
 443:Core/Src/main.c ****   {
 444:Core/Src/main.c ****     Error_Handler();
 935              		.loc 1 444 5
 936 0048 FFF7FEFF 		bl	Error_Handler
 937              	.L40:
 445:Core/Src/main.c ****   }
 446:Core/Src/main.c ****   /** Configure Regular Channel
 447:Core/Src/main.c ****   */
 448:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_3;
 938              		.loc 1 448 19
 939 004c 0323     		movs	r3, #3
 940 004e 7B60     		str	r3, [r7, #4]
 449:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 941              		.loc 1 449 16
 942 0050 0123     		movs	r3, #1
 943 0052 BB60     		str	r3, [r7, #8]
 450:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 944              		.loc 1 450 24
 945 0054 0023     		movs	r3, #0
 946 0056 FB60     		str	r3, [r7, #12]
 451:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 947              		.loc 1 451 7
 948 0058 3B1D     		adds	r3, r7, #4
 949 005a 1946     		mov	r1, r3
 950 005c 0548     		ldr	r0, .L43
 951 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 952 0062 0346     		mov	r3, r0
 953              		.loc 1 451 6
 954 0064 002B     		cmp	r3, #0
 955 0066 01D0     		beq	.L42
 452:Core/Src/main.c ****   {
 453:Core/Src/main.c ****     Error_Handler();
 956              		.loc 1 453 5
 957 0068 FFF7FEFF 		bl	Error_Handler
 958              	.L42:
 454:Core/Src/main.c ****   }
 455:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 26


 456:Core/Src/main.c **** 
 457:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 458:Core/Src/main.c **** 
 459:Core/Src/main.c **** }
 959              		.loc 1 459 1
 960 006c 00BF     		nop
 961 006e 1037     		adds	r7, r7, #16
 962              	.LCFI20:
 963              		.cfi_def_cfa_offset 8
 964 0070 BD46     		mov	sp, r7
 965              	.LCFI21:
 966              		.cfi_def_cfa_register 13
 967              		@ sp needed
 968 0072 80BD     		pop	{r7, pc}
 969              	.L44:
 970              		.align	2
 971              	.L43:
 972 0074 00000000 		.word	hadc1
 973 0078 00240140 		.word	1073816576
 974              		.cfi_endproc
 975              	.LFE70:
 977              		.section	.text.MX_I2C1_Init,"ax",%progbits
 978              		.align	1
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 982              		.fpu softvfp
 984              	MX_I2C1_Init:
 985              	.LFB71:
 460:Core/Src/main.c **** 
 461:Core/Src/main.c **** /**
 462:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 463:Core/Src/main.c ****   * @param None
 464:Core/Src/main.c ****   * @retval None
 465:Core/Src/main.c ****   */
 466:Core/Src/main.c **** static void MX_I2C1_Init(void)
 467:Core/Src/main.c **** {
 986              		.loc 1 467 1
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990 0000 80B5     		push	{r7, lr}
 991              	.LCFI22:
 992              		.cfi_def_cfa_offset 8
 993              		.cfi_offset 7, -8
 994              		.cfi_offset 14, -4
 995 0002 00AF     		add	r7, sp, #0
 996              	.LCFI23:
 997              		.cfi_def_cfa_register 7
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 472:Core/Src/main.c **** 
 473:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 27


 476:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 998              		.loc 1 476 18
 999 0004 124B     		ldr	r3, .L48
 1000 0006 134A     		ldr	r2, .L48+4
 1001 0008 1A60     		str	r2, [r3]
 477:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
 1002              		.loc 1 477 25
 1003 000a 114B     		ldr	r3, .L48
 1004 000c 124A     		ldr	r2, .L48+8
 1005 000e 5A60     		str	r2, [r3, #4]
 478:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1006              		.loc 1 478 24
 1007 0010 0F4B     		ldr	r3, .L48
 1008 0012 0022     		movs	r2, #0
 1009 0014 9A60     		str	r2, [r3, #8]
 479:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1010              		.loc 1 479 26
 1011 0016 0E4B     		ldr	r3, .L48
 1012 0018 0022     		movs	r2, #0
 1013 001a DA60     		str	r2, [r3, #12]
 480:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1014              		.loc 1 480 29
 1015 001c 0C4B     		ldr	r3, .L48
 1016 001e 4FF48042 		mov	r2, #16384
 1017 0022 1A61     		str	r2, [r3, #16]
 481:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1018              		.loc 1 481 30
 1019 0024 0A4B     		ldr	r3, .L48
 1020 0026 0022     		movs	r2, #0
 1021 0028 5A61     		str	r2, [r3, #20]
 482:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1022              		.loc 1 482 26
 1023 002a 094B     		ldr	r3, .L48
 1024 002c 0022     		movs	r2, #0
 1025 002e 9A61     		str	r2, [r3, #24]
 483:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1026              		.loc 1 483 30
 1027 0030 074B     		ldr	r3, .L48
 1028 0032 0022     		movs	r2, #0
 1029 0034 DA61     		str	r2, [r3, #28]
 484:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1030              		.loc 1 484 28
 1031 0036 064B     		ldr	r3, .L48
 1032 0038 0022     		movs	r2, #0
 1033 003a 1A62     		str	r2, [r3, #32]
 485:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1034              		.loc 1 485 7
 1035 003c 0448     		ldr	r0, .L48
 1036 003e FFF7FEFF 		bl	HAL_I2C_Init
 1037 0042 0346     		mov	r3, r0
 1038              		.loc 1 485 6
 1039 0044 002B     		cmp	r3, #0
 1040 0046 01D0     		beq	.L47
 486:Core/Src/main.c ****   {
 487:Core/Src/main.c ****     Error_Handler();
 1041              		.loc 1 487 5
 1042 0048 FFF7FEFF 		bl	Error_Handler
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 28


 1043              	.L47:
 488:Core/Src/main.c ****   }
 489:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 492:Core/Src/main.c **** 
 493:Core/Src/main.c **** }
 1044              		.loc 1 493 1
 1045 004c 00BF     		nop
 1046 004e 80BD     		pop	{r7, pc}
 1047              	.L49:
 1048              		.align	2
 1049              	.L48:
 1050 0050 00000000 		.word	hi2c1
 1051 0054 00540040 		.word	1073763328
 1052 0058 801A0600 		.word	400000
 1053              		.cfi_endproc
 1054              	.LFE71:
 1056              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1057              		.align	1
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1061              		.fpu softvfp
 1063              	MX_TIM4_Init:
 1064              	.LFB72:
 494:Core/Src/main.c **** 
 495:Core/Src/main.c **** /**
 496:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 497:Core/Src/main.c ****   * @param None
 498:Core/Src/main.c ****   * @retval None
 499:Core/Src/main.c ****   */
 500:Core/Src/main.c **** static void MX_TIM4_Init(void)
 501:Core/Src/main.c **** {
 1065              		.loc 1 501 1
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 24
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069 0000 80B5     		push	{r7, lr}
 1070              	.LCFI24:
 1071              		.cfi_def_cfa_offset 8
 1072              		.cfi_offset 7, -8
 1073              		.cfi_offset 14, -4
 1074 0002 86B0     		sub	sp, sp, #24
 1075              	.LCFI25:
 1076              		.cfi_def_cfa_offset 32
 1077 0004 00AF     		add	r7, sp, #0
 1078              	.LCFI26:
 1079              		.cfi_def_cfa_register 7
 502:Core/Src/main.c **** 
 503:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 504:Core/Src/main.c **** 
 505:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 506:Core/Src/main.c **** 
 507:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 1080              		.loc 1 507 26
 1081 0006 07F10803 		add	r3, r7, #8
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 29


 1082 000a 0022     		movs	r2, #0
 1083 000c 1A60     		str	r2, [r3]
 1084 000e 5A60     		str	r2, [r3, #4]
 1085 0010 9A60     		str	r2, [r3, #8]
 1086 0012 DA60     		str	r2, [r3, #12]
 508:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1087              		.loc 1 508 27
 1088 0014 3B46     		mov	r3, r7
 1089 0016 0022     		movs	r2, #0
 1090 0018 1A60     		str	r2, [r3]
 1091 001a 5A60     		str	r2, [r3, #4]
 509:Core/Src/main.c **** 
 510:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 511:Core/Src/main.c **** 
 512:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 513:Core/Src/main.c ****   htim4.Instance = TIM4;
 1092              		.loc 1 513 18
 1093 001c 1D4B     		ldr	r3, .L55
 1094 001e 1E4A     		ldr	r2, .L55+4
 1095 0020 1A60     		str	r2, [r3]
 514:Core/Src/main.c ****   htim4.Init.Prescaler = 7200-1;
 1096              		.loc 1 514 24
 1097 0022 1C4B     		ldr	r3, .L55
 1098 0024 41F61F42 		movw	r2, #7199
 1099 0028 5A60     		str	r2, [r3, #4]
 515:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1100              		.loc 1 515 26
 1101 002a 1A4B     		ldr	r3, .L55
 1102 002c 0022     		movs	r2, #0
 1103 002e 9A60     		str	r2, [r3, #8]
 516:Core/Src/main.c ****   htim4.Init.Period = 10000;
 1104              		.loc 1 516 21
 1105 0030 184B     		ldr	r3, .L55
 1106 0032 42F21072 		movw	r2, #10000
 1107 0036 DA60     		str	r2, [r3, #12]
 517:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1108              		.loc 1 517 28
 1109 0038 164B     		ldr	r3, .L55
 1110 003a 0022     		movs	r2, #0
 1111 003c 1A61     		str	r2, [r3, #16]
 518:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1112              		.loc 1 518 32
 1113 003e 154B     		ldr	r3, .L55
 1114 0040 0022     		movs	r2, #0
 1115 0042 9A61     		str	r2, [r3, #24]
 519:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 1116              		.loc 1 519 7
 1117 0044 1348     		ldr	r0, .L55
 1118 0046 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1119 004a 0346     		mov	r3, r0
 1120              		.loc 1 519 6
 1121 004c 002B     		cmp	r3, #0
 1122 004e 01D0     		beq	.L51
 520:Core/Src/main.c ****   {
 521:Core/Src/main.c ****     Error_Handler();
 1123              		.loc 1 521 5
 1124 0050 FFF7FEFF 		bl	Error_Handler
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 30


 1125              	.L51:
 522:Core/Src/main.c ****   }
 523:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 1126              		.loc 1 523 34
 1127 0054 4FF48053 		mov	r3, #4096
 1128 0058 BB60     		str	r3, [r7, #8]
 524:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 1129              		.loc 1 524 7
 1130 005a 07F10803 		add	r3, r7, #8
 1131 005e 1946     		mov	r1, r3
 1132 0060 0C48     		ldr	r0, .L55
 1133 0062 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1134 0066 0346     		mov	r3, r0
 1135              		.loc 1 524 6
 1136 0068 002B     		cmp	r3, #0
 1137 006a 01D0     		beq	.L52
 525:Core/Src/main.c ****   {
 526:Core/Src/main.c ****     Error_Handler();
 1138              		.loc 1 526 5
 1139 006c FFF7FEFF 		bl	Error_Handler
 1140              	.L52:
 527:Core/Src/main.c ****   }
 528:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 1141              		.loc 1 528 37
 1142 0070 0023     		movs	r3, #0
 1143 0072 3B60     		str	r3, [r7]
 529:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1144              		.loc 1 529 33
 1145 0074 0023     		movs	r3, #0
 1146 0076 7B60     		str	r3, [r7, #4]
 530:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 1147              		.loc 1 530 7
 1148 0078 3B46     		mov	r3, r7
 1149 007a 1946     		mov	r1, r3
 1150 007c 0548     		ldr	r0, .L55
 1151 007e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1152 0082 0346     		mov	r3, r0
 1153              		.loc 1 530 6
 1154 0084 002B     		cmp	r3, #0
 1155 0086 01D0     		beq	.L54
 531:Core/Src/main.c ****   {
 532:Core/Src/main.c ****     Error_Handler();
 1156              		.loc 1 532 5
 1157 0088 FFF7FEFF 		bl	Error_Handler
 1158              	.L54:
 533:Core/Src/main.c ****   }
 534:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 535:Core/Src/main.c **** 
 536:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 537:Core/Src/main.c **** 
 538:Core/Src/main.c **** }
 1159              		.loc 1 538 1
 1160 008c 00BF     		nop
 1161 008e 1837     		adds	r7, r7, #24
 1162              	.LCFI27:
 1163              		.cfi_def_cfa_offset 8
 1164 0090 BD46     		mov	sp, r7
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 31


 1165              	.LCFI28:
 1166              		.cfi_def_cfa_register 13
 1167              		@ sp needed
 1168 0092 80BD     		pop	{r7, pc}
 1169              	.L56:
 1170              		.align	2
 1171              	.L55:
 1172 0094 00000000 		.word	htim4
 1173 0098 00080040 		.word	1073743872
 1174              		.cfi_endproc
 1175              	.LFE72:
 1177              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1178              		.align	1
 1179              		.syntax unified
 1180              		.thumb
 1181              		.thumb_func
 1182              		.fpu softvfp
 1184              	MX_GPIO_Init:
 1185              	.LFB73:
 539:Core/Src/main.c **** 
 540:Core/Src/main.c **** /**
 541:Core/Src/main.c ****   * @brief GPIO Initialization Function
 542:Core/Src/main.c ****   * @param None
 543:Core/Src/main.c ****   * @retval None
 544:Core/Src/main.c ****   */
 545:Core/Src/main.c **** static void MX_GPIO_Init(void)
 546:Core/Src/main.c **** {
 1186              		.loc 1 546 1
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 32
 1189              		@ frame_needed = 1, uses_anonymous_args = 0
 1190 0000 80B5     		push	{r7, lr}
 1191              	.LCFI29:
 1192              		.cfi_def_cfa_offset 8
 1193              		.cfi_offset 7, -8
 1194              		.cfi_offset 14, -4
 1195 0002 88B0     		sub	sp, sp, #32
 1196              	.LCFI30:
 1197              		.cfi_def_cfa_offset 40
 1198 0004 00AF     		add	r7, sp, #0
 1199              	.LCFI31:
 1200              		.cfi_def_cfa_register 7
 547:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1201              		.loc 1 547 20
 1202 0006 07F11003 		add	r3, r7, #16
 1203 000a 0022     		movs	r2, #0
 1204 000c 1A60     		str	r2, [r3]
 1205 000e 5A60     		str	r2, [r3, #4]
 1206 0010 9A60     		str	r2, [r3, #8]
 1207 0012 DA60     		str	r2, [r3, #12]
 1208              	.LBB4:
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 550:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1209              		.loc 1 550 3
 1210 0014 4B4B     		ldr	r3, .L58
 1211 0016 9B69     		ldr	r3, [r3, #24]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 32


 1212 0018 4A4A     		ldr	r2, .L58
 1213 001a 43F01003 		orr	r3, r3, #16
 1214 001e 9361     		str	r3, [r2, #24]
 1215 0020 484B     		ldr	r3, .L58
 1216 0022 9B69     		ldr	r3, [r3, #24]
 1217 0024 03F01003 		and	r3, r3, #16
 1218 0028 FB60     		str	r3, [r7, #12]
 1219 002a FB68     		ldr	r3, [r7, #12]
 1220              	.LBE4:
 1221              	.LBB5:
 551:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 1222              		.loc 1 551 3
 1223 002c 454B     		ldr	r3, .L58
 1224 002e 9B69     		ldr	r3, [r3, #24]
 1225 0030 444A     		ldr	r2, .L58
 1226 0032 43F02003 		orr	r3, r3, #32
 1227 0036 9361     		str	r3, [r2, #24]
 1228 0038 424B     		ldr	r3, .L58
 1229 003a 9B69     		ldr	r3, [r3, #24]
 1230 003c 03F02003 		and	r3, r3, #32
 1231 0040 BB60     		str	r3, [r7, #8]
 1232 0042 BB68     		ldr	r3, [r7, #8]
 1233              	.LBE5:
 1234              	.LBB6:
 552:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 1235              		.loc 1 552 3
 1236 0044 3F4B     		ldr	r3, .L58
 1237 0046 9B69     		ldr	r3, [r3, #24]
 1238 0048 3E4A     		ldr	r2, .L58
 1239 004a 43F00403 		orr	r3, r3, #4
 1240 004e 9361     		str	r3, [r2, #24]
 1241 0050 3C4B     		ldr	r3, .L58
 1242 0052 9B69     		ldr	r3, [r3, #24]
 1243 0054 03F00403 		and	r3, r3, #4
 1244 0058 7B60     		str	r3, [r7, #4]
 1245 005a 7B68     		ldr	r3, [r7, #4]
 1246              	.LBE6:
 1247              	.LBB7:
 553:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1248              		.loc 1 553 3
 1249 005c 394B     		ldr	r3, .L58
 1250 005e 9B69     		ldr	r3, [r3, #24]
 1251 0060 384A     		ldr	r2, .L58
 1252 0062 43F00803 		orr	r3, r3, #8
 1253 0066 9361     		str	r3, [r2, #24]
 1254 0068 364B     		ldr	r3, .L58
 1255 006a 9B69     		ldr	r3, [r3, #24]
 1256 006c 03F00803 		and	r3, r3, #8
 1257 0070 3B60     		str	r3, [r7]
 1258 0072 3B68     		ldr	r3, [r7]
 1259              	.LBE7:
 554:Core/Src/main.c **** 
 555:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 556:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 1260              		.loc 1 556 3
 1261 0074 0022     		movs	r2, #0
 1262 0076 4FF40051 		mov	r1, #8192
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 33


 1263 007a 3348     		ldr	r0, .L58+4
 1264 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 557:Core/Src/main.c **** 
 558:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 559:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 1265              		.loc 1 559 3
 1266 0080 0022     		movs	r2, #0
 1267 0082 40F20251 		movw	r1, #1282
 1268 0086 3148     		ldr	r0, .L58+8
 1269 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 562:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 1270              		.loc 1 562 3
 1271 008c 0022     		movs	r2, #0
 1272 008e 1821     		movs	r1, #24
 1273 0090 2F48     		ldr	r0, .L58+12
 1274 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 565:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 1275              		.loc 1 565 23
 1276 0096 4FF40053 		mov	r3, #8192
 1277 009a 3B61     		str	r3, [r7, #16]
 566:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1278              		.loc 1 566 24
 1279 009c 0123     		movs	r3, #1
 1280 009e 7B61     		str	r3, [r7, #20]
 567:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1281              		.loc 1 567 24
 1282 00a0 0023     		movs	r3, #0
 1283 00a2 BB61     		str	r3, [r7, #24]
 568:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1284              		.loc 1 568 25
 1285 00a4 0223     		movs	r3, #2
 1286 00a6 FB61     		str	r3, [r7, #28]
 569:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 1287              		.loc 1 569 3
 1288 00a8 07F11003 		add	r3, r7, #16
 1289 00ac 1946     		mov	r1, r3
 1290 00ae 2648     		ldr	r0, .L58+4
 1291 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 570:Core/Src/main.c **** 
 571:Core/Src/main.c ****   /*Configure GPIO pin : PA1 */
 572:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1;
 1292              		.loc 1 572 23
 1293 00b4 0223     		movs	r3, #2
 1294 00b6 3B61     		str	r3, [r7, #16]
 573:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1295              		.loc 1 573 24
 1296 00b8 0123     		movs	r3, #1
 1297 00ba 7B61     		str	r3, [r7, #20]
 574:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1298              		.loc 1 574 24
 1299 00bc 0223     		movs	r3, #2
 1300 00be BB61     		str	r3, [r7, #24]
 575:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 34


 1301              		.loc 1 575 25
 1302 00c0 0223     		movs	r3, #2
 1303 00c2 FB61     		str	r3, [r7, #28]
 576:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1304              		.loc 1 576 3
 1305 00c4 07F11003 		add	r3, r7, #16
 1306 00c8 1946     		mov	r1, r3
 1307 00ca 2048     		ldr	r0, .L58+8
 1308 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 577:Core/Src/main.c **** 
 578:Core/Src/main.c ****   /*Configure GPIO pins : PA6 PA7 */
 579:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 1309              		.loc 1 579 23
 1310 00d0 C023     		movs	r3, #192
 1311 00d2 3B61     		str	r3, [r7, #16]
 580:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 1312              		.loc 1 580 24
 1313 00d4 0023     		movs	r3, #0
 1314 00d6 7B61     		str	r3, [r7, #20]
 581:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1315              		.loc 1 581 24
 1316 00d8 0123     		movs	r3, #1
 1317 00da BB61     		str	r3, [r7, #24]
 582:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1318              		.loc 1 582 3
 1319 00dc 07F11003 		add	r3, r7, #16
 1320 00e0 1946     		mov	r1, r3
 1321 00e2 1A48     		ldr	r0, .L58+8
 1322 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 583:Core/Src/main.c **** 
 584:Core/Src/main.c ****   /*Configure GPIO pin : PB10 */
 585:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 1323              		.loc 1 585 23
 1324 00e8 4FF48063 		mov	r3, #1024
 1325 00ec 3B61     		str	r3, [r7, #16]
 586:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 1326              		.loc 1 586 24
 1327 00ee 0023     		movs	r3, #0
 1328 00f0 7B61     		str	r3, [r7, #20]
 587:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1329              		.loc 1 587 24
 1330 00f2 0223     		movs	r3, #2
 1331 00f4 BB61     		str	r3, [r7, #24]
 588:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1332              		.loc 1 588 3
 1333 00f6 07F11003 		add	r3, r7, #16
 1334 00fa 1946     		mov	r1, r3
 1335 00fc 1448     		ldr	r0, .L58+12
 1336 00fe FFF7FEFF 		bl	HAL_GPIO_Init
 589:Core/Src/main.c **** 
 590:Core/Src/main.c ****   /*Configure GPIO pins : PA8 PA10 */
 591:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 1337              		.loc 1 591 23
 1338 0102 4FF4A063 		mov	r3, #1280
 1339 0106 3B61     		str	r3, [r7, #16]
 592:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1340              		.loc 1 592 24
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 35


 1341 0108 0123     		movs	r3, #1
 1342 010a 7B61     		str	r3, [r7, #20]
 593:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1343              		.loc 1 593 24
 1344 010c 0023     		movs	r3, #0
 1345 010e BB61     		str	r3, [r7, #24]
 594:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1346              		.loc 1 594 25
 1347 0110 0223     		movs	r3, #2
 1348 0112 FB61     		str	r3, [r7, #28]
 595:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1349              		.loc 1 595 3
 1350 0114 07F11003 		add	r3, r7, #16
 1351 0118 1946     		mov	r1, r3
 1352 011a 0C48     		ldr	r0, .L58+8
 1353 011c FFF7FEFF 		bl	HAL_GPIO_Init
 596:Core/Src/main.c **** 
 597:Core/Src/main.c ****   /*Configure GPIO pins : PB3 PB4 */
 598:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 1354              		.loc 1 598 23
 1355 0120 1823     		movs	r3, #24
 1356 0122 3B61     		str	r3, [r7, #16]
 599:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1357              		.loc 1 599 24
 1358 0124 0123     		movs	r3, #1
 1359 0126 7B61     		str	r3, [r7, #20]
 600:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1360              		.loc 1 600 24
 1361 0128 0023     		movs	r3, #0
 1362 012a BB61     		str	r3, [r7, #24]
 601:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1363              		.loc 1 601 25
 1364 012c 0223     		movs	r3, #2
 1365 012e FB61     		str	r3, [r7, #28]
 602:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1366              		.loc 1 602 3
 1367 0130 07F11003 		add	r3, r7, #16
 1368 0134 1946     		mov	r1, r3
 1369 0136 0648     		ldr	r0, .L58+12
 1370 0138 FFF7FEFF 		bl	HAL_GPIO_Init
 603:Core/Src/main.c **** 
 604:Core/Src/main.c **** }
 1371              		.loc 1 604 1
 1372 013c 00BF     		nop
 1373 013e 2037     		adds	r7, r7, #32
 1374              	.LCFI32:
 1375              		.cfi_def_cfa_offset 8
 1376 0140 BD46     		mov	sp, r7
 1377              	.LCFI33:
 1378              		.cfi_def_cfa_register 13
 1379              		@ sp needed
 1380 0142 80BD     		pop	{r7, pc}
 1381              	.L59:
 1382              		.align	2
 1383              	.L58:
 1384 0144 00100240 		.word	1073876992
 1385 0148 00100140 		.word	1073811456
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 36


 1386 014c 00080140 		.word	1073809408
 1387 0150 000C0140 		.word	1073810432
 1388              		.cfi_endproc
 1389              	.LFE73:
 1391              		.section	.text.Error_Handler,"ax",%progbits
 1392              		.align	1
 1393              		.global	Error_Handler
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1397              		.fpu softvfp
 1399              	Error_Handler:
 1400              	.LFB74:
 605:Core/Src/main.c **** 
 606:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 607:Core/Src/main.c **** 
 608:Core/Src/main.c **** /* USER CODE END 4 */
 609:Core/Src/main.c **** 
 610:Core/Src/main.c **** /**
 611:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 612:Core/Src/main.c ****   * @retval None
 613:Core/Src/main.c ****   */
 614:Core/Src/main.c **** void Error_Handler(void)
 615:Core/Src/main.c **** {
 1401              		.loc 1 615 1
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 0
 1404              		@ frame_needed = 1, uses_anonymous_args = 0
 1405              		@ link register save eliminated.
 1406 0000 80B4     		push	{r7}
 1407              	.LCFI34:
 1408              		.cfi_def_cfa_offset 4
 1409              		.cfi_offset 7, -4
 1410 0002 00AF     		add	r7, sp, #0
 1411              	.LCFI35:
 1412              		.cfi_def_cfa_register 7
 1413              	.LBB8:
 1414              	.LBB9:
 1415              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 37


  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 38


  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 39


 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1416              		.loc 2 142 3
 1417              		.syntax unified
 1418              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1419 0004 72B6     		cpsid i
 1420              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1421              		.loc 2 143 1
 1422              		.thumb
 1423              		.syntax unified
 1424 0006 00BF     		nop
 1425              	.L61:
 1426              	.LBE9:
 1427              	.LBE8:
 616:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 617:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 618:Core/Src/main.c ****   __disable_irq();
 619:Core/Src/main.c ****   while (1)
 1428              		.loc 1 619 9 discriminator 1
 1429 0008 FEE7     		b	.L61
 1430              		.cfi_endproc
 1431              	.LFE74:
 1433              		.text
 1434              	.Letext0:
 1435              		.file 3 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\machine\\
 1436              		.file 4 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\sys\\_std
 1437              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1438              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1439              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1440              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1441              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1442              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1443              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1444              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1445              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1446              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1447              		.file 15 "Core/Inc/fonts.h"
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 40


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:20     .bss.hadc1:00000000 hadc1
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:17     .bss.hadc1:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:27     .bss.hi2c1:00000000 hi2c1
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:24     .bss.hi2c1:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:34     .bss.htim4:00000000 htim4
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:31     .bss.htim4:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:41     .bss.MenuAtual:00000000 MenuAtual
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:38     .bss.MenuAtual:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:48     .bss.counterOpcao:00000000 counterOpcao
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:45     .bss.counterOpcao:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:55     .bss.counterPrev:00000000 counterPrev
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:52     .bss.counterPrev:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:62     .bss.txtCounter:00000000 txtCounter
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:59     .bss.txtCounter:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:68     .bss.ligarMotor:00000000 ligarMotor
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:69     .bss.ligarMotor:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:74     .data.StepAlta:00000000 StepAlta
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:81     .bss.TempVolts:00000000 TempVolts
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:78     .bss.TempVolts:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:88     .bss.TempCelsius:00000000 TempCelsius
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:85     .bss.TempCelsius:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:91     .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:99     .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:164    .text.HAL_TIM_PeriodElapsedCallback:00000048 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:171    .rodata:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:191    .text.MenuHandler:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:198    .text.MenuHandler:00000000 MenuHandler
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:395    .text.MenuHandler:00000154 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:411    .text.ClickHandler:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:418    .text.ClickHandler:00000000 ClickHandler
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:503    .text.ClickHandler:00000068 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:517    .text.main:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:524    .text.main:00000000 main
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:743    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:1184   .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:984    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:1063   .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:877    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:718    .text.main:00000148 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:736    .text.SystemClock_Config:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:1399   .text.Error_Handler:00000000 Error_Handler
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:871    .text.MX_ADC1_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:972    .text.MX_ADC1_Init:00000074 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:978    .text.MX_I2C1_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:1050   .text.MX_I2C1_Init:00000050 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:1057   .text.MX_TIM4_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:1172   .text.MX_TIM4_Init:00000094 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:1178   .text.MX_GPIO_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:1384   .text.MX_GPIO_Init:00000144 $d
C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s:1392   .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
__aeabi_f2iz
__aeabi_i2f
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccb9SvKS.s 			page 41


__aeabi_fsub
__aeabi_fmul
itoa
SSD1306_GotoXY
SSD1306_Puts
SSD1306_UpdateScreen
SSD1306_Clear
Font_7x10
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Stop_IT
__aeabi_ui2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_fcmplt
HAL_GPIO_ReadPin
HAL_Init
SSD1306_Init
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_GPIO_Init
