ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	hi2c1
  16              		.section	.bss.hi2c1,"aw",%nobits
  17              		.align	2
  20              	hi2c1:
  21 0000 00000000 		.space	84
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.global	htim4
  23              		.section	.bss.htim4,"aw",%nobits
  24              		.align	2
  27              	htim4:
  28 0000 00000000 		.space	72
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.global	MenuAtual
  30              		.section	.bss.MenuAtual,"aw",%nobits
  31              		.align	2
  34              	MenuAtual:
  35 0000 00000000 		.space	4
  36              		.global	counterOpcao
  37              		.section	.bss.counterOpcao,"aw",%nobits
  38              		.align	2
  41              	counterOpcao:
  42 0000 00000000 		.space	4
  43              		.global	counterPrev
  44              		.section	.bss.counterPrev,"aw",%nobits
  45              		.align	2
  48              	counterPrev:
  49 0000 00000000 		.space	4
  50              		.global	txtCounter
  51              		.section	.bss.txtCounter,"aw",%nobits
  52              		.align	2
  55              	txtCounter:
  56 0000 00000000 		.space	10
  56      00000000 
  56      0000
  57              		.global	ligarMotor
  58              		.section	.bss.ligarMotor,"aw",%nobits
  61              	ligarMotor:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 2


  62 0000 00       		.space	1
  63              		.global	StepAlta
  64              		.section	.data.StepAlta,"aw"
  67              	StepAlta:
  68 0000 01       		.byte	1
  69              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  70              		.align	1
  71              		.global	HAL_TIM_PeriodElapsedCallback
  72              		.arch armv7-m
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu softvfp
  78              	HAL_TIM_PeriodElapsedCallback:
  79              	.LFB65:
  80              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "ssd1306.h"
  26:Core/Src/main.c **** #include "fonts.h"
  27:Core/Src/main.c **** #include "test.h"
  28:Core/Src/main.c **** #include "stdbool.h"
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PD */
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 3


  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** uint32_t MenuAtual = 0;
  52:Core/Src/main.c **** uint32_t counterOpcao = 0;
  53:Core/Src/main.c **** uint32_t counterPrev = 0;
  54:Core/Src/main.c **** char txtCounter[10];
  55:Core/Src/main.c **** _Bool ligarMotor = false;
  56:Core/Src/main.c **** _Bool StepAlta = true;
  57:Core/Src/main.c **** /* USER CODE END PV */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  60:Core/Src/main.c **** void SystemClock_Config(void);
  61:Core/Src/main.c **** static void MX_GPIO_Init(void);
  62:Core/Src/main.c **** static void MX_I2C1_Init(void);
  63:Core/Src/main.c **** static void MX_TIM4_Init(void);
  64:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  65:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) // Interrupt do passo do motor
  66:Core/Src/main.c **** {
  81              		.loc 1 66 1
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 8
  84              		@ frame_needed = 1, uses_anonymous_args = 0
  85 0000 80B5     		push	{r7, lr}
  86              	.LCFI0:
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 82B0     		sub	sp, sp, #8
  91              	.LCFI1:
  92              		.cfi_def_cfa_offset 16
  93 0004 00AF     		add	r7, sp, #0
  94              	.LCFI2:
  95              		.cfi_def_cfa_register 7
  96 0006 7860     		str	r0, [r7, #4]
  67:Core/Src/main.c ****   if(StepAlta)
  97              		.loc 1 67 6
  98 0008 124B     		ldr	r3, .L5
  99 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 100              		.loc 1 67 5
 101 000c 002B     		cmp	r3, #0
 102 000e 0ED0     		beq	.L2
  68:Core/Src/main.c ****   {
  69:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); // Pino Step
 103              		.loc 1 69 5
 104 0010 0122     		movs	r2, #1
 105 0012 0821     		movs	r1, #8
 106 0014 1048     		ldr	r0, .L5+4
 107 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
  70:Core/Src/main.c ****     StepAlta = false;
 108              		.loc 1 70 14
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 4


 109 001a 0E4B     		ldr	r3, .L5
 110 001c 0022     		movs	r2, #0
 111 001e 1A70     		strb	r2, [r3]
  71:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 112              		.loc 1 71 5
 113 0020 0122     		movs	r2, #1
 114 0022 4FF48071 		mov	r1, #256
 115 0026 0D48     		ldr	r0, .L5+8
 116 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
  72:Core/Src/main.c ****   }
  73:Core/Src/main.c ****   else
  74:Core/Src/main.c ****   {
  75:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0); // Pino Step
  76:Core/Src/main.c ****     StepAlta = true;
  77:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
  78:Core/Src/main.c ****   }
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /*
  81:Core/Src/main.c ****   static uint32_t millis = 0;
  82:Core/Src/main.c ****   millis++;
  83:Core/Src/main.c ****   if (millis % 1000 == 0) {
  84:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 0);
  85:Core/Src/main.c ****   }
  86:Core/Src/main.c ****   */
  87:Core/Src/main.c ****   
  88:Core/Src/main.c **** }
 117              		.loc 1 88 1
 118 002c 0DE0     		b	.L4
 119              	.L2:
  75:Core/Src/main.c ****     StepAlta = true;
 120              		.loc 1 75 5
 121 002e 0022     		movs	r2, #0
 122 0030 0821     		movs	r1, #8
 123 0032 0948     		ldr	r0, .L5+4
 124 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
  76:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 125              		.loc 1 76 14
 126 0038 064B     		ldr	r3, .L5
 127 003a 0122     		movs	r2, #1
 128 003c 1A70     		strb	r2, [r3]
  77:Core/Src/main.c ****   }
 129              		.loc 1 77 5
 130 003e 0022     		movs	r2, #0
 131 0040 4FF48071 		mov	r1, #256
 132 0044 0548     		ldr	r0, .L5+8
 133 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
 134              	.L4:
 135              		.loc 1 88 1
 136 004a 00BF     		nop
 137 004c 0837     		adds	r7, r7, #8
 138              	.LCFI3:
 139              		.cfi_def_cfa_offset 8
 140 004e BD46     		mov	sp, r7
 141              	.LCFI4:
 142              		.cfi_def_cfa_register 13
 143              		@ sp needed
 144 0050 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 5


 145              	.L6:
 146 0052 00BF     		.align	2
 147              	.L5:
 148 0054 00000000 		.word	StepAlta
 149 0058 000C0140 		.word	1073810432
 150 005c 00080140 		.word	1073809408
 151              		.cfi_endproc
 152              	.LFE65:
 154              		.section	.rodata
 155              		.align	2
 156              	.LC0:
 157 0000 31204F75 		.ascii	"1 Outro Menu\000"
 157      74726F20 
 157      4D656E75 
 157      00
 158 000d 000000   		.align	2
 159              	.LC1:
 160 0010 3020566F 		.ascii	"0 Voltar\000"
 160      6C746172 
 160      00
 161 0019 000000   		.align	2
 162              	.LC2:
 163 001c 31204C69 		.ascii	"1 Ligar Motor\000"
 163      67617220 
 163      4D6F746F 
 163      7200
 164 002a 0000     		.align	2
 165              	.LC3:
 166 002c 32204465 		.ascii	"2 Desligar Motor\000"
 166      736C6967 
 166      6172204D 
 166      6F746F72 
 166      00
 167              		.section	.text.MenuHandler,"ax",%progbits
 168              		.align	1
 169              		.global	MenuHandler
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu softvfp
 175              	MenuHandler:
 176              	.LFB66:
  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** void MenuHandler(void)
  91:Core/Src/main.c **** {
 177              		.loc 1 91 1
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181 0000 80B5     		push	{r7, lr}
 182              	.LCFI5:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 7, -8
 185              		.cfi_offset 14, -4
 186 0002 00AF     		add	r7, sp, #0
 187              	.LCFI6:
 188              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 6


  92:Core/Src/main.c ****   if(MenuAtual==0)
 189              		.loc 1 92 15
 190 0004 354B     		ldr	r3, .L11
 191 0006 1B68     		ldr	r3, [r3]
 192              		.loc 1 92 5
 193 0008 002B     		cmp	r3, #0
 194 000a 27D1     		bne	.L8
  93:Core/Src/main.c ****     {
  94:Core/Src/main.c ****       
  95:Core/Src/main.c ****       itoa(counterOpcao, txtCounter, 10); // Coloca valor do counter na txtCounter
 195              		.loc 1 95 7
 196 000c 344B     		ldr	r3, .L11+4
 197 000e 1B68     		ldr	r3, [r3]
 198 0010 0A22     		movs	r2, #10
 199 0012 3449     		ldr	r1, .L11+8
 200 0014 1846     		mov	r0, r3
 201 0016 FFF7FEFF 		bl	itoa
  96:Core/Src/main.c ****       if (counterPrev != counterOpcao) // Atualiza tela so se mudar contador
 202              		.loc 1 96 23
 203 001a 334B     		ldr	r3, .L11+12
 204 001c 1A68     		ldr	r2, [r3]
 205 001e 304B     		ldr	r3, .L11+4
 206 0020 1B68     		ldr	r3, [r3]
 207              		.loc 1 96 10
 208 0022 9A42     		cmp	r2, r3
 209 0024 57D0     		beq	.L10
  97:Core/Src/main.c ****       {
  98:Core/Src/main.c ****         SSD1306_Clear();
 210              		.loc 1 98 9
 211 0026 FFF7FEFF 		bl	SSD1306_Clear
  99:Core/Src/main.c ****         counterPrev = counterOpcao;
 212              		.loc 1 99 21
 213 002a 2D4B     		ldr	r3, .L11+4
 214 002c 1B68     		ldr	r3, [r3]
 215 002e 2E4A     		ldr	r2, .L11+12
 216 0030 1360     		str	r3, [r2]
 100:Core/Src/main.c ****         SSD1306_GotoXY(2, 2);
 217              		.loc 1 100 9
 218 0032 0221     		movs	r1, #2
 219 0034 0220     		movs	r0, #2
 220 0036 FFF7FEFF 		bl	SSD1306_GotoXY
 101:Core/Src/main.c ****         SSD1306_Puts(txtCounter, &Font_7x10, 1);
 221              		.loc 1 101 9
 222 003a 0122     		movs	r2, #1
 223 003c 2B49     		ldr	r1, .L11+16
 224 003e 2948     		ldr	r0, .L11+8
 225 0040 FFF7FEFF 		bl	SSD1306_Puts
 102:Core/Src/main.c ****         SSD1306_GotoXY(2, 12);
 226              		.loc 1 102 9
 227 0044 0C21     		movs	r1, #12
 228 0046 0220     		movs	r0, #2
 229 0048 FFF7FEFF 		bl	SSD1306_GotoXY
 103:Core/Src/main.c ****         SSD1306_Puts("1 Outro Menu", &Font_7x10, 1);
 230              		.loc 1 103 9
 231 004c 0122     		movs	r2, #1
 232 004e 2749     		ldr	r1, .L11+16
 233 0050 2748     		ldr	r0, .L11+20
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 7


 234 0052 FFF7FEFF 		bl	SSD1306_Puts
 104:Core/Src/main.c ****         
 105:Core/Src/main.c ****         SSD1306_UpdateScreen();
 235              		.loc 1 105 9
 236 0056 FFF7FEFF 		bl	SSD1306_UpdateScreen
 106:Core/Src/main.c ****       }
 107:Core/Src/main.c ****     }
 108:Core/Src/main.c ****     else if (MenuAtual==1)
 109:Core/Src/main.c ****     {
 110:Core/Src/main.c ****       
 111:Core/Src/main.c ****       itoa(counterOpcao, txtCounter, 10); // Coloca valor do counter na txtCounter
 112:Core/Src/main.c ****       if (counterPrev != counterOpcao) // Atualiza tela so se mudar contador
 113:Core/Src/main.c ****       {
 114:Core/Src/main.c ****         SSD1306_Clear();
 115:Core/Src/main.c ****         counterPrev = counterOpcao;
 116:Core/Src/main.c ****         SSD1306_GotoXY(2, 2);
 117:Core/Src/main.c ****         SSD1306_Puts(txtCounter, &Font_7x10, 1);
 118:Core/Src/main.c ****         SSD1306_GotoXY(2, 12);
 119:Core/Src/main.c ****         SSD1306_Puts("0 Voltar", &Font_7x10, 1);
 120:Core/Src/main.c ****         SSD1306_GotoXY(2, 22);
 121:Core/Src/main.c ****         SSD1306_Puts("1 Ligar Motor", &Font_7x10, 1);
 122:Core/Src/main.c ****         SSD1306_GotoXY(2, 32);
 123:Core/Src/main.c ****         SSD1306_Puts("2 Desligar Motor", &Font_7x10, 1);
 124:Core/Src/main.c ****         
 125:Core/Src/main.c ****         SSD1306_UpdateScreen();
 126:Core/Src/main.c ****       }
 127:Core/Src/main.c ****     }
 128:Core/Src/main.c ****     
 129:Core/Src/main.c **** }
 237              		.loc 1 129 1
 238 005a 3CE0     		b	.L10
 239              	.L8:
 108:Core/Src/main.c ****     {
 240              		.loc 1 108 23
 241 005c 1F4B     		ldr	r3, .L11
 242 005e 1B68     		ldr	r3, [r3]
 108:Core/Src/main.c ****     {
 243              		.loc 1 108 13
 244 0060 012B     		cmp	r3, #1
 245 0062 38D1     		bne	.L10
 111:Core/Src/main.c ****       if (counterPrev != counterOpcao) // Atualiza tela so se mudar contador
 246              		.loc 1 111 7
 247 0064 1E4B     		ldr	r3, .L11+4
 248 0066 1B68     		ldr	r3, [r3]
 249 0068 0A22     		movs	r2, #10
 250 006a 1E49     		ldr	r1, .L11+8
 251 006c 1846     		mov	r0, r3
 252 006e FFF7FEFF 		bl	itoa
 112:Core/Src/main.c ****       {
 253              		.loc 1 112 23
 254 0072 1D4B     		ldr	r3, .L11+12
 255 0074 1A68     		ldr	r2, [r3]
 256 0076 1A4B     		ldr	r3, .L11+4
 257 0078 1B68     		ldr	r3, [r3]
 112:Core/Src/main.c ****       {
 258              		.loc 1 112 10
 259 007a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 8


 260 007c 2BD0     		beq	.L10
 114:Core/Src/main.c ****         counterPrev = counterOpcao;
 261              		.loc 1 114 9
 262 007e FFF7FEFF 		bl	SSD1306_Clear
 115:Core/Src/main.c ****         SSD1306_GotoXY(2, 2);
 263              		.loc 1 115 21
 264 0082 174B     		ldr	r3, .L11+4
 265 0084 1B68     		ldr	r3, [r3]
 266 0086 184A     		ldr	r2, .L11+12
 267 0088 1360     		str	r3, [r2]
 116:Core/Src/main.c ****         SSD1306_Puts(txtCounter, &Font_7x10, 1);
 268              		.loc 1 116 9
 269 008a 0221     		movs	r1, #2
 270 008c 0220     		movs	r0, #2
 271 008e FFF7FEFF 		bl	SSD1306_GotoXY
 117:Core/Src/main.c ****         SSD1306_GotoXY(2, 12);
 272              		.loc 1 117 9
 273 0092 0122     		movs	r2, #1
 274 0094 1549     		ldr	r1, .L11+16
 275 0096 1348     		ldr	r0, .L11+8
 276 0098 FFF7FEFF 		bl	SSD1306_Puts
 118:Core/Src/main.c ****         SSD1306_Puts("0 Voltar", &Font_7x10, 1);
 277              		.loc 1 118 9
 278 009c 0C21     		movs	r1, #12
 279 009e 0220     		movs	r0, #2
 280 00a0 FFF7FEFF 		bl	SSD1306_GotoXY
 119:Core/Src/main.c ****         SSD1306_GotoXY(2, 22);
 281              		.loc 1 119 9
 282 00a4 0122     		movs	r2, #1
 283 00a6 1149     		ldr	r1, .L11+16
 284 00a8 1248     		ldr	r0, .L11+24
 285 00aa FFF7FEFF 		bl	SSD1306_Puts
 120:Core/Src/main.c ****         SSD1306_Puts("1 Ligar Motor", &Font_7x10, 1);
 286              		.loc 1 120 9
 287 00ae 1621     		movs	r1, #22
 288 00b0 0220     		movs	r0, #2
 289 00b2 FFF7FEFF 		bl	SSD1306_GotoXY
 121:Core/Src/main.c ****         SSD1306_GotoXY(2, 32);
 290              		.loc 1 121 9
 291 00b6 0122     		movs	r2, #1
 292 00b8 0C49     		ldr	r1, .L11+16
 293 00ba 0F48     		ldr	r0, .L11+28
 294 00bc FFF7FEFF 		bl	SSD1306_Puts
 122:Core/Src/main.c ****         SSD1306_Puts("2 Desligar Motor", &Font_7x10, 1);
 295              		.loc 1 122 9
 296 00c0 2021     		movs	r1, #32
 297 00c2 0220     		movs	r0, #2
 298 00c4 FFF7FEFF 		bl	SSD1306_GotoXY
 123:Core/Src/main.c ****         
 299              		.loc 1 123 9
 300 00c8 0122     		movs	r2, #1
 301 00ca 0849     		ldr	r1, .L11+16
 302 00cc 0B48     		ldr	r0, .L11+32
 303 00ce FFF7FEFF 		bl	SSD1306_Puts
 125:Core/Src/main.c ****       }
 304              		.loc 1 125 9
 305 00d2 FFF7FEFF 		bl	SSD1306_UpdateScreen
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 9


 306              	.L10:
 307              		.loc 1 129 1
 308 00d6 00BF     		nop
 309 00d8 80BD     		pop	{r7, pc}
 310              	.L12:
 311 00da 00BF     		.align	2
 312              	.L11:
 313 00dc 00000000 		.word	MenuAtual
 314 00e0 00000000 		.word	counterOpcao
 315 00e4 00000000 		.word	txtCounter
 316 00e8 00000000 		.word	counterPrev
 317 00ec 00000000 		.word	Font_7x10
 318 00f0 00000000 		.word	.LC0
 319 00f4 10000000 		.word	.LC1
 320 00f8 1C000000 		.word	.LC2
 321 00fc 2C000000 		.word	.LC3
 322              		.cfi_endproc
 323              	.LFE66:
 325              		.section	.text.ClickHandler,"ax",%progbits
 326              		.align	1
 327              		.global	ClickHandler
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu softvfp
 333              	ClickHandler:
 334              	.LFB67:
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** void ClickHandler(void)
 132:Core/Src/main.c **** {
 335              		.loc 1 132 1
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 1, uses_anonymous_args = 0
 339 0000 80B5     		push	{r7, lr}
 340              	.LCFI7:
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 7, -8
 343              		.cfi_offset 14, -4
 344 0002 00AF     		add	r7, sp, #0
 345              	.LCFI8:
 346              		.cfi_def_cfa_register 7
 133:Core/Src/main.c ****   //SSD1306_Clear();
 134:Core/Src/main.c ****   if(MenuAtual == 0)
 347              		.loc 1 134 16
 348 0004 184B     		ldr	r3, .L18
 349 0006 1B68     		ldr	r3, [r3]
 350              		.loc 1 134 5
 351 0008 002B     		cmp	r3, #0
 352 000a 06D1     		bne	.L14
 135:Core/Src/main.c ****   {
 136:Core/Src/main.c ****     if(counterOpcao == 1)
 353              		.loc 1 136 21
 354 000c 174B     		ldr	r3, .L18+4
 355 000e 1B68     		ldr	r3, [r3]
 356              		.loc 1 136 7
 357 0010 012B     		cmp	r3, #1
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 10


 358 0012 02D1     		bne	.L14
 137:Core/Src/main.c ****     {
 138:Core/Src/main.c ****       MenuAtual = 1;
 359              		.loc 1 138 17
 360 0014 144B     		ldr	r3, .L18
 361 0016 0122     		movs	r2, #1
 362 0018 1A60     		str	r2, [r3]
 363              	.L14:
 139:Core/Src/main.c ****     }
 140:Core/Src/main.c ****   }
 141:Core/Src/main.c ****   if(MenuAtual == 1)
 364              		.loc 1 141 16
 365 001a 134B     		ldr	r3, .L18
 366 001c 1B68     		ldr	r3, [r3]
 367              		.loc 1 141 5
 368 001e 012B     		cmp	r3, #1
 369 0020 1CD1     		bne	.L15
 142:Core/Src/main.c ****   {
 143:Core/Src/main.c ****     if(counterOpcao == 1) //Ligar Interrupt
 370              		.loc 1 143 21
 371 0022 124B     		ldr	r3, .L18+4
 372 0024 1B68     		ldr	r3, [r3]
 373              		.loc 1 143 7
 374 0026 012B     		cmp	r3, #1
 375 0028 03D1     		bne	.L16
 144:Core/Src/main.c ****     {
 145:Core/Src/main.c ****       HAL_TIM_Base_Start_IT(&htim4);
 376              		.loc 1 145 7
 377 002a 1148     		ldr	r0, .L18+8
 378 002c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 379 0030 14E0     		b	.L15
 380              	.L16:
 146:Core/Src/main.c ****     }
 147:Core/Src/main.c ****     else if (counterOpcao == 2) // Desligar Interrupt
 381              		.loc 1 147 27
 382 0032 0E4B     		ldr	r3, .L18+4
 383 0034 1B68     		ldr	r3, [r3]
 384              		.loc 1 147 13
 385 0036 022B     		cmp	r3, #2
 386 0038 09D1     		bne	.L17
 148:Core/Src/main.c ****     {
 149:Core/Src/main.c ****       HAL_TIM_Base_Stop_IT(&htim4);
 387              		.loc 1 149 7
 388 003a 0D48     		ldr	r0, .L18+8
 389 003c FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 150:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 390              		.loc 1 150 7
 391 0040 0022     		movs	r2, #0
 392 0042 4FF48071 		mov	r1, #256
 393 0046 0B48     		ldr	r0, .L18+12
 394 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 395 004c 06E0     		b	.L15
 396              	.L17:
 151:Core/Src/main.c ****     }
 152:Core/Src/main.c ****     else if(counterOpcao == 0)
 397              		.loc 1 152 26
 398 004e 074B     		ldr	r3, .L18+4
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 11


 399 0050 1B68     		ldr	r3, [r3]
 400              		.loc 1 152 12
 401 0052 002B     		cmp	r3, #0
 402 0054 02D1     		bne	.L15
 153:Core/Src/main.c ****     {
 154:Core/Src/main.c ****       MenuAtual = 0;
 403              		.loc 1 154 17
 404 0056 044B     		ldr	r3, .L18
 405 0058 0022     		movs	r2, #0
 406 005a 1A60     		str	r2, [r3]
 407              	.L15:
 155:Core/Src/main.c ****     }
 156:Core/Src/main.c ****   }
 157:Core/Src/main.c ****   
 158:Core/Src/main.c ****   
 159:Core/Src/main.c ****   counterPrev = 99; // Forca a atualizar a tela
 408              		.loc 1 159 15
 409 005c 064B     		ldr	r3, .L18+16
 410 005e 6322     		movs	r2, #99
 411 0060 1A60     		str	r2, [r3]
 160:Core/Src/main.c ****   
 161:Core/Src/main.c ****   
 162:Core/Src/main.c **** }
 412              		.loc 1 162 1
 413 0062 00BF     		nop
 414 0064 80BD     		pop	{r7, pc}
 415              	.L19:
 416 0066 00BF     		.align	2
 417              	.L18:
 418 0068 00000000 		.word	MenuAtual
 419 006c 00000000 		.word	counterOpcao
 420 0070 00000000 		.word	htim4
 421 0074 00080140 		.word	1073809408
 422 0078 00000000 		.word	counterPrev
 423              		.cfi_endproc
 424              	.LFE67:
 426              		.section	.text.main,"ax",%progbits
 427              		.align	1
 428              		.global	main
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu softvfp
 434              	main:
 435              	.LFB68:
 163:Core/Src/main.c **** /* USER CODE END PFP */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 166:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** /* USER CODE END 0 */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /**
 171:Core/Src/main.c ****   * @brief  The application entry point.
 172:Core/Src/main.c ****   * @retval int
 173:Core/Src/main.c ****   */
 174:Core/Src/main.c **** int main(void)
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 12


 175:Core/Src/main.c **** {
 436              		.loc 1 175 1
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 16
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440 0000 80B5     		push	{r7, lr}
 441              	.LCFI9:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 84B0     		sub	sp, sp, #16
 446              	.LCFI10:
 447              		.cfi_def_cfa_offset 24
 448 0004 00AF     		add	r7, sp, #0
 449              	.LCFI11:
 450              		.cfi_def_cfa_register 7
 176:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 177:Core/Src/main.c ****   /*uint32_t i;
 178:Core/Src/main.c ****   float Temp;
 179:Core/Src/main.c ****   uint32_t counter = 0;*/
 180:Core/Src/main.c ****   GPIO_PinState aState;
 181:Core/Src/main.c ****   GPIO_PinState aLastState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 451              		.loc 1 181 30
 452 0006 4021     		movs	r1, #64
 453 0008 2448     		ldr	r0, .L27
 454 000a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 455 000e 0346     		mov	r3, r0
 456 0010 FB73     		strb	r3, [r7, #15]
 182:Core/Src/main.c ****   uint32_t counter = 0;
 457              		.loc 1 182 12
 458 0012 0023     		movs	r3, #0
 459 0014 BB60     		str	r3, [r7, #8]
 183:Core/Src/main.c ****   
 184:Core/Src/main.c ****   
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* USER CODE END 1 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 191:Core/Src/main.c ****   HAL_Init();
 460              		.loc 1 191 3
 461 0016 FFF7FEFF 		bl	HAL_Init
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* USER CODE END Init */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* Configure the system clock */
 198:Core/Src/main.c ****   SystemClock_Config();
 462              		.loc 1 198 3
 463 001a FFF7FEFF 		bl	SystemClock_Config
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* USER CODE END SysInit */
 203:Core/Src/main.c **** 
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 13


 204:Core/Src/main.c ****   /* Initialize all configured peripherals */
 205:Core/Src/main.c ****   MX_GPIO_Init();
 464              		.loc 1 205 3
 465 001e FFF7FEFF 		bl	MX_GPIO_Init
 206:Core/Src/main.c ****   MX_I2C1_Init();
 466              		.loc 1 206 3
 467 0022 FFF7FEFF 		bl	MX_I2C1_Init
 207:Core/Src/main.c ****   MX_TIM4_Init();
 468              		.loc 1 207 3
 469 0026 FFF7FEFF 		bl	MX_TIM4_Init
 208:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE END 2 */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Infinite loop */
 213:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 214:Core/Src/main.c ****   /*SSD1306_Init(); // initialize the display
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****     SSD1306_GotoXY(10, 10);                // goto 10, 10
 217:Core/Src/main.c ****     SSD1306_Puts("HELLO", &Font_11x18, 1); // print Hello
 218:Core/Src/main.c ****     SSD1306_GotoXY(10, 30);
 219:Core/Src/main.c ****     SSD1306_Puts("WORLD !!", &Font_11x18, 1);
 220:Core/Src/main.c ****     SSD1306_UpdateScreen();*/
 221:Core/Src/main.c ****   SSD1306_Init();
 470              		.loc 1 221 3
 471 002a FFF7FEFF 		bl	SSD1306_Init
 472              	.L26:
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   while (1)
 224:Core/Src/main.c ****   {
 225:Core/Src/main.c ****     
 226:Core/Src/main.c ****     /*if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET)
 227:Core/Src/main.c ****     {
 228:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 229:Core/Src/main.c ****     }
 230:Core/Src/main.c ****     else
 231:Core/Src/main.c ****     {
 232:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 233:Core/Src/main.c ****     }*/
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****     // Contador Rot Button
 236:Core/Src/main.c ****     aState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 473              		.loc 1 236 14
 474 002e 4021     		movs	r1, #64
 475 0030 1A48     		ldr	r0, .L27
 476 0032 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 477 0036 0346     		mov	r3, r0
 478 0038 FB71     		strb	r3, [r7, #7]
 237:Core/Src/main.c ****     if (aState != aLastState)
 479              		.loc 1 237 8
 480 003a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 481 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 482 003e 9A42     		cmp	r2, r3
 483 0040 1DD0     		beq	.L21
 238:Core/Src/main.c ****     {
 239:Core/Src/main.c ****       if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) != aState)
 484              		.loc 1 239 11
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 14


 485 0042 8021     		movs	r1, #128
 486 0044 1548     		ldr	r0, .L27
 487 0046 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 488 004a 0346     		mov	r3, r0
 489 004c 1A46     		mov	r2, r3
 490              		.loc 1 239 10
 491 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 492 0050 9342     		cmp	r3, r2
 493 0052 03D0     		beq	.L22
 240:Core/Src/main.c ****       {
 241:Core/Src/main.c ****         counter--; // Sentido Horario
 494              		.loc 1 241 16
 495 0054 BB68     		ldr	r3, [r7, #8]
 496 0056 013B     		subs	r3, r3, #1
 497 0058 BB60     		str	r3, [r7, #8]
 498 005a 02E0     		b	.L23
 499              	.L22:
 242:Core/Src/main.c ****       }
 243:Core/Src/main.c ****       else
 244:Core/Src/main.c ****       {
 245:Core/Src/main.c ****         counter++; // Sentido Anti Horario
 500              		.loc 1 245 16
 501 005c BB68     		ldr	r3, [r7, #8]
 502 005e 0133     		adds	r3, r3, #1
 503 0060 BB60     		str	r3, [r7, #8]
 504              	.L23:
 246:Core/Src/main.c ****       }
 247:Core/Src/main.c ****       if (counter % 2 == 0)
 505              		.loc 1 247 19
 506 0062 BB68     		ldr	r3, [r7, #8]
 507 0064 03F00103 		and	r3, r3, #1
 508              		.loc 1 247 10
 509 0068 002B     		cmp	r3, #0
 510 006a 03D1     		bne	.L24
 248:Core/Src/main.c ****       {
 249:Core/Src/main.c ****         counterOpcao = counter/2;
 511              		.loc 1 249 31
 512 006c BB68     		ldr	r3, [r7, #8]
 513 006e 5B08     		lsrs	r3, r3, #1
 514              		.loc 1 249 22
 515 0070 0B4A     		ldr	r2, .L27+4
 516 0072 1360     		str	r3, [r2]
 517              	.L24:
 250:Core/Src/main.c ****       }
 251:Core/Src/main.c ****       if(counter>100)
 518              		.loc 1 251 9
 519 0074 BB68     		ldr	r3, [r7, #8]
 520 0076 642B     		cmp	r3, #100
 521 0078 01D9     		bls	.L21
 252:Core/Src/main.c ****       {
 253:Core/Src/main.c ****         counter = 0;
 522              		.loc 1 253 17
 523 007a 0023     		movs	r3, #0
 524 007c BB60     		str	r3, [r7, #8]
 525              	.L21:
 254:Core/Src/main.c ****       }
 255:Core/Src/main.c ****     }
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 15


 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****     aLastState = aState;
 526              		.loc 1 257 16
 527 007e FB79     		ldrb	r3, [r7, #7]
 528 0080 FB73     		strb	r3, [r7, #15]
 258:Core/Src/main.c **** 
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****     // OLED
 261:Core/Src/main.c ****     /*
 262:Core/Src/main.c ****     MenuHandler();
 263:Core/Src/main.c ****     if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 264:Core/Src/main.c ****     {
 265:Core/Src/main.c ****       ClickHandler();
 266:Core/Src/main.c ****     }
 267:Core/Src/main.c ****     */
 268:Core/Src/main.c ****     MenuHandler();
 529              		.loc 1 268 5
 530 0082 FFF7FEFF 		bl	MenuHandler
 269:Core/Src/main.c ****     
 270:Core/Src/main.c ****   
 271:Core/Src/main.c ****     if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 531              		.loc 1 271 8
 532 0086 4FF48061 		mov	r1, #1024
 533 008a 0648     		ldr	r0, .L27+8
 534 008c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 535 0090 0346     		mov	r3, r0
 536              		.loc 1 271 7
 537 0092 002B     		cmp	r3, #0
 538 0094 CBD0     		beq	.L26
 272:Core/Src/main.c ****     {
 273:Core/Src/main.c ****       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 274:Core/Src/main.c ****       ClickHandler();
 539              		.loc 1 274 7
 540 0096 FFF7FEFF 		bl	ClickHandler
 236:Core/Src/main.c ****     if (aState != aLastState)
 541              		.loc 1 236 12
 542 009a C8E7     		b	.L26
 543              	.L28:
 544              		.align	2
 545              	.L27:
 546 009c 00080140 		.word	1073809408
 547 00a0 00000000 		.word	counterOpcao
 548 00a4 000C0140 		.word	1073810432
 549              		.cfi_endproc
 550              	.LFE68:
 552              		.section	.text.SystemClock_Config,"ax",%progbits
 553              		.align	1
 554              		.global	SystemClock_Config
 555              		.syntax unified
 556              		.thumb
 557              		.thumb_func
 558              		.fpu softvfp
 560              	SystemClock_Config:
 561              	.LFB69:
 275:Core/Src/main.c ****     }
 276:Core/Src/main.c ****     else
 277:Core/Src/main.c ****     {
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 16


 278:Core/Src/main.c ****       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 279:Core/Src/main.c ****     }
 280:Core/Src/main.c ****     
 281:Core/Src/main.c ****     
 282:Core/Src/main.c ****     
 283:Core/Src/main.c ****     // update screen
 284:Core/Src/main.c ****     /*for (i = 0; i < 8; i++)
 285:Core/Src/main.c ****     {
 286:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 287:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 288:Core/Src/main.c ****       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 289:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 290:Core/Src/main.c ****       HAL_Delay(2500);
 291:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 292:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 293:Core/Src/main.c ****       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 294:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 295:Core/Src/main.c ****       HAL_Delay(2500);
 296:Core/Src/main.c ****     }*/
 297:Core/Src/main.c ****     //HAL_Delay(800);
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****     /*Temp = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 300:Core/Src/main.c ****     Temp = ((Temp * 1.1 / (1023)) / 0.01);
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****     if (Temp < 25)
 303:Core/Src/main.c ****     {
 304:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 305:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 306:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 307:Core/Src/main.c ****     }
 308:Core/Src/main.c ****     else if (Temp >= 25 && Temp < 30)
 309:Core/Src/main.c ****     {
 310:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 311:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 312:Core/Src/main.c ****     }
 313:Core/Src/main.c ****     else if (Temp >= 30 && Temp < 35)
 314:Core/Src/main.c ****     {
 315:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 316:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 317:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 318:Core/Src/main.c ****     }
 319:Core/Src/main.c ****     else if (Temp >= 35 && Temp < 40)
 320:Core/Src/main.c ****     {
 321:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 322:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 323:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 324:Core/Src/main.c ****     }
 325:Core/Src/main.c ****     else
 326:Core/Src/main.c ****     {
 327:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 328:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 329:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 330:Core/Src/main.c ****     }*/
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****     /* USER CODE END WHILE */
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 17


 335:Core/Src/main.c ****   }
 336:Core/Src/main.c ****   /* USER CODE END 3 */
 337:Core/Src/main.c **** }
 338:Core/Src/main.c **** 
 339:Core/Src/main.c **** /**
 340:Core/Src/main.c ****   * @brief System Clock Configuration
 341:Core/Src/main.c ****   * @retval None
 342:Core/Src/main.c ****   */
 343:Core/Src/main.c **** void SystemClock_Config(void)
 344:Core/Src/main.c **** {
 562              		.loc 1 344 1
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 64
 565              		@ frame_needed = 1, uses_anonymous_args = 0
 566 0000 80B5     		push	{r7, lr}
 567              	.LCFI12:
 568              		.cfi_def_cfa_offset 8
 569              		.cfi_offset 7, -8
 570              		.cfi_offset 14, -4
 571 0002 90B0     		sub	sp, sp, #64
 572              	.LCFI13:
 573              		.cfi_def_cfa_offset 72
 574 0004 00AF     		add	r7, sp, #0
 575              	.LCFI14:
 576              		.cfi_def_cfa_register 7
 345:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 577              		.loc 1 345 22
 578 0006 07F11803 		add	r3, r7, #24
 579 000a 2822     		movs	r2, #40
 580 000c 0021     		movs	r1, #0
 581 000e 1846     		mov	r0, r3
 582 0010 FFF7FEFF 		bl	memset
 346:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 583              		.loc 1 346 22
 584 0014 3B1D     		adds	r3, r7, #4
 585 0016 0022     		movs	r2, #0
 586 0018 1A60     		str	r2, [r3]
 587 001a 5A60     		str	r2, [r3, #4]
 588 001c 9A60     		str	r2, [r3, #8]
 589 001e DA60     		str	r2, [r3, #12]
 590 0020 1A61     		str	r2, [r3, #16]
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 349:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 350:Core/Src/main.c ****   */
 351:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 591              		.loc 1 351 36
 592 0022 0123     		movs	r3, #1
 593 0024 BB61     		str	r3, [r7, #24]
 352:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 594              		.loc 1 352 30
 595 0026 4FF48033 		mov	r3, #65536
 596 002a FB61     		str	r3, [r7, #28]
 353:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 597              		.loc 1 353 36
 598 002c 0023     		movs	r3, #0
 599 002e 3B62     		str	r3, [r7, #32]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 18


 354:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 600              		.loc 1 354 30
 601 0030 0123     		movs	r3, #1
 602 0032 BB62     		str	r3, [r7, #40]
 355:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 603              		.loc 1 355 34
 604 0034 0223     		movs	r3, #2
 605 0036 7B63     		str	r3, [r7, #52]
 356:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 606              		.loc 1 356 35
 607 0038 4FF48033 		mov	r3, #65536
 608 003c BB63     		str	r3, [r7, #56]
 357:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 609              		.loc 1 357 32
 610 003e 4FF4E013 		mov	r3, #1835008
 611 0042 FB63     		str	r3, [r7, #60]
 358:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 612              		.loc 1 358 7
 613 0044 07F11803 		add	r3, r7, #24
 614 0048 1846     		mov	r0, r3
 615 004a FFF7FEFF 		bl	HAL_RCC_OscConfig
 616 004e 0346     		mov	r3, r0
 617              		.loc 1 358 6
 618 0050 002B     		cmp	r3, #0
 619 0052 01D0     		beq	.L30
 359:Core/Src/main.c ****   {
 360:Core/Src/main.c ****     Error_Handler();
 620              		.loc 1 360 5
 621 0054 FFF7FEFF 		bl	Error_Handler
 622              	.L30:
 361:Core/Src/main.c ****   }
 362:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 363:Core/Src/main.c ****   */
 364:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 623              		.loc 1 364 31
 624 0058 0F23     		movs	r3, #15
 625 005a 7B60     		str	r3, [r7, #4]
 365:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 366:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 626              		.loc 1 366 34
 627 005c 0223     		movs	r3, #2
 628 005e BB60     		str	r3, [r7, #8]
 367:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 629              		.loc 1 367 35
 630 0060 0023     		movs	r3, #0
 631 0062 FB60     		str	r3, [r7, #12]
 368:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 632              		.loc 1 368 36
 633 0064 4FF48063 		mov	r3, #1024
 634 0068 3B61     		str	r3, [r7, #16]
 369:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 635              		.loc 1 369 36
 636 006a 0023     		movs	r3, #0
 637 006c 7B61     		str	r3, [r7, #20]
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 638              		.loc 1 371 7
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 19


 639 006e 3B1D     		adds	r3, r7, #4
 640 0070 0221     		movs	r1, #2
 641 0072 1846     		mov	r0, r3
 642 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 643 0078 0346     		mov	r3, r0
 644              		.loc 1 371 6
 645 007a 002B     		cmp	r3, #0
 646 007c 01D0     		beq	.L32
 372:Core/Src/main.c ****   {
 373:Core/Src/main.c ****     Error_Handler();
 647              		.loc 1 373 5
 648 007e FFF7FEFF 		bl	Error_Handler
 649              	.L32:
 374:Core/Src/main.c ****   }
 375:Core/Src/main.c **** }
 650              		.loc 1 375 1
 651 0082 00BF     		nop
 652 0084 4037     		adds	r7, r7, #64
 653              	.LCFI15:
 654              		.cfi_def_cfa_offset 8
 655 0086 BD46     		mov	sp, r7
 656              	.LCFI16:
 657              		.cfi_def_cfa_register 13
 658              		@ sp needed
 659 0088 80BD     		pop	{r7, pc}
 660              		.cfi_endproc
 661              	.LFE69:
 663              		.section	.text.MX_I2C1_Init,"ax",%progbits
 664              		.align	1
 665              		.syntax unified
 666              		.thumb
 667              		.thumb_func
 668              		.fpu softvfp
 670              	MX_I2C1_Init:
 671              	.LFB70:
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** /**
 378:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 379:Core/Src/main.c ****   * @param None
 380:Core/Src/main.c ****   * @retval None
 381:Core/Src/main.c ****   */
 382:Core/Src/main.c **** static void MX_I2C1_Init(void)
 383:Core/Src/main.c **** {
 672              		.loc 1 383 1
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 0
 675              		@ frame_needed = 1, uses_anonymous_args = 0
 676 0000 80B5     		push	{r7, lr}
 677              	.LCFI17:
 678              		.cfi_def_cfa_offset 8
 679              		.cfi_offset 7, -8
 680              		.cfi_offset 14, -4
 681 0002 00AF     		add	r7, sp, #0
 682              	.LCFI18:
 683              		.cfi_def_cfa_register 7
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 20


 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 392:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 684              		.loc 1 392 18
 685 0004 124B     		ldr	r3, .L36
 686 0006 134A     		ldr	r2, .L36+4
 687 0008 1A60     		str	r2, [r3]
 393:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
 688              		.loc 1 393 25
 689 000a 114B     		ldr	r3, .L36
 690 000c 124A     		ldr	r2, .L36+8
 691 000e 5A60     		str	r2, [r3, #4]
 394:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 692              		.loc 1 394 24
 693 0010 0F4B     		ldr	r3, .L36
 694 0012 0022     		movs	r2, #0
 695 0014 9A60     		str	r2, [r3, #8]
 395:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 696              		.loc 1 395 26
 697 0016 0E4B     		ldr	r3, .L36
 698 0018 0022     		movs	r2, #0
 699 001a DA60     		str	r2, [r3, #12]
 396:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 700              		.loc 1 396 29
 701 001c 0C4B     		ldr	r3, .L36
 702 001e 4FF48042 		mov	r2, #16384
 703 0022 1A61     		str	r2, [r3, #16]
 397:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 704              		.loc 1 397 30
 705 0024 0A4B     		ldr	r3, .L36
 706 0026 0022     		movs	r2, #0
 707 0028 5A61     		str	r2, [r3, #20]
 398:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 708              		.loc 1 398 26
 709 002a 094B     		ldr	r3, .L36
 710 002c 0022     		movs	r2, #0
 711 002e 9A61     		str	r2, [r3, #24]
 399:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 712              		.loc 1 399 30
 713 0030 074B     		ldr	r3, .L36
 714 0032 0022     		movs	r2, #0
 715 0034 DA61     		str	r2, [r3, #28]
 400:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 716              		.loc 1 400 28
 717 0036 064B     		ldr	r3, .L36
 718 0038 0022     		movs	r2, #0
 719 003a 1A62     		str	r2, [r3, #32]
 401:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 720              		.loc 1 401 7
 721 003c 0448     		ldr	r0, .L36
 722 003e FFF7FEFF 		bl	HAL_I2C_Init
 723 0042 0346     		mov	r3, r0
 724              		.loc 1 401 6
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 21


 725 0044 002B     		cmp	r3, #0
 726 0046 01D0     		beq	.L35
 402:Core/Src/main.c ****   {
 403:Core/Src/main.c ****     Error_Handler();
 727              		.loc 1 403 5
 728 0048 FFF7FEFF 		bl	Error_Handler
 729              	.L35:
 404:Core/Src/main.c ****   }
 405:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 406:Core/Src/main.c **** 
 407:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 408:Core/Src/main.c **** 
 409:Core/Src/main.c **** }
 730              		.loc 1 409 1
 731 004c 00BF     		nop
 732 004e 80BD     		pop	{r7, pc}
 733              	.L37:
 734              		.align	2
 735              	.L36:
 736 0050 00000000 		.word	hi2c1
 737 0054 00540040 		.word	1073763328
 738 0058 801A0600 		.word	400000
 739              		.cfi_endproc
 740              	.LFE70:
 742              		.section	.text.MX_TIM4_Init,"ax",%progbits
 743              		.align	1
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 747              		.fpu softvfp
 749              	MX_TIM4_Init:
 750              	.LFB71:
 410:Core/Src/main.c **** 
 411:Core/Src/main.c **** /**
 412:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 413:Core/Src/main.c ****   * @param None
 414:Core/Src/main.c ****   * @retval None
 415:Core/Src/main.c ****   */
 416:Core/Src/main.c **** static void MX_TIM4_Init(void)
 417:Core/Src/main.c **** {
 751              		.loc 1 417 1
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 24
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755 0000 80B5     		push	{r7, lr}
 756              	.LCFI19:
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 7, -8
 759              		.cfi_offset 14, -4
 760 0002 86B0     		sub	sp, sp, #24
 761              	.LCFI20:
 762              		.cfi_def_cfa_offset 32
 763 0004 00AF     		add	r7, sp, #0
 764              	.LCFI21:
 765              		.cfi_def_cfa_register 7
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 22


 420:Core/Src/main.c **** 
 421:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 766              		.loc 1 423 26
 767 0006 07F10803 		add	r3, r7, #8
 768 000a 0022     		movs	r2, #0
 769 000c 1A60     		str	r2, [r3]
 770 000e 5A60     		str	r2, [r3, #4]
 771 0010 9A60     		str	r2, [r3, #8]
 772 0012 DA60     		str	r2, [r3, #12]
 424:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 773              		.loc 1 424 27
 774 0014 3B46     		mov	r3, r7
 775 0016 0022     		movs	r2, #0
 776 0018 1A60     		str	r2, [r3]
 777 001a 5A60     		str	r2, [r3, #4]
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 429:Core/Src/main.c ****   htim4.Instance = TIM4;
 778              		.loc 1 429 18
 779 001c 1D4B     		ldr	r3, .L43
 780 001e 1E4A     		ldr	r2, .L43+4
 781 0020 1A60     		str	r2, [r3]
 430:Core/Src/main.c ****   htim4.Init.Prescaler = 7200-1;
 782              		.loc 1 430 24
 783 0022 1C4B     		ldr	r3, .L43
 784 0024 41F61F42 		movw	r2, #7199
 785 0028 5A60     		str	r2, [r3, #4]
 431:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 786              		.loc 1 431 26
 787 002a 1A4B     		ldr	r3, .L43
 788 002c 0022     		movs	r2, #0
 789 002e 9A60     		str	r2, [r3, #8]
 432:Core/Src/main.c ****   htim4.Init.Period = 10000;
 790              		.loc 1 432 21
 791 0030 184B     		ldr	r3, .L43
 792 0032 42F21072 		movw	r2, #10000
 793 0036 DA60     		str	r2, [r3, #12]
 433:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 794              		.loc 1 433 28
 795 0038 164B     		ldr	r3, .L43
 796 003a 0022     		movs	r2, #0
 797 003c 1A61     		str	r2, [r3, #16]
 434:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 798              		.loc 1 434 32
 799 003e 154B     		ldr	r3, .L43
 800 0040 0022     		movs	r2, #0
 801 0042 9A61     		str	r2, [r3, #24]
 435:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802              		.loc 1 435 7
 803 0044 1348     		ldr	r0, .L43
 804 0046 FFF7FEFF 		bl	HAL_TIM_Base_Init
 805 004a 0346     		mov	r3, r0
 806              		.loc 1 435 6
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 23


 807 004c 002B     		cmp	r3, #0
 808 004e 01D0     		beq	.L39
 436:Core/Src/main.c ****   {
 437:Core/Src/main.c ****     Error_Handler();
 809              		.loc 1 437 5
 810 0050 FFF7FEFF 		bl	Error_Handler
 811              	.L39:
 438:Core/Src/main.c ****   }
 439:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 812              		.loc 1 439 34
 813 0054 4FF48053 		mov	r3, #4096
 814 0058 BB60     		str	r3, [r7, #8]
 440:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 815              		.loc 1 440 7
 816 005a 07F10803 		add	r3, r7, #8
 817 005e 1946     		mov	r1, r3
 818 0060 0C48     		ldr	r0, .L43
 819 0062 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 820 0066 0346     		mov	r3, r0
 821              		.loc 1 440 6
 822 0068 002B     		cmp	r3, #0
 823 006a 01D0     		beq	.L40
 441:Core/Src/main.c ****   {
 442:Core/Src/main.c ****     Error_Handler();
 824              		.loc 1 442 5
 825 006c FFF7FEFF 		bl	Error_Handler
 826              	.L40:
 443:Core/Src/main.c ****   }
 444:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 827              		.loc 1 444 37
 828 0070 0023     		movs	r3, #0
 829 0072 3B60     		str	r3, [r7]
 445:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 830              		.loc 1 445 33
 831 0074 0023     		movs	r3, #0
 832 0076 7B60     		str	r3, [r7, #4]
 446:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 833              		.loc 1 446 7
 834 0078 3B46     		mov	r3, r7
 835 007a 1946     		mov	r1, r3
 836 007c 0548     		ldr	r0, .L43
 837 007e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 838 0082 0346     		mov	r3, r0
 839              		.loc 1 446 6
 840 0084 002B     		cmp	r3, #0
 841 0086 01D0     		beq	.L42
 447:Core/Src/main.c ****   {
 448:Core/Src/main.c ****     Error_Handler();
 842              		.loc 1 448 5
 843 0088 FFF7FEFF 		bl	Error_Handler
 844              	.L42:
 449:Core/Src/main.c ****   }
 450:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 453:Core/Src/main.c **** 
 454:Core/Src/main.c **** }
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 24


 845              		.loc 1 454 1
 846 008c 00BF     		nop
 847 008e 1837     		adds	r7, r7, #24
 848              	.LCFI22:
 849              		.cfi_def_cfa_offset 8
 850 0090 BD46     		mov	sp, r7
 851              	.LCFI23:
 852              		.cfi_def_cfa_register 13
 853              		@ sp needed
 854 0092 80BD     		pop	{r7, pc}
 855              	.L44:
 856              		.align	2
 857              	.L43:
 858 0094 00000000 		.word	htim4
 859 0098 00080040 		.word	1073743872
 860              		.cfi_endproc
 861              	.LFE71:
 863              		.section	.text.MX_GPIO_Init,"ax",%progbits
 864              		.align	1
 865              		.syntax unified
 866              		.thumb
 867              		.thumb_func
 868              		.fpu softvfp
 870              	MX_GPIO_Init:
 871              	.LFB72:
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** /**
 457:Core/Src/main.c ****   * @brief GPIO Initialization Function
 458:Core/Src/main.c ****   * @param None
 459:Core/Src/main.c ****   * @retval None
 460:Core/Src/main.c ****   */
 461:Core/Src/main.c **** static void MX_GPIO_Init(void)
 462:Core/Src/main.c **** {
 872              		.loc 1 462 1
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 32
 875              		@ frame_needed = 1, uses_anonymous_args = 0
 876 0000 80B5     		push	{r7, lr}
 877              	.LCFI24:
 878              		.cfi_def_cfa_offset 8
 879              		.cfi_offset 7, -8
 880              		.cfi_offset 14, -4
 881 0002 88B0     		sub	sp, sp, #32
 882              	.LCFI25:
 883              		.cfi_def_cfa_offset 40
 884 0004 00AF     		add	r7, sp, #0
 885              	.LCFI26:
 886              		.cfi_def_cfa_register 7
 463:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 887              		.loc 1 463 20
 888 0006 07F11003 		add	r3, r7, #16
 889 000a 0022     		movs	r2, #0
 890 000c 1A60     		str	r2, [r3]
 891 000e 5A60     		str	r2, [r3, #4]
 892 0010 9A60     		str	r2, [r3, #8]
 893 0012 DA60     		str	r2, [r3, #12]
 894              	.LBB4:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 25


 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 466:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 895              		.loc 1 466 3
 896 0014 3B4B     		ldr	r3, .L46
 897 0016 9B69     		ldr	r3, [r3, #24]
 898 0018 3A4A     		ldr	r2, .L46
 899 001a 43F01003 		orr	r3, r3, #16
 900 001e 9361     		str	r3, [r2, #24]
 901 0020 384B     		ldr	r3, .L46
 902 0022 9B69     		ldr	r3, [r3, #24]
 903 0024 03F01003 		and	r3, r3, #16
 904 0028 FB60     		str	r3, [r7, #12]
 905 002a FB68     		ldr	r3, [r7, #12]
 906              	.LBE4:
 907              	.LBB5:
 467:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 908              		.loc 1 467 3
 909 002c 354B     		ldr	r3, .L46
 910 002e 9B69     		ldr	r3, [r3, #24]
 911 0030 344A     		ldr	r2, .L46
 912 0032 43F02003 		orr	r3, r3, #32
 913 0036 9361     		str	r3, [r2, #24]
 914 0038 324B     		ldr	r3, .L46
 915 003a 9B69     		ldr	r3, [r3, #24]
 916 003c 03F02003 		and	r3, r3, #32
 917 0040 BB60     		str	r3, [r7, #8]
 918 0042 BB68     		ldr	r3, [r7, #8]
 919              	.LBE5:
 920              	.LBB6:
 468:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 921              		.loc 1 468 3
 922 0044 2F4B     		ldr	r3, .L46
 923 0046 9B69     		ldr	r3, [r3, #24]
 924 0048 2E4A     		ldr	r2, .L46
 925 004a 43F00403 		orr	r3, r3, #4
 926 004e 9361     		str	r3, [r2, #24]
 927 0050 2C4B     		ldr	r3, .L46
 928 0052 9B69     		ldr	r3, [r3, #24]
 929 0054 03F00403 		and	r3, r3, #4
 930 0058 7B60     		str	r3, [r7, #4]
 931 005a 7B68     		ldr	r3, [r7, #4]
 932              	.LBE6:
 933              	.LBB7:
 469:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 934              		.loc 1 469 3
 935 005c 294B     		ldr	r3, .L46
 936 005e 9B69     		ldr	r3, [r3, #24]
 937 0060 284A     		ldr	r2, .L46
 938 0062 43F00803 		orr	r3, r3, #8
 939 0066 9361     		str	r3, [r2, #24]
 940 0068 264B     		ldr	r3, .L46
 941 006a 9B69     		ldr	r3, [r3, #24]
 942 006c 03F00803 		and	r3, r3, #8
 943 0070 3B60     		str	r3, [r7]
 944 0072 3B68     		ldr	r3, [r7]
 945              	.LBE7:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 26


 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 472:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 946              		.loc 1 472 3
 947 0074 0022     		movs	r2, #0
 948 0076 4FF40051 		mov	r1, #8192
 949 007a 2348     		ldr	r0, .L46+4
 950 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 475:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 951              		.loc 1 475 3
 952 0080 0022     		movs	r2, #0
 953 0082 40F20251 		movw	r1, #1282
 954 0086 2148     		ldr	r0, .L46+8
 955 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 478:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 956              		.loc 1 478 23
 957 008c 4FF40053 		mov	r3, #8192
 958 0090 3B61     		str	r3, [r7, #16]
 479:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 959              		.loc 1 479 24
 960 0092 0123     		movs	r3, #1
 961 0094 7B61     		str	r3, [r7, #20]
 480:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 962              		.loc 1 480 24
 963 0096 0023     		movs	r3, #0
 964 0098 BB61     		str	r3, [r7, #24]
 481:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 965              		.loc 1 481 25
 966 009a 0223     		movs	r3, #2
 967 009c FB61     		str	r3, [r7, #28]
 482:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 968              		.loc 1 482 3
 969 009e 07F11003 		add	r3, r7, #16
 970 00a2 1946     		mov	r1, r3
 971 00a4 1848     		ldr	r0, .L46+4
 972 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /*Configure GPIO pins : PA1 PA8 PA10 */
 485:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10;
 973              		.loc 1 485 23
 974 00aa 40F20253 		movw	r3, #1282
 975 00ae 3B61     		str	r3, [r7, #16]
 486:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 976              		.loc 1 486 24
 977 00b0 0123     		movs	r3, #1
 978 00b2 7B61     		str	r3, [r7, #20]
 487:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 979              		.loc 1 487 24
 980 00b4 0023     		movs	r3, #0
 981 00b6 BB61     		str	r3, [r7, #24]
 488:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 982              		.loc 1 488 25
 983 00b8 0223     		movs	r3, #2
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 27


 984 00ba FB61     		str	r3, [r7, #28]
 489:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 985              		.loc 1 489 3
 986 00bc 07F11003 		add	r3, r7, #16
 987 00c0 1946     		mov	r1, r3
 988 00c2 1248     		ldr	r0, .L46+8
 989 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   /*Configure GPIO pins : PA6 PA7 */
 492:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 990              		.loc 1 492 23
 991 00c8 C023     		movs	r3, #192
 992 00ca 3B61     		str	r3, [r7, #16]
 493:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 993              		.loc 1 493 24
 994 00cc 0023     		movs	r3, #0
 995 00ce 7B61     		str	r3, [r7, #20]
 494:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 996              		.loc 1 494 24
 997 00d0 0123     		movs	r3, #1
 998 00d2 BB61     		str	r3, [r7, #24]
 495:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 999              		.loc 1 495 3
 1000 00d4 07F11003 		add	r3, r7, #16
 1001 00d8 1946     		mov	r1, r3
 1002 00da 0C48     		ldr	r0, .L46+8
 1003 00dc FFF7FEFF 		bl	HAL_GPIO_Init
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   /*Configure GPIO pin : PB10 */
 498:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 1004              		.loc 1 498 23
 1005 00e0 4FF48063 		mov	r3, #1024
 1006 00e4 3B61     		str	r3, [r7, #16]
 499:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 1007              		.loc 1 499 24
 1008 00e6 0023     		movs	r3, #0
 1009 00e8 7B61     		str	r3, [r7, #20]
 500:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1010              		.loc 1 500 24
 1011 00ea 0223     		movs	r3, #2
 1012 00ec BB61     		str	r3, [r7, #24]
 501:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1013              		.loc 1 501 3
 1014 00ee 07F11003 		add	r3, r7, #16
 1015 00f2 1946     		mov	r1, r3
 1016 00f4 0648     		ldr	r0, .L46+12
 1017 00f6 FFF7FEFF 		bl	HAL_GPIO_Init
 502:Core/Src/main.c **** 
 503:Core/Src/main.c **** }
 1018              		.loc 1 503 1
 1019 00fa 00BF     		nop
 1020 00fc 2037     		adds	r7, r7, #32
 1021              	.LCFI27:
 1022              		.cfi_def_cfa_offset 8
 1023 00fe BD46     		mov	sp, r7
 1024              	.LCFI28:
 1025              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 28


 1026              		@ sp needed
 1027 0100 80BD     		pop	{r7, pc}
 1028              	.L47:
 1029 0102 00BF     		.align	2
 1030              	.L46:
 1031 0104 00100240 		.word	1073876992
 1032 0108 00100140 		.word	1073811456
 1033 010c 00080140 		.word	1073809408
 1034 0110 000C0140 		.word	1073810432
 1035              		.cfi_endproc
 1036              	.LFE72:
 1038              		.section	.text.Error_Handler,"ax",%progbits
 1039              		.align	1
 1040              		.global	Error_Handler
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1044              		.fpu softvfp
 1046              	Error_Handler:
 1047              	.LFB73:
 504:Core/Src/main.c **** 
 505:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 506:Core/Src/main.c **** 
 507:Core/Src/main.c **** /* USER CODE END 4 */
 508:Core/Src/main.c **** 
 509:Core/Src/main.c **** /**
 510:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 511:Core/Src/main.c ****   * @retval None
 512:Core/Src/main.c ****   */
 513:Core/Src/main.c **** void Error_Handler(void)
 514:Core/Src/main.c **** {
 1048              		.loc 1 514 1
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 0
 1051              		@ frame_needed = 1, uses_anonymous_args = 0
 1052              		@ link register save eliminated.
 1053 0000 80B4     		push	{r7}
 1054              	.LCFI29:
 1055              		.cfi_def_cfa_offset 4
 1056              		.cfi_offset 7, -4
 1057 0002 00AF     		add	r7, sp, #0
 1058              	.LCFI30:
 1059              		.cfi_def_cfa_register 7
 1060              	.LBB8:
 1061              	.LBB9:
 1062              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 29


  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 30


  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 31


 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1063              		.loc 2 142 3
 1064              		.syntax unified
 1065              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1066 0004 72B6     		cpsid i
 1067              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1068              		.loc 2 143 1
 1069              		.thumb
 1070              		.syntax unified
 1071 0006 00BF     		nop
 1072              	.L49:
 1073              	.LBE9:
 1074              	.LBE8:
 515:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 516:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 517:Core/Src/main.c ****   __disable_irq();
 518:Core/Src/main.c ****   while (1)
 1075              		.loc 1 518 9 discriminator 1
 1076 0008 FEE7     		b	.L49
 1077              		.cfi_endproc
 1078              	.LFE73:
 1080              		.text
 1081              	.Letext0:
 1082              		.file 3 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\machine\\
 1083              		.file 4 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\sys\\_std
 1084              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1085              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1086              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1087              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1088              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1089              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1090              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1091              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1092              		.file 13 "Core/Inc/fonts.h"
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:20     .bss.hi2c1:00000000 hi2c1
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:17     .bss.hi2c1:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:27     .bss.htim4:00000000 htim4
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:24     .bss.htim4:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:34     .bss.MenuAtual:00000000 MenuAtual
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:31     .bss.MenuAtual:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:41     .bss.counterOpcao:00000000 counterOpcao
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:38     .bss.counterOpcao:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:48     .bss.counterPrev:00000000 counterPrev
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:45     .bss.counterPrev:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:55     .bss.txtCounter:00000000 txtCounter
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:52     .bss.txtCounter:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:61     .bss.ligarMotor:00000000 ligarMotor
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:62     .bss.ligarMotor:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:67     .data.StepAlta:00000000 StepAlta
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:70     .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:78     .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:148    .text.HAL_TIM_PeriodElapsedCallback:00000054 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:155    .rodata:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:168    .text.MenuHandler:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:175    .text.MenuHandler:00000000 MenuHandler
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:313    .text.MenuHandler:000000dc $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:326    .text.ClickHandler:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:333    .text.ClickHandler:00000000 ClickHandler
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:418    .text.ClickHandler:00000068 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:427    .text.main:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:434    .text.main:00000000 main
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:560    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:870    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:670    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:749    .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:546    .text.main:0000009c $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:553    .text.SystemClock_Config:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:1046   .text.Error_Handler:00000000 Error_Handler
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:664    .text.MX_I2C1_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:736    .text.MX_I2C1_Init:00000050 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:743    .text.MX_TIM4_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:858    .text.MX_TIM4_Init:00000094 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:864    .text.MX_GPIO_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:1031   .text.MX_GPIO_Init:00000104 $d
C:\Users\danie\AppData\Local\Temp\ccshwPZg.s:1039   .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
itoa
SSD1306_Clear
SSD1306_GotoXY
SSD1306_Puts
SSD1306_UpdateScreen
Font_7x10
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Stop_IT
HAL_GPIO_ReadPin
HAL_Init
SSD1306_Init
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccshwPZg.s 			page 33


memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_I2C_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_GPIO_Init
